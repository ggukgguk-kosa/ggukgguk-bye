// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RecordTest is an object representing the database table.
type RecordTest struct {
	RecordID        int         `boil:"record_id" json:"record_id" toml:"record_id" yaml:"record_id"`
	MemberID        string      `boil:"member_id" json:"member_id" toml:"member_id" yaml:"member_id"`
	RecordComment   null.String `boil:"record_comment" json:"record_comment,omitempty" toml:"record_comment" yaml:"record_comment,omitempty"`
	RecordCreatedAt time.Time   `boil:"record_created_at" json:"record_created_at" toml:"record_created_at" yaml:"record_created_at"`
	// UUID
	MediaFileID         null.String  `boil:"media_file_id" json:"media_file_id,omitempty" toml:"media_file_id" yaml:"media_file_id,omitempty"`
	RecordLocationY     null.Float32 `boil:"record_location_y" json:"record_location_y,omitempty" toml:"record_location_y" yaml:"record_location_y,omitempty"`
	RecordLocationX     null.Float32 `boil:"record_location_x" json:"record_location_x,omitempty" toml:"record_location_x" yaml:"record_location_x,omitempty"`
	RecordIsOpen        bool         `boil:"record_is_open" json:"record_is_open" toml:"record_is_open" yaml:"record_is_open"`
	RecordShareTo       null.String  `boil:"record_share_to" json:"record_share_to,omitempty" toml:"record_share_to" yaml:"record_share_to,omitempty"`
	RecordShareAccepted null.Bool    `boil:"record_share_accepted" json:"record_share_accepted,omitempty" toml:"record_share_accepted" yaml:"record_share_accepted,omitempty"`

	R *recordTestR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L recordTestL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RecordTestColumns = struct {
	RecordID            string
	MemberID            string
	RecordComment       string
	RecordCreatedAt     string
	MediaFileID         string
	RecordLocationY     string
	RecordLocationX     string
	RecordIsOpen        string
	RecordShareTo       string
	RecordShareAccepted string
}{
	RecordID:            "record_id",
	MemberID:            "member_id",
	RecordComment:       "record_comment",
	RecordCreatedAt:     "record_created_at",
	MediaFileID:         "media_file_id",
	RecordLocationY:     "record_location_y",
	RecordLocationX:     "record_location_x",
	RecordIsOpen:        "record_is_open",
	RecordShareTo:       "record_share_to",
	RecordShareAccepted: "record_share_accepted",
}

var RecordTestTableColumns = struct {
	RecordID            string
	MemberID            string
	RecordComment       string
	RecordCreatedAt     string
	MediaFileID         string
	RecordLocationY     string
	RecordLocationX     string
	RecordIsOpen        string
	RecordShareTo       string
	RecordShareAccepted string
}{
	RecordID:            "record_test.record_id",
	MemberID:            "record_test.member_id",
	RecordComment:       "record_test.record_comment",
	RecordCreatedAt:     "record_test.record_created_at",
	MediaFileID:         "record_test.media_file_id",
	RecordLocationY:     "record_test.record_location_y",
	RecordLocationX:     "record_test.record_location_x",
	RecordIsOpen:        "record_test.record_is_open",
	RecordShareTo:       "record_test.record_share_to",
	RecordShareAccepted: "record_test.record_share_accepted",
}

// Generated where

var RecordTestWhere = struct {
	RecordID            whereHelperint
	MemberID            whereHelperstring
	RecordComment       whereHelpernull_String
	RecordCreatedAt     whereHelpertime_Time
	MediaFileID         whereHelpernull_String
	RecordLocationY     whereHelpernull_Float32
	RecordLocationX     whereHelpernull_Float32
	RecordIsOpen        whereHelperbool
	RecordShareTo       whereHelpernull_String
	RecordShareAccepted whereHelpernull_Bool
}{
	RecordID:            whereHelperint{field: "`record_test`.`record_id`"},
	MemberID:            whereHelperstring{field: "`record_test`.`member_id`"},
	RecordComment:       whereHelpernull_String{field: "`record_test`.`record_comment`"},
	RecordCreatedAt:     whereHelpertime_Time{field: "`record_test`.`record_created_at`"},
	MediaFileID:         whereHelpernull_String{field: "`record_test`.`media_file_id`"},
	RecordLocationY:     whereHelpernull_Float32{field: "`record_test`.`record_location_y`"},
	RecordLocationX:     whereHelpernull_Float32{field: "`record_test`.`record_location_x`"},
	RecordIsOpen:        whereHelperbool{field: "`record_test`.`record_is_open`"},
	RecordShareTo:       whereHelpernull_String{field: "`record_test`.`record_share_to`"},
	RecordShareAccepted: whereHelpernull_Bool{field: "`record_test`.`record_share_accepted`"},
}

// RecordTestRels is where relationship names are stored.
var RecordTestRels = struct {
	Member    string
	MediaFile string
}{
	Member:    "Member",
	MediaFile: "MediaFile",
}

// recordTestR is where relationships are stored.
type recordTestR struct {
	Member    *Member    `boil:"Member" json:"Member" toml:"Member" yaml:"Member"`
	MediaFile *MediaFile `boil:"MediaFile" json:"MediaFile" toml:"MediaFile" yaml:"MediaFile"`
}

// NewStruct creates a new relationship struct
func (*recordTestR) NewStruct() *recordTestR {
	return &recordTestR{}
}

func (r *recordTestR) GetMember() *Member {
	if r == nil {
		return nil
	}
	return r.Member
}

func (r *recordTestR) GetMediaFile() *MediaFile {
	if r == nil {
		return nil
	}
	return r.MediaFile
}

// recordTestL is where Load methods for each relationship are stored.
type recordTestL struct{}

var (
	recordTestAllColumns            = []string{"record_id", "member_id", "record_comment", "record_created_at", "media_file_id", "record_location_y", "record_location_x", "record_is_open", "record_share_to", "record_share_accepted"}
	recordTestColumnsWithoutDefault = []string{"member_id", "record_comment", "media_file_id", "record_location_y", "record_location_x", "record_is_open", "record_share_to", "record_share_accepted"}
	recordTestColumnsWithDefault    = []string{"record_id", "record_created_at"}
	recordTestPrimaryKeyColumns     = []string{"record_id"}
	recordTestGeneratedColumns      = []string{}
)

type (
	// RecordTestSlice is an alias for a slice of pointers to RecordTest.
	// This should almost always be used instead of []RecordTest.
	RecordTestSlice []*RecordTest
	// RecordTestHook is the signature for custom RecordTest hook methods
	RecordTestHook func(context.Context, boil.ContextExecutor, *RecordTest) error

	recordTestQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	recordTestType                 = reflect.TypeOf(&RecordTest{})
	recordTestMapping              = queries.MakeStructMapping(recordTestType)
	recordTestPrimaryKeyMapping, _ = queries.BindMapping(recordTestType, recordTestMapping, recordTestPrimaryKeyColumns)
	recordTestInsertCacheMut       sync.RWMutex
	recordTestInsertCache          = make(map[string]insertCache)
	recordTestUpdateCacheMut       sync.RWMutex
	recordTestUpdateCache          = make(map[string]updateCache)
	recordTestUpsertCacheMut       sync.RWMutex
	recordTestUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var recordTestAfterSelectMu sync.Mutex
var recordTestAfterSelectHooks []RecordTestHook

var recordTestBeforeInsertMu sync.Mutex
var recordTestBeforeInsertHooks []RecordTestHook
var recordTestAfterInsertMu sync.Mutex
var recordTestAfterInsertHooks []RecordTestHook

var recordTestBeforeUpdateMu sync.Mutex
var recordTestBeforeUpdateHooks []RecordTestHook
var recordTestAfterUpdateMu sync.Mutex
var recordTestAfterUpdateHooks []RecordTestHook

var recordTestBeforeDeleteMu sync.Mutex
var recordTestBeforeDeleteHooks []RecordTestHook
var recordTestAfterDeleteMu sync.Mutex
var recordTestAfterDeleteHooks []RecordTestHook

var recordTestBeforeUpsertMu sync.Mutex
var recordTestBeforeUpsertHooks []RecordTestHook
var recordTestAfterUpsertMu sync.Mutex
var recordTestAfterUpsertHooks []RecordTestHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RecordTest) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recordTestAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RecordTest) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recordTestBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RecordTest) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recordTestAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RecordTest) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recordTestBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RecordTest) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recordTestAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RecordTest) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recordTestBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RecordTest) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recordTestAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RecordTest) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recordTestBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RecordTest) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recordTestAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRecordTestHook registers your hook function for all future operations.
func AddRecordTestHook(hookPoint boil.HookPoint, recordTestHook RecordTestHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		recordTestAfterSelectMu.Lock()
		recordTestAfterSelectHooks = append(recordTestAfterSelectHooks, recordTestHook)
		recordTestAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		recordTestBeforeInsertMu.Lock()
		recordTestBeforeInsertHooks = append(recordTestBeforeInsertHooks, recordTestHook)
		recordTestBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		recordTestAfterInsertMu.Lock()
		recordTestAfterInsertHooks = append(recordTestAfterInsertHooks, recordTestHook)
		recordTestAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		recordTestBeforeUpdateMu.Lock()
		recordTestBeforeUpdateHooks = append(recordTestBeforeUpdateHooks, recordTestHook)
		recordTestBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		recordTestAfterUpdateMu.Lock()
		recordTestAfterUpdateHooks = append(recordTestAfterUpdateHooks, recordTestHook)
		recordTestAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		recordTestBeforeDeleteMu.Lock()
		recordTestBeforeDeleteHooks = append(recordTestBeforeDeleteHooks, recordTestHook)
		recordTestBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		recordTestAfterDeleteMu.Lock()
		recordTestAfterDeleteHooks = append(recordTestAfterDeleteHooks, recordTestHook)
		recordTestAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		recordTestBeforeUpsertMu.Lock()
		recordTestBeforeUpsertHooks = append(recordTestBeforeUpsertHooks, recordTestHook)
		recordTestBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		recordTestAfterUpsertMu.Lock()
		recordTestAfterUpsertHooks = append(recordTestAfterUpsertHooks, recordTestHook)
		recordTestAfterUpsertMu.Unlock()
	}
}

// OneG returns a single recordTest record from the query using the global executor.
func (q recordTestQuery) OneG(ctx context.Context) (*RecordTest, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single recordTest record from the query.
func (q recordTestQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RecordTest, error) {
	o := &RecordTest{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for record_test")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all RecordTest records from the query using the global executor.
func (q recordTestQuery) AllG(ctx context.Context) (RecordTestSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all RecordTest records from the query.
func (q recordTestQuery) All(ctx context.Context, exec boil.ContextExecutor) (RecordTestSlice, error) {
	var o []*RecordTest

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RecordTest slice")
	}

	if len(recordTestAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all RecordTest records in the query using the global executor
func (q recordTestQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all RecordTest records in the query.
func (q recordTestQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count record_test rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q recordTestQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q recordTestQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if record_test exists")
	}

	return count > 0, nil
}

// Member pointed to by the foreign key.
func (o *RecordTest) Member(mods ...qm.QueryMod) memberQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`member_id` = ?", o.MemberID),
	}

	queryMods = append(queryMods, mods...)

	return Members(queryMods...)
}

// MediaFile pointed to by the foreign key.
func (o *RecordTest) MediaFile(mods ...qm.QueryMod) mediaFileQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`media_file_id` = ?", o.MediaFileID),
	}

	queryMods = append(queryMods, mods...)

	return MediaFiles(queryMods...)
}

// LoadMember allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (recordTestL) LoadMember(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecordTest interface{}, mods queries.Applicator) error {
	var slice []*RecordTest
	var object *RecordTest

	if singular {
		var ok bool
		object, ok = maybeRecordTest.(*RecordTest)
		if !ok {
			object = new(RecordTest)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRecordTest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRecordTest))
			}
		}
	} else {
		s, ok := maybeRecordTest.(*[]*RecordTest)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRecordTest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRecordTest))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &recordTestR{}
		}
		args[object.MemberID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recordTestR{}
			}

			args[obj.MemberID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`member`),
		qm.WhereIn(`member.member_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Member")
	}

	var resultSlice []*Member
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Member")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for member")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for member")
	}

	if len(memberAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Member = foreign
		if foreign.R == nil {
			foreign.R = &memberR{}
		}
		foreign.R.RecordTests = append(foreign.R.RecordTests, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MemberID == foreign.MemberID {
				local.R.Member = foreign
				if foreign.R == nil {
					foreign.R = &memberR{}
				}
				foreign.R.RecordTests = append(foreign.R.RecordTests, local)
				break
			}
		}
	}

	return nil
}

// LoadMediaFile allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (recordTestL) LoadMediaFile(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecordTest interface{}, mods queries.Applicator) error {
	var slice []*RecordTest
	var object *RecordTest

	if singular {
		var ok bool
		object, ok = maybeRecordTest.(*RecordTest)
		if !ok {
			object = new(RecordTest)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRecordTest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRecordTest))
			}
		}
	} else {
		s, ok := maybeRecordTest.(*[]*RecordTest)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRecordTest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRecordTest))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &recordTestR{}
		}
		if !queries.IsNil(object.MediaFileID) {
			args[object.MediaFileID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recordTestR{}
			}

			if !queries.IsNil(obj.MediaFileID) {
				args[obj.MediaFileID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`media_file`),
		qm.WhereIn(`media_file.media_file_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MediaFile")
	}

	var resultSlice []*MediaFile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MediaFile")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for media_file")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for media_file")
	}

	if len(mediaFileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MediaFile = foreign
		if foreign.R == nil {
			foreign.R = &mediaFileR{}
		}
		foreign.R.RecordTests = append(foreign.R.RecordTests, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.MediaFileID, foreign.MediaFileID) {
				local.R.MediaFile = foreign
				if foreign.R == nil {
					foreign.R = &mediaFileR{}
				}
				foreign.R.RecordTests = append(foreign.R.RecordTests, local)
				break
			}
		}
	}

	return nil
}

// SetMemberG of the recordTest to the related item.
// Sets o.R.Member to related.
// Adds o to related.R.RecordTests.
// Uses the global database handle.
func (o *RecordTest) SetMemberG(ctx context.Context, insert bool, related *Member) error {
	return o.SetMember(ctx, boil.GetContextDB(), insert, related)
}

// SetMember of the recordTest to the related item.
// Sets o.R.Member to related.
// Adds o to related.R.RecordTests.
func (o *RecordTest) SetMember(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Member) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `record_test` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"member_id"}),
		strmangle.WhereClause("`", "`", 0, recordTestPrimaryKeyColumns),
	)
	values := []interface{}{related.MemberID, o.RecordID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MemberID = related.MemberID
	if o.R == nil {
		o.R = &recordTestR{
			Member: related,
		}
	} else {
		o.R.Member = related
	}

	if related.R == nil {
		related.R = &memberR{
			RecordTests: RecordTestSlice{o},
		}
	} else {
		related.R.RecordTests = append(related.R.RecordTests, o)
	}

	return nil
}

// SetMediaFileG of the recordTest to the related item.
// Sets o.R.MediaFile to related.
// Adds o to related.R.RecordTests.
// Uses the global database handle.
func (o *RecordTest) SetMediaFileG(ctx context.Context, insert bool, related *MediaFile) error {
	return o.SetMediaFile(ctx, boil.GetContextDB(), insert, related)
}

// SetMediaFile of the recordTest to the related item.
// Sets o.R.MediaFile to related.
// Adds o to related.R.RecordTests.
func (o *RecordTest) SetMediaFile(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MediaFile) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `record_test` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"media_file_id"}),
		strmangle.WhereClause("`", "`", 0, recordTestPrimaryKeyColumns),
	)
	values := []interface{}{related.MediaFileID, o.RecordID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.MediaFileID, related.MediaFileID)
	if o.R == nil {
		o.R = &recordTestR{
			MediaFile: related,
		}
	} else {
		o.R.MediaFile = related
	}

	if related.R == nil {
		related.R = &mediaFileR{
			RecordTests: RecordTestSlice{o},
		}
	} else {
		related.R.RecordTests = append(related.R.RecordTests, o)
	}

	return nil
}

// RemoveMediaFileG relationship.
// Sets o.R.MediaFile to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *RecordTest) RemoveMediaFileG(ctx context.Context, related *MediaFile) error {
	return o.RemoveMediaFile(ctx, boil.GetContextDB(), related)
}

// RemoveMediaFile relationship.
// Sets o.R.MediaFile to nil.
// Removes o from all passed in related items' relationships struct.
func (o *RecordTest) RemoveMediaFile(ctx context.Context, exec boil.ContextExecutor, related *MediaFile) error {
	var err error

	queries.SetScanner(&o.MediaFileID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("media_file_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.MediaFile = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RecordTests {
		if queries.Equal(o.MediaFileID, ri.MediaFileID) {
			continue
		}

		ln := len(related.R.RecordTests)
		if ln > 1 && i < ln-1 {
			related.R.RecordTests[i] = related.R.RecordTests[ln-1]
		}
		related.R.RecordTests = related.R.RecordTests[:ln-1]
		break
	}
	return nil
}

// RecordTests retrieves all the records using an executor.
func RecordTests(mods ...qm.QueryMod) recordTestQuery {
	mods = append(mods, qm.From("`record_test`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`record_test`.*"})
	}

	return recordTestQuery{q}
}

// FindRecordTestG retrieves a single record by ID.
func FindRecordTestG(ctx context.Context, recordID int, selectCols ...string) (*RecordTest, error) {
	return FindRecordTest(ctx, boil.GetContextDB(), recordID, selectCols...)
}

// FindRecordTest retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRecordTest(ctx context.Context, exec boil.ContextExecutor, recordID int, selectCols ...string) (*RecordTest, error) {
	recordTestObj := &RecordTest{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `record_test` where `record_id`=?", sel,
	)

	q := queries.Raw(query, recordID)

	err := q.Bind(ctx, exec, recordTestObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from record_test")
	}

	if err = recordTestObj.doAfterSelectHooks(ctx, exec); err != nil {
		return recordTestObj, err
	}

	return recordTestObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *RecordTest) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RecordTest) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no record_test provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(recordTestColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	recordTestInsertCacheMut.RLock()
	cache, cached := recordTestInsertCache[key]
	recordTestInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			recordTestAllColumns,
			recordTestColumnsWithDefault,
			recordTestColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(recordTestType, recordTestMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(recordTestType, recordTestMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `record_test` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `record_test` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `record_test` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, recordTestPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into record_test")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.RecordID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == recordTestMapping["record_id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.RecordID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for record_test")
	}

CacheNoHooks:
	if !cached {
		recordTestInsertCacheMut.Lock()
		recordTestInsertCache[key] = cache
		recordTestInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single RecordTest record using the global executor.
// See Update for more documentation.
func (o *RecordTest) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the RecordTest.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RecordTest) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	recordTestUpdateCacheMut.RLock()
	cache, cached := recordTestUpdateCache[key]
	recordTestUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			recordTestAllColumns,
			recordTestPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update record_test, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `record_test` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, recordTestPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(recordTestType, recordTestMapping, append(wl, recordTestPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update record_test row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for record_test")
	}

	if !cached {
		recordTestUpdateCacheMut.Lock()
		recordTestUpdateCache[key] = cache
		recordTestUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q recordTestQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q recordTestQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for record_test")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for record_test")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o RecordTestSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RecordTestSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recordTestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `record_test` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, recordTestPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in recordTest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all recordTest")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *RecordTest) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLRecordTestUniqueColumns = []string{
	"record_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RecordTest) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no record_test provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(recordTestColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLRecordTestUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	recordTestUpsertCacheMut.RLock()
	cache, cached := recordTestUpsertCache[key]
	recordTestUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			recordTestAllColumns,
			recordTestColumnsWithDefault,
			recordTestColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			recordTestAllColumns,
			recordTestPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert record_test, could not build update column list")
		}

		ret := strmangle.SetComplement(recordTestAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`record_test`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `record_test` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(recordTestType, recordTestMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(recordTestType, recordTestMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for record_test")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.RecordID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == recordTestMapping["record_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(recordTestType, recordTestMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for record_test")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for record_test")
	}

CacheNoHooks:
	if !cached {
		recordTestUpsertCacheMut.Lock()
		recordTestUpsertCache[key] = cache
		recordTestUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single RecordTest record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *RecordTest) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single RecordTest record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RecordTest) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RecordTest provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), recordTestPrimaryKeyMapping)
	sql := "DELETE FROM `record_test` WHERE `record_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from record_test")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for record_test")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q recordTestQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q recordTestQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no recordTestQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from record_test")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for record_test")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o RecordTestSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RecordTestSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(recordTestBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recordTestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `record_test` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, recordTestPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from recordTest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for record_test")
	}

	if len(recordTestAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *RecordTest) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no RecordTest provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RecordTest) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRecordTest(ctx, exec, o.RecordID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RecordTestSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty RecordTestSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RecordTestSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RecordTestSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recordTestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `record_test`.* FROM `record_test` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, recordTestPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RecordTestSlice")
	}

	*o = slice

	return nil
}

// RecordTestExistsG checks if the RecordTest row exists.
func RecordTestExistsG(ctx context.Context, recordID int) (bool, error) {
	return RecordTestExists(ctx, boil.GetContextDB(), recordID)
}

// RecordTestExists checks if the RecordTest row exists.
func RecordTestExists(ctx context.Context, exec boil.ContextExecutor, recordID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `record_test` where `record_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, recordID)
	}
	row := exec.QueryRowContext(ctx, sql, recordID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if record_test exists")
	}

	return exists, nil
}

// Exists checks if the RecordTest row exists.
func (o *RecordTest) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RecordTestExists(ctx, exec, o.RecordID)
}
