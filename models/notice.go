// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Notice is an object representing the database table.
type Notice struct {
	NoticeID          int       `boil:"notice_id" json:"notice_id" toml:"notice_id" yaml:"notice_id"`
	NoticeTitle       string    `boil:"notice_title" json:"notice_title" toml:"notice_title" yaml:"notice_title"`
	NoticeContent     string    `boil:"notice_content" json:"notice_content" toml:"notice_content" yaml:"notice_content"`
	NoticeCreatedAt   time.Time `boil:"notice_created_at" json:"notice_created_at" toml:"notice_created_at" yaml:"notice_created_at"`
	NoticeIsEmergency bool      `boil:"notice_is_emergency" json:"notice_is_emergency" toml:"notice_is_emergency" yaml:"notice_is_emergency"`

	R *noticeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L noticeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NoticeColumns = struct {
	NoticeID          string
	NoticeTitle       string
	NoticeContent     string
	NoticeCreatedAt   string
	NoticeIsEmergency string
}{
	NoticeID:          "notice_id",
	NoticeTitle:       "notice_title",
	NoticeContent:     "notice_content",
	NoticeCreatedAt:   "notice_created_at",
	NoticeIsEmergency: "notice_is_emergency",
}

var NoticeTableColumns = struct {
	NoticeID          string
	NoticeTitle       string
	NoticeContent     string
	NoticeCreatedAt   string
	NoticeIsEmergency string
}{
	NoticeID:          "notice.notice_id",
	NoticeTitle:       "notice.notice_title",
	NoticeContent:     "notice.notice_content",
	NoticeCreatedAt:   "notice.notice_created_at",
	NoticeIsEmergency: "notice.notice_is_emergency",
}

// Generated where

var NoticeWhere = struct {
	NoticeID          whereHelperint
	NoticeTitle       whereHelperstring
	NoticeContent     whereHelperstring
	NoticeCreatedAt   whereHelpertime_Time
	NoticeIsEmergency whereHelperbool
}{
	NoticeID:          whereHelperint{field: "`notice`.`notice_id`"},
	NoticeTitle:       whereHelperstring{field: "`notice`.`notice_title`"},
	NoticeContent:     whereHelperstring{field: "`notice`.`notice_content`"},
	NoticeCreatedAt:   whereHelpertime_Time{field: "`notice`.`notice_created_at`"},
	NoticeIsEmergency: whereHelperbool{field: "`notice`.`notice_is_emergency`"},
}

// NoticeRels is where relationship names are stored.
var NoticeRels = struct {
}{}

// noticeR is where relationships are stored.
type noticeR struct {
}

// NewStruct creates a new relationship struct
func (*noticeR) NewStruct() *noticeR {
	return &noticeR{}
}

// noticeL is where Load methods for each relationship are stored.
type noticeL struct{}

var (
	noticeAllColumns            = []string{"notice_id", "notice_title", "notice_content", "notice_created_at", "notice_is_emergency"}
	noticeColumnsWithoutDefault = []string{"notice_title", "notice_content"}
	noticeColumnsWithDefault    = []string{"notice_id", "notice_created_at", "notice_is_emergency"}
	noticePrimaryKeyColumns     = []string{"notice_id"}
	noticeGeneratedColumns      = []string{}
)

type (
	// NoticeSlice is an alias for a slice of pointers to Notice.
	// This should almost always be used instead of []Notice.
	NoticeSlice []*Notice
	// NoticeHook is the signature for custom Notice hook methods
	NoticeHook func(context.Context, boil.ContextExecutor, *Notice) error

	noticeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	noticeType                 = reflect.TypeOf(&Notice{})
	noticeMapping              = queries.MakeStructMapping(noticeType)
	noticePrimaryKeyMapping, _ = queries.BindMapping(noticeType, noticeMapping, noticePrimaryKeyColumns)
	noticeInsertCacheMut       sync.RWMutex
	noticeInsertCache          = make(map[string]insertCache)
	noticeUpdateCacheMut       sync.RWMutex
	noticeUpdateCache          = make(map[string]updateCache)
	noticeUpsertCacheMut       sync.RWMutex
	noticeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var noticeAfterSelectMu sync.Mutex
var noticeAfterSelectHooks []NoticeHook

var noticeBeforeInsertMu sync.Mutex
var noticeBeforeInsertHooks []NoticeHook
var noticeAfterInsertMu sync.Mutex
var noticeAfterInsertHooks []NoticeHook

var noticeBeforeUpdateMu sync.Mutex
var noticeBeforeUpdateHooks []NoticeHook
var noticeAfterUpdateMu sync.Mutex
var noticeAfterUpdateHooks []NoticeHook

var noticeBeforeDeleteMu sync.Mutex
var noticeBeforeDeleteHooks []NoticeHook
var noticeAfterDeleteMu sync.Mutex
var noticeAfterDeleteHooks []NoticeHook

var noticeBeforeUpsertMu sync.Mutex
var noticeBeforeUpsertHooks []NoticeHook
var noticeAfterUpsertMu sync.Mutex
var noticeAfterUpsertHooks []NoticeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Notice) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range noticeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Notice) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range noticeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Notice) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range noticeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Notice) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range noticeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Notice) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range noticeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Notice) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range noticeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Notice) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range noticeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Notice) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range noticeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Notice) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range noticeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddNoticeHook registers your hook function for all future operations.
func AddNoticeHook(hookPoint boil.HookPoint, noticeHook NoticeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		noticeAfterSelectMu.Lock()
		noticeAfterSelectHooks = append(noticeAfterSelectHooks, noticeHook)
		noticeAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		noticeBeforeInsertMu.Lock()
		noticeBeforeInsertHooks = append(noticeBeforeInsertHooks, noticeHook)
		noticeBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		noticeAfterInsertMu.Lock()
		noticeAfterInsertHooks = append(noticeAfterInsertHooks, noticeHook)
		noticeAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		noticeBeforeUpdateMu.Lock()
		noticeBeforeUpdateHooks = append(noticeBeforeUpdateHooks, noticeHook)
		noticeBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		noticeAfterUpdateMu.Lock()
		noticeAfterUpdateHooks = append(noticeAfterUpdateHooks, noticeHook)
		noticeAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		noticeBeforeDeleteMu.Lock()
		noticeBeforeDeleteHooks = append(noticeBeforeDeleteHooks, noticeHook)
		noticeBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		noticeAfterDeleteMu.Lock()
		noticeAfterDeleteHooks = append(noticeAfterDeleteHooks, noticeHook)
		noticeAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		noticeBeforeUpsertMu.Lock()
		noticeBeforeUpsertHooks = append(noticeBeforeUpsertHooks, noticeHook)
		noticeBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		noticeAfterUpsertMu.Lock()
		noticeAfterUpsertHooks = append(noticeAfterUpsertHooks, noticeHook)
		noticeAfterUpsertMu.Unlock()
	}
}

// OneG returns a single notice record from the query using the global executor.
func (q noticeQuery) OneG(ctx context.Context) (*Notice, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single notice record from the query.
func (q noticeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Notice, error) {
	o := &Notice{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for notice")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Notice records from the query using the global executor.
func (q noticeQuery) AllG(ctx context.Context) (NoticeSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Notice records from the query.
func (q noticeQuery) All(ctx context.Context, exec boil.ContextExecutor) (NoticeSlice, error) {
	var o []*Notice

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Notice slice")
	}

	if len(noticeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Notice records in the query using the global executor
func (q noticeQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Notice records in the query.
func (q noticeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count notice rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q noticeQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q noticeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if notice exists")
	}

	return count > 0, nil
}

// Notices retrieves all the records using an executor.
func Notices(mods ...qm.QueryMod) noticeQuery {
	mods = append(mods, qm.From("`notice`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`notice`.*"})
	}

	return noticeQuery{q}
}

// FindNoticeG retrieves a single record by ID.
func FindNoticeG(ctx context.Context, noticeID int, selectCols ...string) (*Notice, error) {
	return FindNotice(ctx, boil.GetContextDB(), noticeID, selectCols...)
}

// FindNotice retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNotice(ctx context.Context, exec boil.ContextExecutor, noticeID int, selectCols ...string) (*Notice, error) {
	noticeObj := &Notice{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `notice` where `notice_id`=?", sel,
	)

	q := queries.Raw(query, noticeID)

	err := q.Bind(ctx, exec, noticeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from notice")
	}

	if err = noticeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return noticeObj, err
	}

	return noticeObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Notice) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Notice) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no notice provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(noticeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	noticeInsertCacheMut.RLock()
	cache, cached := noticeInsertCache[key]
	noticeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			noticeAllColumns,
			noticeColumnsWithDefault,
			noticeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(noticeType, noticeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(noticeType, noticeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `notice` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `notice` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `notice` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, noticePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into notice")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.NoticeID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == noticeMapping["notice_id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.NoticeID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for notice")
	}

CacheNoHooks:
	if !cached {
		noticeInsertCacheMut.Lock()
		noticeInsertCache[key] = cache
		noticeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Notice record using the global executor.
// See Update for more documentation.
func (o *Notice) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Notice.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Notice) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	noticeUpdateCacheMut.RLock()
	cache, cached := noticeUpdateCache[key]
	noticeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			noticeAllColumns,
			noticePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update notice, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `notice` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, noticePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(noticeType, noticeMapping, append(wl, noticePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update notice row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for notice")
	}

	if !cached {
		noticeUpdateCacheMut.Lock()
		noticeUpdateCache[key] = cache
		noticeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q noticeQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q noticeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for notice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for notice")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o NoticeSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NoticeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), noticePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `notice` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, noticePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in notice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all notice")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Notice) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLNoticeUniqueColumns = []string{
	"notice_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Notice) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no notice provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(noticeColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLNoticeUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	noticeUpsertCacheMut.RLock()
	cache, cached := noticeUpsertCache[key]
	noticeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			noticeAllColumns,
			noticeColumnsWithDefault,
			noticeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			noticeAllColumns,
			noticePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert notice, could not build update column list")
		}

		ret := strmangle.SetComplement(noticeAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`notice`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `notice` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(noticeType, noticeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(noticeType, noticeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for notice")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.NoticeID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == noticeMapping["notice_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(noticeType, noticeMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for notice")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for notice")
	}

CacheNoHooks:
	if !cached {
		noticeUpsertCacheMut.Lock()
		noticeUpsertCache[key] = cache
		noticeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Notice record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Notice) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Notice record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Notice) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Notice provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), noticePrimaryKeyMapping)
	sql := "DELETE FROM `notice` WHERE `notice_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from notice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for notice")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q noticeQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q noticeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no noticeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from notice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for notice")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o NoticeSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NoticeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(noticeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), noticePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `notice` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, noticePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from notice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for notice")
	}

	if len(noticeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Notice) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Notice provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Notice) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindNotice(ctx, exec, o.NoticeID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NoticeSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty NoticeSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NoticeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NoticeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), noticePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `notice`.* FROM `notice` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, noticePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in NoticeSlice")
	}

	*o = slice

	return nil
}

// NoticeExistsG checks if the Notice row exists.
func NoticeExistsG(ctx context.Context, noticeID int) (bool, error) {
	return NoticeExists(ctx, boil.GetContextDB(), noticeID)
}

// NoticeExists checks if the Notice row exists.
func NoticeExists(ctx context.Context, exec boil.ContextExecutor, noticeID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `notice` where `notice_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, noticeID)
	}
	row := exec.QueryRowContext(ctx, sql, noticeID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if notice exists")
	}

	return exists, nil
}

// Exists checks if the Notice row exists.
func (o *Notice) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return NoticeExists(ctx, exec, o.NoticeID)
}
