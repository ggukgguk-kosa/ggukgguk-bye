// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Record is an object representing the database table.
type Record struct {
	RecordID        int         `boil:"record_id" json:"record_id" toml:"record_id" yaml:"record_id"`
	MemberID        string      `boil:"member_id" json:"member_id" toml:"member_id" yaml:"member_id"`
	RecordComment   null.String `boil:"record_comment" json:"record_comment,omitempty" toml:"record_comment" yaml:"record_comment,omitempty"`
	RecordCreatedAt time.Time   `boil:"record_created_at" json:"record_created_at" toml:"record_created_at" yaml:"record_created_at"`
	// UUID
	MediaFileID         null.String  `boil:"media_file_id" json:"media_file_id,omitempty" toml:"media_file_id" yaml:"media_file_id,omitempty"`
	RecordLocationY     null.Float32 `boil:"record_location_y" json:"record_location_y,omitempty" toml:"record_location_y" yaml:"record_location_y,omitempty"`
	RecordLocationX     null.Float32 `boil:"record_location_x" json:"record_location_x,omitempty" toml:"record_location_x" yaml:"record_location_x,omitempty"`
	RecordIsOpen        bool         `boil:"record_is_open" json:"record_is_open" toml:"record_is_open" yaml:"record_is_open"`
	RecordShareTo       null.String  `boil:"record_share_to" json:"record_share_to,omitempty" toml:"record_share_to" yaml:"record_share_to,omitempty"`
	RecordShareAccepted null.Bool    `boil:"record_share_accepted" json:"record_share_accepted,omitempty" toml:"record_share_accepted" yaml:"record_share_accepted,omitempty"`

	R *recordR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L recordL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RecordColumns = struct {
	RecordID            string
	MemberID            string
	RecordComment       string
	RecordCreatedAt     string
	MediaFileID         string
	RecordLocationY     string
	RecordLocationX     string
	RecordIsOpen        string
	RecordShareTo       string
	RecordShareAccepted string
}{
	RecordID:            "record_id",
	MemberID:            "member_id",
	RecordComment:       "record_comment",
	RecordCreatedAt:     "record_created_at",
	MediaFileID:         "media_file_id",
	RecordLocationY:     "record_location_y",
	RecordLocationX:     "record_location_x",
	RecordIsOpen:        "record_is_open",
	RecordShareTo:       "record_share_to",
	RecordShareAccepted: "record_share_accepted",
}

var RecordTableColumns = struct {
	RecordID            string
	MemberID            string
	RecordComment       string
	RecordCreatedAt     string
	MediaFileID         string
	RecordLocationY     string
	RecordLocationX     string
	RecordIsOpen        string
	RecordShareTo       string
	RecordShareAccepted string
}{
	RecordID:            "record.record_id",
	MemberID:            "record.member_id",
	RecordComment:       "record.record_comment",
	RecordCreatedAt:     "record.record_created_at",
	MediaFileID:         "record.media_file_id",
	RecordLocationY:     "record.record_location_y",
	RecordLocationX:     "record.record_location_x",
	RecordIsOpen:        "record.record_is_open",
	RecordShareTo:       "record.record_share_to",
	RecordShareAccepted: "record.record_share_accepted",
}

// Generated where

type whereHelpernull_Float32 struct{ field string }

func (w whereHelpernull_Float32) EQ(x null.Float32) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Float32) NEQ(x null.Float32) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Float32) LT(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Float32) LTE(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Float32) GT(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Float32) GTE(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Float32) IN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Float32) NIN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Float32) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Float32) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var RecordWhere = struct {
	RecordID            whereHelperint
	MemberID            whereHelperstring
	RecordComment       whereHelpernull_String
	RecordCreatedAt     whereHelpertime_Time
	MediaFileID         whereHelpernull_String
	RecordLocationY     whereHelpernull_Float32
	RecordLocationX     whereHelpernull_Float32
	RecordIsOpen        whereHelperbool
	RecordShareTo       whereHelpernull_String
	RecordShareAccepted whereHelpernull_Bool
}{
	RecordID:            whereHelperint{field: "`record`.`record_id`"},
	MemberID:            whereHelperstring{field: "`record`.`member_id`"},
	RecordComment:       whereHelpernull_String{field: "`record`.`record_comment`"},
	RecordCreatedAt:     whereHelpertime_Time{field: "`record`.`record_created_at`"},
	MediaFileID:         whereHelpernull_String{field: "`record`.`media_file_id`"},
	RecordLocationY:     whereHelpernull_Float32{field: "`record`.`record_location_y`"},
	RecordLocationX:     whereHelpernull_Float32{field: "`record`.`record_location_x`"},
	RecordIsOpen:        whereHelperbool{field: "`record`.`record_is_open`"},
	RecordShareTo:       whereHelpernull_String{field: "`record`.`record_share_to`"},
	RecordShareAccepted: whereHelpernull_Bool{field: "`record`.`record_share_accepted`"},
}

// RecordRels is where relationship names are stored.
var RecordRels = struct {
	Member                             string
	MediaFile                          string
	MediaFileMediaFileBlockedHistories string
	MediaFileMediaFileRecheckRequests  string
	RecordKeywords                     string
	Replies                            string
}{
	Member:                             "Member",
	MediaFile:                          "MediaFile",
	MediaFileMediaFileBlockedHistories: "MediaFileMediaFileBlockedHistories",
	MediaFileMediaFileRecheckRequests:  "MediaFileMediaFileRecheckRequests",
	RecordKeywords:                     "RecordKeywords",
	Replies:                            "Replies",
}

// recordR is where relationships are stored.
type recordR struct {
	Member                             *Member                      `boil:"Member" json:"Member" toml:"Member" yaml:"Member"`
	MediaFile                          *MediaFile                   `boil:"MediaFile" json:"MediaFile" toml:"MediaFile" yaml:"MediaFile"`
	MediaFileMediaFileBlockedHistories MediaFileBlockedHistorySlice `boil:"MediaFileMediaFileBlockedHistories" json:"MediaFileMediaFileBlockedHistories" toml:"MediaFileMediaFileBlockedHistories" yaml:"MediaFileMediaFileBlockedHistories"`
	MediaFileMediaFileRecheckRequests  MediaFileRecheckRequestSlice `boil:"MediaFileMediaFileRecheckRequests" json:"MediaFileMediaFileRecheckRequests" toml:"MediaFileMediaFileRecheckRequests" yaml:"MediaFileMediaFileRecheckRequests"`
	RecordKeywords                     RecordKeywordSlice           `boil:"RecordKeywords" json:"RecordKeywords" toml:"RecordKeywords" yaml:"RecordKeywords"`
	Replies                            ReplySlice                   `boil:"Replies" json:"Replies" toml:"Replies" yaml:"Replies"`
}

// NewStruct creates a new relationship struct
func (*recordR) NewStruct() *recordR {
	return &recordR{}
}

func (r *recordR) GetMember() *Member {
	if r == nil {
		return nil
	}
	return r.Member
}

func (r *recordR) GetMediaFile() *MediaFile {
	if r == nil {
		return nil
	}
	return r.MediaFile
}

func (r *recordR) GetMediaFileMediaFileBlockedHistories() MediaFileBlockedHistorySlice {
	if r == nil {
		return nil
	}
	return r.MediaFileMediaFileBlockedHistories
}

func (r *recordR) GetMediaFileMediaFileRecheckRequests() MediaFileRecheckRequestSlice {
	if r == nil {
		return nil
	}
	return r.MediaFileMediaFileRecheckRequests
}

func (r *recordR) GetRecordKeywords() RecordKeywordSlice {
	if r == nil {
		return nil
	}
	return r.RecordKeywords
}

func (r *recordR) GetReplies() ReplySlice {
	if r == nil {
		return nil
	}
	return r.Replies
}

// recordL is where Load methods for each relationship are stored.
type recordL struct{}

var (
	recordAllColumns            = []string{"record_id", "member_id", "record_comment", "record_created_at", "media_file_id", "record_location_y", "record_location_x", "record_is_open", "record_share_to", "record_share_accepted"}
	recordColumnsWithoutDefault = []string{"member_id", "record_comment", "media_file_id", "record_location_y", "record_location_x", "record_is_open", "record_share_to", "record_share_accepted"}
	recordColumnsWithDefault    = []string{"record_id", "record_created_at"}
	recordPrimaryKeyColumns     = []string{"record_id"}
	recordGeneratedColumns      = []string{}
)

type (
	// RecordSlice is an alias for a slice of pointers to Record.
	// This should almost always be used instead of []Record.
	RecordSlice []*Record
	// RecordHook is the signature for custom Record hook methods
	RecordHook func(context.Context, boil.ContextExecutor, *Record) error

	recordQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	recordType                 = reflect.TypeOf(&Record{})
	recordMapping              = queries.MakeStructMapping(recordType)
	recordPrimaryKeyMapping, _ = queries.BindMapping(recordType, recordMapping, recordPrimaryKeyColumns)
	recordInsertCacheMut       sync.RWMutex
	recordInsertCache          = make(map[string]insertCache)
	recordUpdateCacheMut       sync.RWMutex
	recordUpdateCache          = make(map[string]updateCache)
	recordUpsertCacheMut       sync.RWMutex
	recordUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var recordAfterSelectMu sync.Mutex
var recordAfterSelectHooks []RecordHook

var recordBeforeInsertMu sync.Mutex
var recordBeforeInsertHooks []RecordHook
var recordAfterInsertMu sync.Mutex
var recordAfterInsertHooks []RecordHook

var recordBeforeUpdateMu sync.Mutex
var recordBeforeUpdateHooks []RecordHook
var recordAfterUpdateMu sync.Mutex
var recordAfterUpdateHooks []RecordHook

var recordBeforeDeleteMu sync.Mutex
var recordBeforeDeleteHooks []RecordHook
var recordAfterDeleteMu sync.Mutex
var recordAfterDeleteHooks []RecordHook

var recordBeforeUpsertMu sync.Mutex
var recordBeforeUpsertHooks []RecordHook
var recordAfterUpsertMu sync.Mutex
var recordAfterUpsertHooks []RecordHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Record) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recordAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Record) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recordBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Record) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recordAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Record) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recordBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Record) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recordAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Record) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recordBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Record) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recordAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Record) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recordBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Record) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recordAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRecordHook registers your hook function for all future operations.
func AddRecordHook(hookPoint boil.HookPoint, recordHook RecordHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		recordAfterSelectMu.Lock()
		recordAfterSelectHooks = append(recordAfterSelectHooks, recordHook)
		recordAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		recordBeforeInsertMu.Lock()
		recordBeforeInsertHooks = append(recordBeforeInsertHooks, recordHook)
		recordBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		recordAfterInsertMu.Lock()
		recordAfterInsertHooks = append(recordAfterInsertHooks, recordHook)
		recordAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		recordBeforeUpdateMu.Lock()
		recordBeforeUpdateHooks = append(recordBeforeUpdateHooks, recordHook)
		recordBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		recordAfterUpdateMu.Lock()
		recordAfterUpdateHooks = append(recordAfterUpdateHooks, recordHook)
		recordAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		recordBeforeDeleteMu.Lock()
		recordBeforeDeleteHooks = append(recordBeforeDeleteHooks, recordHook)
		recordBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		recordAfterDeleteMu.Lock()
		recordAfterDeleteHooks = append(recordAfterDeleteHooks, recordHook)
		recordAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		recordBeforeUpsertMu.Lock()
		recordBeforeUpsertHooks = append(recordBeforeUpsertHooks, recordHook)
		recordBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		recordAfterUpsertMu.Lock()
		recordAfterUpsertHooks = append(recordAfterUpsertHooks, recordHook)
		recordAfterUpsertMu.Unlock()
	}
}

// OneG returns a single record record from the query using the global executor.
func (q recordQuery) OneG(ctx context.Context) (*Record, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single record record from the query.
func (q recordQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Record, error) {
	o := &Record{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for record")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Record records from the query using the global executor.
func (q recordQuery) AllG(ctx context.Context) (RecordSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Record records from the query.
func (q recordQuery) All(ctx context.Context, exec boil.ContextExecutor) (RecordSlice, error) {
	var o []*Record

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Record slice")
	}

	if len(recordAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Record records in the query using the global executor
func (q recordQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Record records in the query.
func (q recordQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count record rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q recordQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q recordQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if record exists")
	}

	return count > 0, nil
}

// Member pointed to by the foreign key.
func (o *Record) Member(mods ...qm.QueryMod) memberQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`member_id` = ?", o.MemberID),
	}

	queryMods = append(queryMods, mods...)

	return Members(queryMods...)
}

// MediaFile pointed to by the foreign key.
func (o *Record) MediaFile(mods ...qm.QueryMod) mediaFileQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`media_file_id` = ?", o.MediaFileID),
	}

	queryMods = append(queryMods, mods...)

	return MediaFiles(queryMods...)
}

// MediaFileMediaFileBlockedHistories retrieves all the media_file_blocked_history's MediaFileBlockedHistories with an executor via media_file_id column.
func (o *Record) MediaFileMediaFileBlockedHistories(mods ...qm.QueryMod) mediaFileBlockedHistoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`media_file_blocked_history`.`media_file_id`=?", o.MediaFileID),
	)

	return MediaFileBlockedHistories(queryMods...)
}

// MediaFileMediaFileRecheckRequests retrieves all the media_file_recheck_request's MediaFileRecheckRequests with an executor via media_file_id column.
func (o *Record) MediaFileMediaFileRecheckRequests(mods ...qm.QueryMod) mediaFileRecheckRequestQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`media_file_recheck_request`.`media_file_id`=?", o.MediaFileID),
	)

	return MediaFileRecheckRequests(queryMods...)
}

// RecordKeywords retrieves all the record_keyword's RecordKeywords with an executor.
func (o *Record) RecordKeywords(mods ...qm.QueryMod) recordKeywordQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`record_keyword`.`record_id`=?", o.RecordID),
	)

	return RecordKeywords(queryMods...)
}

// Replies retrieves all the reply's Replies with an executor.
func (o *Record) Replies(mods ...qm.QueryMod) replyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`reply`.`record_id`=?", o.RecordID),
	)

	return Replies(queryMods...)
}

// LoadMember allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (recordL) LoadMember(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecord interface{}, mods queries.Applicator) error {
	var slice []*Record
	var object *Record

	if singular {
		var ok bool
		object, ok = maybeRecord.(*Record)
		if !ok {
			object = new(Record)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRecord)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRecord))
			}
		}
	} else {
		s, ok := maybeRecord.(*[]*Record)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRecord)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRecord))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &recordR{}
		}
		args[object.MemberID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recordR{}
			}

			args[obj.MemberID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`member`),
		qm.WhereIn(`member.member_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Member")
	}

	var resultSlice []*Member
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Member")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for member")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for member")
	}

	if len(memberAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Member = foreign
		if foreign.R == nil {
			foreign.R = &memberR{}
		}
		foreign.R.Records = append(foreign.R.Records, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MemberID == foreign.MemberID {
				local.R.Member = foreign
				if foreign.R == nil {
					foreign.R = &memberR{}
				}
				foreign.R.Records = append(foreign.R.Records, local)
				break
			}
		}
	}

	return nil
}

// LoadMediaFile allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (recordL) LoadMediaFile(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecord interface{}, mods queries.Applicator) error {
	var slice []*Record
	var object *Record

	if singular {
		var ok bool
		object, ok = maybeRecord.(*Record)
		if !ok {
			object = new(Record)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRecord)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRecord))
			}
		}
	} else {
		s, ok := maybeRecord.(*[]*Record)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRecord)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRecord))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &recordR{}
		}
		if !queries.IsNil(object.MediaFileID) {
			args[object.MediaFileID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recordR{}
			}

			if !queries.IsNil(obj.MediaFileID) {
				args[obj.MediaFileID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`media_file`),
		qm.WhereIn(`media_file.media_file_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MediaFile")
	}

	var resultSlice []*MediaFile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MediaFile")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for media_file")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for media_file")
	}

	if len(mediaFileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MediaFile = foreign
		if foreign.R == nil {
			foreign.R = &mediaFileR{}
		}
		foreign.R.Records = append(foreign.R.Records, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.MediaFileID, foreign.MediaFileID) {
				local.R.MediaFile = foreign
				if foreign.R == nil {
					foreign.R = &mediaFileR{}
				}
				foreign.R.Records = append(foreign.R.Records, local)
				break
			}
		}
	}

	return nil
}

// LoadMediaFileMediaFileBlockedHistories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (recordL) LoadMediaFileMediaFileBlockedHistories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecord interface{}, mods queries.Applicator) error {
	var slice []*Record
	var object *Record

	if singular {
		var ok bool
		object, ok = maybeRecord.(*Record)
		if !ok {
			object = new(Record)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRecord)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRecord))
			}
		}
	} else {
		s, ok := maybeRecord.(*[]*Record)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRecord)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRecord))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &recordR{}
		}
		args[object.MediaFileID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recordR{}
			}
			args[obj.MediaFileID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`media_file_blocked_history`),
		qm.WhereIn(`media_file_blocked_history.media_file_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load media_file_blocked_history")
	}

	var resultSlice []*MediaFileBlockedHistory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice media_file_blocked_history")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on media_file_blocked_history")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for media_file_blocked_history")
	}

	if len(mediaFileBlockedHistoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MediaFileMediaFileBlockedHistories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &mediaFileBlockedHistoryR{}
			}
			foreign.R.MediaFile = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.MediaFileID, foreign.MediaFileID) {
				local.R.MediaFileMediaFileBlockedHistories = append(local.R.MediaFileMediaFileBlockedHistories, foreign)
				if foreign.R == nil {
					foreign.R = &mediaFileBlockedHistoryR{}
				}
				foreign.R.MediaFile = local
				break
			}
		}
	}

	return nil
}

// LoadMediaFileMediaFileRecheckRequests allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (recordL) LoadMediaFileMediaFileRecheckRequests(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecord interface{}, mods queries.Applicator) error {
	var slice []*Record
	var object *Record

	if singular {
		var ok bool
		object, ok = maybeRecord.(*Record)
		if !ok {
			object = new(Record)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRecord)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRecord))
			}
		}
	} else {
		s, ok := maybeRecord.(*[]*Record)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRecord)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRecord))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &recordR{}
		}
		args[object.MediaFileID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recordR{}
			}
			args[obj.MediaFileID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`media_file_recheck_request`),
		qm.WhereIn(`media_file_recheck_request.media_file_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load media_file_recheck_request")
	}

	var resultSlice []*MediaFileRecheckRequest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice media_file_recheck_request")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on media_file_recheck_request")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for media_file_recheck_request")
	}

	if len(mediaFileRecheckRequestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MediaFileMediaFileRecheckRequests = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &mediaFileRecheckRequestR{}
			}
			foreign.R.MediaFile = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.MediaFileID, foreign.MediaFileID) {
				local.R.MediaFileMediaFileRecheckRequests = append(local.R.MediaFileMediaFileRecheckRequests, foreign)
				if foreign.R == nil {
					foreign.R = &mediaFileRecheckRequestR{}
				}
				foreign.R.MediaFile = local
				break
			}
		}
	}

	return nil
}

// LoadRecordKeywords allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (recordL) LoadRecordKeywords(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecord interface{}, mods queries.Applicator) error {
	var slice []*Record
	var object *Record

	if singular {
		var ok bool
		object, ok = maybeRecord.(*Record)
		if !ok {
			object = new(Record)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRecord)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRecord))
			}
		}
	} else {
		s, ok := maybeRecord.(*[]*Record)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRecord)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRecord))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &recordR{}
		}
		args[object.RecordID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recordR{}
			}
			args[obj.RecordID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`record_keyword`),
		qm.WhereIn(`record_keyword.record_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load record_keyword")
	}

	var resultSlice []*RecordKeyword
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice record_keyword")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on record_keyword")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for record_keyword")
	}

	if len(recordKeywordAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RecordKeywords = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &recordKeywordR{}
			}
			foreign.R.Record = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.RecordID == foreign.RecordID {
				local.R.RecordKeywords = append(local.R.RecordKeywords, foreign)
				if foreign.R == nil {
					foreign.R = &recordKeywordR{}
				}
				foreign.R.Record = local
				break
			}
		}
	}

	return nil
}

// LoadReplies allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (recordL) LoadReplies(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecord interface{}, mods queries.Applicator) error {
	var slice []*Record
	var object *Record

	if singular {
		var ok bool
		object, ok = maybeRecord.(*Record)
		if !ok {
			object = new(Record)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRecord)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRecord))
			}
		}
	} else {
		s, ok := maybeRecord.(*[]*Record)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRecord)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRecord))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &recordR{}
		}
		args[object.RecordID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recordR{}
			}
			args[obj.RecordID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`reply`),
		qm.WhereIn(`reply.record_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load reply")
	}

	var resultSlice []*Reply
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice reply")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on reply")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for reply")
	}

	if len(replyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Replies = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &replyR{}
			}
			foreign.R.Record = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.RecordID == foreign.RecordID {
				local.R.Replies = append(local.R.Replies, foreign)
				if foreign.R == nil {
					foreign.R = &replyR{}
				}
				foreign.R.Record = local
				break
			}
		}
	}

	return nil
}

// SetMemberG of the record to the related item.
// Sets o.R.Member to related.
// Adds o to related.R.Records.
// Uses the global database handle.
func (o *Record) SetMemberG(ctx context.Context, insert bool, related *Member) error {
	return o.SetMember(ctx, boil.GetContextDB(), insert, related)
}

// SetMember of the record to the related item.
// Sets o.R.Member to related.
// Adds o to related.R.Records.
func (o *Record) SetMember(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Member) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `record` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"member_id"}),
		strmangle.WhereClause("`", "`", 0, recordPrimaryKeyColumns),
	)
	values := []interface{}{related.MemberID, o.RecordID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MemberID = related.MemberID
	if o.R == nil {
		o.R = &recordR{
			Member: related,
		}
	} else {
		o.R.Member = related
	}

	if related.R == nil {
		related.R = &memberR{
			Records: RecordSlice{o},
		}
	} else {
		related.R.Records = append(related.R.Records, o)
	}

	return nil
}

// SetMediaFileG of the record to the related item.
// Sets o.R.MediaFile to related.
// Adds o to related.R.Records.
// Uses the global database handle.
func (o *Record) SetMediaFileG(ctx context.Context, insert bool, related *MediaFile) error {
	return o.SetMediaFile(ctx, boil.GetContextDB(), insert, related)
}

// SetMediaFile of the record to the related item.
// Sets o.R.MediaFile to related.
// Adds o to related.R.Records.
func (o *Record) SetMediaFile(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MediaFile) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `record` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"media_file_id"}),
		strmangle.WhereClause("`", "`", 0, recordPrimaryKeyColumns),
	)
	values := []interface{}{related.MediaFileID, o.RecordID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.MediaFileID, related.MediaFileID)
	if o.R == nil {
		o.R = &recordR{
			MediaFile: related,
		}
	} else {
		o.R.MediaFile = related
	}

	if related.R == nil {
		related.R = &mediaFileR{
			Records: RecordSlice{o},
		}
	} else {
		related.R.Records = append(related.R.Records, o)
	}

	return nil
}

// RemoveMediaFileG relationship.
// Sets o.R.MediaFile to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *Record) RemoveMediaFileG(ctx context.Context, related *MediaFile) error {
	return o.RemoveMediaFile(ctx, boil.GetContextDB(), related)
}

// RemoveMediaFile relationship.
// Sets o.R.MediaFile to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Record) RemoveMediaFile(ctx context.Context, exec boil.ContextExecutor, related *MediaFile) error {
	var err error

	queries.SetScanner(&o.MediaFileID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("media_file_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.MediaFile = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Records {
		if queries.Equal(o.MediaFileID, ri.MediaFileID) {
			continue
		}

		ln := len(related.R.Records)
		if ln > 1 && i < ln-1 {
			related.R.Records[i] = related.R.Records[ln-1]
		}
		related.R.Records = related.R.Records[:ln-1]
		break
	}
	return nil
}

// AddMediaFileMediaFileBlockedHistoriesG adds the given related objects to the existing relationships
// of the record, optionally inserting them as new records.
// Appends related to o.R.MediaFileMediaFileBlockedHistories.
// Sets related.R.MediaFile appropriately.
// Uses the global database handle.
func (o *Record) AddMediaFileMediaFileBlockedHistoriesG(ctx context.Context, insert bool, related ...*MediaFileBlockedHistory) error {
	return o.AddMediaFileMediaFileBlockedHistories(ctx, boil.GetContextDB(), insert, related...)
}

// AddMediaFileMediaFileBlockedHistories adds the given related objects to the existing relationships
// of the record, optionally inserting them as new records.
// Appends related to o.R.MediaFileMediaFileBlockedHistories.
// Sets related.R.MediaFile appropriately.
func (o *Record) AddMediaFileMediaFileBlockedHistories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MediaFileBlockedHistory) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.MediaFileID, o.MediaFileID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `media_file_blocked_history` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"media_file_id"}),
				strmangle.WhereClause("`", "`", 0, mediaFileBlockedHistoryPrimaryKeyColumns),
			)
			values := []interface{}{o.MediaFileID, rel.MediaFileBlockedHistoryID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.MediaFileID, o.MediaFileID)
		}
	}

	if o.R == nil {
		o.R = &recordR{
			MediaFileMediaFileBlockedHistories: related,
		}
	} else {
		o.R.MediaFileMediaFileBlockedHistories = append(o.R.MediaFileMediaFileBlockedHistories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mediaFileBlockedHistoryR{
				MediaFile: o,
			}
		} else {
			rel.R.MediaFile = o
		}
	}
	return nil
}

// AddMediaFileMediaFileRecheckRequestsG adds the given related objects to the existing relationships
// of the record, optionally inserting them as new records.
// Appends related to o.R.MediaFileMediaFileRecheckRequests.
// Sets related.R.MediaFile appropriately.
// Uses the global database handle.
func (o *Record) AddMediaFileMediaFileRecheckRequestsG(ctx context.Context, insert bool, related ...*MediaFileRecheckRequest) error {
	return o.AddMediaFileMediaFileRecheckRequests(ctx, boil.GetContextDB(), insert, related...)
}

// AddMediaFileMediaFileRecheckRequests adds the given related objects to the existing relationships
// of the record, optionally inserting them as new records.
// Appends related to o.R.MediaFileMediaFileRecheckRequests.
// Sets related.R.MediaFile appropriately.
func (o *Record) AddMediaFileMediaFileRecheckRequests(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MediaFileRecheckRequest) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.MediaFileID, o.MediaFileID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `media_file_recheck_request` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"media_file_id"}),
				strmangle.WhereClause("`", "`", 0, mediaFileRecheckRequestPrimaryKeyColumns),
			)
			values := []interface{}{o.MediaFileID, rel.MediaFileRecheckRequestID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.MediaFileID, o.MediaFileID)
		}
	}

	if o.R == nil {
		o.R = &recordR{
			MediaFileMediaFileRecheckRequests: related,
		}
	} else {
		o.R.MediaFileMediaFileRecheckRequests = append(o.R.MediaFileMediaFileRecheckRequests, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mediaFileRecheckRequestR{
				MediaFile: o,
			}
		} else {
			rel.R.MediaFile = o
		}
	}
	return nil
}

// AddRecordKeywordsG adds the given related objects to the existing relationships
// of the record, optionally inserting them as new records.
// Appends related to o.R.RecordKeywords.
// Sets related.R.Record appropriately.
// Uses the global database handle.
func (o *Record) AddRecordKeywordsG(ctx context.Context, insert bool, related ...*RecordKeyword) error {
	return o.AddRecordKeywords(ctx, boil.GetContextDB(), insert, related...)
}

// AddRecordKeywords adds the given related objects to the existing relationships
// of the record, optionally inserting them as new records.
// Appends related to o.R.RecordKeywords.
// Sets related.R.Record appropriately.
func (o *Record) AddRecordKeywords(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RecordKeyword) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RecordID = o.RecordID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `record_keyword` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"record_id"}),
				strmangle.WhereClause("`", "`", 0, recordKeywordPrimaryKeyColumns),
			)
			values := []interface{}{o.RecordID, rel.RecordKeywordID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RecordID = o.RecordID
		}
	}

	if o.R == nil {
		o.R = &recordR{
			RecordKeywords: related,
		}
	} else {
		o.R.RecordKeywords = append(o.R.RecordKeywords, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &recordKeywordR{
				Record: o,
			}
		} else {
			rel.R.Record = o
		}
	}
	return nil
}

// AddRepliesG adds the given related objects to the existing relationships
// of the record, optionally inserting them as new records.
// Appends related to o.R.Replies.
// Sets related.R.Record appropriately.
// Uses the global database handle.
func (o *Record) AddRepliesG(ctx context.Context, insert bool, related ...*Reply) error {
	return o.AddReplies(ctx, boil.GetContextDB(), insert, related...)
}

// AddReplies adds the given related objects to the existing relationships
// of the record, optionally inserting them as new records.
// Appends related to o.R.Replies.
// Sets related.R.Record appropriately.
func (o *Record) AddReplies(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Reply) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RecordID = o.RecordID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `reply` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"record_id"}),
				strmangle.WhereClause("`", "`", 0, replyPrimaryKeyColumns),
			)
			values := []interface{}{o.RecordID, rel.ReplyID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RecordID = o.RecordID
		}
	}

	if o.R == nil {
		o.R = &recordR{
			Replies: related,
		}
	} else {
		o.R.Replies = append(o.R.Replies, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &replyR{
				Record: o,
			}
		} else {
			rel.R.Record = o
		}
	}
	return nil
}

// Records retrieves all the records using an executor.
func Records(mods ...qm.QueryMod) recordQuery {
	mods = append(mods, qm.From("`record`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`record`.*"})
	}

	return recordQuery{q}
}

// FindRecordG retrieves a single record by ID.
func FindRecordG(ctx context.Context, recordID int, selectCols ...string) (*Record, error) {
	return FindRecord(ctx, boil.GetContextDB(), recordID, selectCols...)
}

// FindRecord retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRecord(ctx context.Context, exec boil.ContextExecutor, recordID int, selectCols ...string) (*Record, error) {
	recordObj := &Record{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `record` where `record_id`=?", sel,
	)

	q := queries.Raw(query, recordID)

	err := q.Bind(ctx, exec, recordObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from record")
	}

	if err = recordObj.doAfterSelectHooks(ctx, exec); err != nil {
		return recordObj, err
	}

	return recordObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Record) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Record) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no record provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(recordColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	recordInsertCacheMut.RLock()
	cache, cached := recordInsertCache[key]
	recordInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			recordAllColumns,
			recordColumnsWithDefault,
			recordColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(recordType, recordMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(recordType, recordMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `record` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `record` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `record` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, recordPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into record")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.RecordID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == recordMapping["record_id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.RecordID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for record")
	}

CacheNoHooks:
	if !cached {
		recordInsertCacheMut.Lock()
		recordInsertCache[key] = cache
		recordInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Record record using the global executor.
// See Update for more documentation.
func (o *Record) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Record.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Record) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	recordUpdateCacheMut.RLock()
	cache, cached := recordUpdateCache[key]
	recordUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			recordAllColumns,
			recordPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update record, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `record` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, recordPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(recordType, recordMapping, append(wl, recordPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update record row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for record")
	}

	if !cached {
		recordUpdateCacheMut.Lock()
		recordUpdateCache[key] = cache
		recordUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q recordQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q recordQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for record")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for record")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o RecordSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RecordSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `record` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, recordPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in record slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all record")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Record) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLRecordUniqueColumns = []string{
	"record_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Record) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no record provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(recordColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLRecordUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	recordUpsertCacheMut.RLock()
	cache, cached := recordUpsertCache[key]
	recordUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			recordAllColumns,
			recordColumnsWithDefault,
			recordColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			recordAllColumns,
			recordPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert record, could not build update column list")
		}

		ret := strmangle.SetComplement(recordAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`record`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `record` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(recordType, recordMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(recordType, recordMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for record")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.RecordID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == recordMapping["record_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(recordType, recordMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for record")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for record")
	}

CacheNoHooks:
	if !cached {
		recordUpsertCacheMut.Lock()
		recordUpsertCache[key] = cache
		recordUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Record record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Record) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Record record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Record) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Record provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), recordPrimaryKeyMapping)
	sql := "DELETE FROM `record` WHERE `record_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from record")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for record")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q recordQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q recordQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no recordQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from record")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for record")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o RecordSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RecordSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(recordBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `record` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, recordPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from record slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for record")
	}

	if len(recordAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Record) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Record provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Record) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRecord(ctx, exec, o.RecordID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RecordSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty RecordSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RecordSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RecordSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `record`.* FROM `record` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, recordPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RecordSlice")
	}

	*o = slice

	return nil
}

// RecordExistsG checks if the Record row exists.
func RecordExistsG(ctx context.Context, recordID int) (bool, error) {
	return RecordExists(ctx, boil.GetContextDB(), recordID)
}

// RecordExists checks if the Record row exists.
func RecordExists(ctx context.Context, exec boil.ContextExecutor, recordID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `record` where `record_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, recordID)
	}
	row := exec.QueryRowContext(ctx, sql, recordID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if record exists")
	}

	return exists, nil
}

// Exists checks if the Record row exists.
func (o *Record) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RecordExists(ctx, exec, o.RecordID)
}
