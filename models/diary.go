// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Diary is an object representing the database table.
type Diary struct {
	DiaryID     int    `boil:"diary_id" json:"diary_id" toml:"diary_id" yaml:"diary_id"`
	MemberID    string `boil:"member_id" json:"member_id" toml:"member_id" yaml:"member_id"`
	DiaryYear   string `boil:"diary_year" json:"diary_year" toml:"diary_year" yaml:"diary_year"`
	DiaryMonth  string `boil:"diary_month" json:"diary_month" toml:"diary_month" yaml:"diary_month"`
	MainColor   string `boil:"main_color" json:"main_color" toml:"main_color" yaml:"main_color"`
	MainKeyword string `boil:"main_keyword" json:"main_keyword" toml:"main_keyword" yaml:"main_keyword"`

	R *diaryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L diaryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DiaryColumns = struct {
	DiaryID     string
	MemberID    string
	DiaryYear   string
	DiaryMonth  string
	MainColor   string
	MainKeyword string
}{
	DiaryID:     "diary_id",
	MemberID:    "member_id",
	DiaryYear:   "diary_year",
	DiaryMonth:  "diary_month",
	MainColor:   "main_color",
	MainKeyword: "main_keyword",
}

var DiaryTableColumns = struct {
	DiaryID     string
	MemberID    string
	DiaryYear   string
	DiaryMonth  string
	MainColor   string
	MainKeyword string
}{
	DiaryID:     "diary.diary_id",
	MemberID:    "diary.member_id",
	DiaryYear:   "diary.diary_year",
	DiaryMonth:  "diary.diary_month",
	MainColor:   "diary.main_color",
	MainKeyword: "diary.main_keyword",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod  { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var DiaryWhere = struct {
	DiaryID     whereHelperint
	MemberID    whereHelperstring
	DiaryYear   whereHelperstring
	DiaryMonth  whereHelperstring
	MainColor   whereHelperstring
	MainKeyword whereHelperstring
}{
	DiaryID:     whereHelperint{field: "`diary`.`diary_id`"},
	MemberID:    whereHelperstring{field: "`diary`.`member_id`"},
	DiaryYear:   whereHelperstring{field: "`diary`.`diary_year`"},
	DiaryMonth:  whereHelperstring{field: "`diary`.`diary_month`"},
	MainColor:   whereHelperstring{field: "`diary`.`main_color`"},
	MainKeyword: whereHelperstring{field: "`diary`.`main_keyword`"},
}

// DiaryRels is where relationship names are stored.
var DiaryRels = struct {
	Member        string
	DiaryColors   string
	DiaryKeywords string
}{
	Member:        "Member",
	DiaryColors:   "DiaryColors",
	DiaryKeywords: "DiaryKeywords",
}

// diaryR is where relationships are stored.
type diaryR struct {
	Member        *Member           `boil:"Member" json:"Member" toml:"Member" yaml:"Member"`
	DiaryColors   DiaryColorSlice   `boil:"DiaryColors" json:"DiaryColors" toml:"DiaryColors" yaml:"DiaryColors"`
	DiaryKeywords DiaryKeywordSlice `boil:"DiaryKeywords" json:"DiaryKeywords" toml:"DiaryKeywords" yaml:"DiaryKeywords"`
}

// NewStruct creates a new relationship struct
func (*diaryR) NewStruct() *diaryR {
	return &diaryR{}
}

func (r *diaryR) GetMember() *Member {
	if r == nil {
		return nil
	}
	return r.Member
}

func (r *diaryR) GetDiaryColors() DiaryColorSlice {
	if r == nil {
		return nil
	}
	return r.DiaryColors
}

func (r *diaryR) GetDiaryKeywords() DiaryKeywordSlice {
	if r == nil {
		return nil
	}
	return r.DiaryKeywords
}

// diaryL is where Load methods for each relationship are stored.
type diaryL struct{}

var (
	diaryAllColumns            = []string{"diary_id", "member_id", "diary_year", "diary_month", "main_color", "main_keyword"}
	diaryColumnsWithoutDefault = []string{"member_id", "diary_year", "diary_month", "main_color", "main_keyword"}
	diaryColumnsWithDefault    = []string{"diary_id"}
	diaryPrimaryKeyColumns     = []string{"diary_id"}
	diaryGeneratedColumns      = []string{}
)

type (
	// DiarySlice is an alias for a slice of pointers to Diary.
	// This should almost always be used instead of []Diary.
	DiarySlice []*Diary
	// DiaryHook is the signature for custom Diary hook methods
	DiaryHook func(context.Context, boil.ContextExecutor, *Diary) error

	diaryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	diaryType                 = reflect.TypeOf(&Diary{})
	diaryMapping              = queries.MakeStructMapping(diaryType)
	diaryPrimaryKeyMapping, _ = queries.BindMapping(diaryType, diaryMapping, diaryPrimaryKeyColumns)
	diaryInsertCacheMut       sync.RWMutex
	diaryInsertCache          = make(map[string]insertCache)
	diaryUpdateCacheMut       sync.RWMutex
	diaryUpdateCache          = make(map[string]updateCache)
	diaryUpsertCacheMut       sync.RWMutex
	diaryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var diaryAfterSelectMu sync.Mutex
var diaryAfterSelectHooks []DiaryHook

var diaryBeforeInsertMu sync.Mutex
var diaryBeforeInsertHooks []DiaryHook
var diaryAfterInsertMu sync.Mutex
var diaryAfterInsertHooks []DiaryHook

var diaryBeforeUpdateMu sync.Mutex
var diaryBeforeUpdateHooks []DiaryHook
var diaryAfterUpdateMu sync.Mutex
var diaryAfterUpdateHooks []DiaryHook

var diaryBeforeDeleteMu sync.Mutex
var diaryBeforeDeleteHooks []DiaryHook
var diaryAfterDeleteMu sync.Mutex
var diaryAfterDeleteHooks []DiaryHook

var diaryBeforeUpsertMu sync.Mutex
var diaryBeforeUpsertHooks []DiaryHook
var diaryAfterUpsertMu sync.Mutex
var diaryAfterUpsertHooks []DiaryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Diary) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range diaryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Diary) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range diaryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Diary) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range diaryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Diary) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range diaryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Diary) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range diaryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Diary) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range diaryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Diary) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range diaryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Diary) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range diaryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Diary) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range diaryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDiaryHook registers your hook function for all future operations.
func AddDiaryHook(hookPoint boil.HookPoint, diaryHook DiaryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		diaryAfterSelectMu.Lock()
		diaryAfterSelectHooks = append(diaryAfterSelectHooks, diaryHook)
		diaryAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		diaryBeforeInsertMu.Lock()
		diaryBeforeInsertHooks = append(diaryBeforeInsertHooks, diaryHook)
		diaryBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		diaryAfterInsertMu.Lock()
		diaryAfterInsertHooks = append(diaryAfterInsertHooks, diaryHook)
		diaryAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		diaryBeforeUpdateMu.Lock()
		diaryBeforeUpdateHooks = append(diaryBeforeUpdateHooks, diaryHook)
		diaryBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		diaryAfterUpdateMu.Lock()
		diaryAfterUpdateHooks = append(diaryAfterUpdateHooks, diaryHook)
		diaryAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		diaryBeforeDeleteMu.Lock()
		diaryBeforeDeleteHooks = append(diaryBeforeDeleteHooks, diaryHook)
		diaryBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		diaryAfterDeleteMu.Lock()
		diaryAfterDeleteHooks = append(diaryAfterDeleteHooks, diaryHook)
		diaryAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		diaryBeforeUpsertMu.Lock()
		diaryBeforeUpsertHooks = append(diaryBeforeUpsertHooks, diaryHook)
		diaryBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		diaryAfterUpsertMu.Lock()
		diaryAfterUpsertHooks = append(diaryAfterUpsertHooks, diaryHook)
		diaryAfterUpsertMu.Unlock()
	}
}

// OneG returns a single diary record from the query using the global executor.
func (q diaryQuery) OneG(ctx context.Context) (*Diary, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single diary record from the query.
func (q diaryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Diary, error) {
	o := &Diary{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for diary")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Diary records from the query using the global executor.
func (q diaryQuery) AllG(ctx context.Context) (DiarySlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Diary records from the query.
func (q diaryQuery) All(ctx context.Context, exec boil.ContextExecutor) (DiarySlice, error) {
	var o []*Diary

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Diary slice")
	}

	if len(diaryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Diary records in the query using the global executor
func (q diaryQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Diary records in the query.
func (q diaryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count diary rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q diaryQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q diaryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if diary exists")
	}

	return count > 0, nil
}

// Member pointed to by the foreign key.
func (o *Diary) Member(mods ...qm.QueryMod) memberQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`member_id` = ?", o.MemberID),
	}

	queryMods = append(queryMods, mods...)

	return Members(queryMods...)
}

// DiaryColors retrieves all the diary_color's DiaryColors with an executor.
func (o *Diary) DiaryColors(mods ...qm.QueryMod) diaryColorQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`diary_color`.`diary_id`=?", o.DiaryID),
	)

	return DiaryColors(queryMods...)
}

// DiaryKeywords retrieves all the diary_keyword's DiaryKeywords with an executor.
func (o *Diary) DiaryKeywords(mods ...qm.QueryMod) diaryKeywordQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`diary_keyword`.`diary_id`=?", o.DiaryID),
	)

	return DiaryKeywords(queryMods...)
}

// LoadMember allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (diaryL) LoadMember(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDiary interface{}, mods queries.Applicator) error {
	var slice []*Diary
	var object *Diary

	if singular {
		var ok bool
		object, ok = maybeDiary.(*Diary)
		if !ok {
			object = new(Diary)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDiary)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDiary))
			}
		}
	} else {
		s, ok := maybeDiary.(*[]*Diary)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDiary)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDiary))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &diaryR{}
		}
		args[object.MemberID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &diaryR{}
			}

			args[obj.MemberID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`member`),
		qm.WhereIn(`member.member_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Member")
	}

	var resultSlice []*Member
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Member")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for member")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for member")
	}

	if len(memberAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Member = foreign
		if foreign.R == nil {
			foreign.R = &memberR{}
		}
		foreign.R.Diaries = append(foreign.R.Diaries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MemberID == foreign.MemberID {
				local.R.Member = foreign
				if foreign.R == nil {
					foreign.R = &memberR{}
				}
				foreign.R.Diaries = append(foreign.R.Diaries, local)
				break
			}
		}
	}

	return nil
}

// LoadDiaryColors allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (diaryL) LoadDiaryColors(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDiary interface{}, mods queries.Applicator) error {
	var slice []*Diary
	var object *Diary

	if singular {
		var ok bool
		object, ok = maybeDiary.(*Diary)
		if !ok {
			object = new(Diary)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDiary)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDiary))
			}
		}
	} else {
		s, ok := maybeDiary.(*[]*Diary)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDiary)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDiary))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &diaryR{}
		}
		args[object.DiaryID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &diaryR{}
			}
			args[obj.DiaryID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`diary_color`),
		qm.WhereIn(`diary_color.diary_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load diary_color")
	}

	var resultSlice []*DiaryColor
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice diary_color")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on diary_color")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for diary_color")
	}

	if len(diaryColorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DiaryColors = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &diaryColorR{}
			}
			foreign.R.Diary = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.DiaryID == foreign.DiaryID {
				local.R.DiaryColors = append(local.R.DiaryColors, foreign)
				if foreign.R == nil {
					foreign.R = &diaryColorR{}
				}
				foreign.R.Diary = local
				break
			}
		}
	}

	return nil
}

// LoadDiaryKeywords allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (diaryL) LoadDiaryKeywords(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDiary interface{}, mods queries.Applicator) error {
	var slice []*Diary
	var object *Diary

	if singular {
		var ok bool
		object, ok = maybeDiary.(*Diary)
		if !ok {
			object = new(Diary)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDiary)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDiary))
			}
		}
	} else {
		s, ok := maybeDiary.(*[]*Diary)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDiary)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDiary))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &diaryR{}
		}
		args[object.DiaryID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &diaryR{}
			}
			args[obj.DiaryID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`diary_keyword`),
		qm.WhereIn(`diary_keyword.diary_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load diary_keyword")
	}

	var resultSlice []*DiaryKeyword
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice diary_keyword")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on diary_keyword")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for diary_keyword")
	}

	if len(diaryKeywordAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DiaryKeywords = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &diaryKeywordR{}
			}
			foreign.R.Diary = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.DiaryID == foreign.DiaryID {
				local.R.DiaryKeywords = append(local.R.DiaryKeywords, foreign)
				if foreign.R == nil {
					foreign.R = &diaryKeywordR{}
				}
				foreign.R.Diary = local
				break
			}
		}
	}

	return nil
}

// SetMemberG of the diary to the related item.
// Sets o.R.Member to related.
// Adds o to related.R.Diaries.
// Uses the global database handle.
func (o *Diary) SetMemberG(ctx context.Context, insert bool, related *Member) error {
	return o.SetMember(ctx, boil.GetContextDB(), insert, related)
}

// SetMember of the diary to the related item.
// Sets o.R.Member to related.
// Adds o to related.R.Diaries.
func (o *Diary) SetMember(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Member) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `diary` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"member_id"}),
		strmangle.WhereClause("`", "`", 0, diaryPrimaryKeyColumns),
	)
	values := []interface{}{related.MemberID, o.DiaryID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MemberID = related.MemberID
	if o.R == nil {
		o.R = &diaryR{
			Member: related,
		}
	} else {
		o.R.Member = related
	}

	if related.R == nil {
		related.R = &memberR{
			Diaries: DiarySlice{o},
		}
	} else {
		related.R.Diaries = append(related.R.Diaries, o)
	}

	return nil
}

// AddDiaryColorsG adds the given related objects to the existing relationships
// of the diary, optionally inserting them as new records.
// Appends related to o.R.DiaryColors.
// Sets related.R.Diary appropriately.
// Uses the global database handle.
func (o *Diary) AddDiaryColorsG(ctx context.Context, insert bool, related ...*DiaryColor) error {
	return o.AddDiaryColors(ctx, boil.GetContextDB(), insert, related...)
}

// AddDiaryColors adds the given related objects to the existing relationships
// of the diary, optionally inserting them as new records.
// Appends related to o.R.DiaryColors.
// Sets related.R.Diary appropriately.
func (o *Diary) AddDiaryColors(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DiaryColor) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DiaryID = o.DiaryID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `diary_color` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"diary_id"}),
				strmangle.WhereClause("`", "`", 0, diaryColorPrimaryKeyColumns),
			)
			values := []interface{}{o.DiaryID, rel.DiaryColorID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DiaryID = o.DiaryID
		}
	}

	if o.R == nil {
		o.R = &diaryR{
			DiaryColors: related,
		}
	} else {
		o.R.DiaryColors = append(o.R.DiaryColors, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &diaryColorR{
				Diary: o,
			}
		} else {
			rel.R.Diary = o
		}
	}
	return nil
}

// AddDiaryKeywordsG adds the given related objects to the existing relationships
// of the diary, optionally inserting them as new records.
// Appends related to o.R.DiaryKeywords.
// Sets related.R.Diary appropriately.
// Uses the global database handle.
func (o *Diary) AddDiaryKeywordsG(ctx context.Context, insert bool, related ...*DiaryKeyword) error {
	return o.AddDiaryKeywords(ctx, boil.GetContextDB(), insert, related...)
}

// AddDiaryKeywords adds the given related objects to the existing relationships
// of the diary, optionally inserting them as new records.
// Appends related to o.R.DiaryKeywords.
// Sets related.R.Diary appropriately.
func (o *Diary) AddDiaryKeywords(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DiaryKeyword) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DiaryID = o.DiaryID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `diary_keyword` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"diary_id"}),
				strmangle.WhereClause("`", "`", 0, diaryKeywordPrimaryKeyColumns),
			)
			values := []interface{}{o.DiaryID, rel.DiaryKeywordID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DiaryID = o.DiaryID
		}
	}

	if o.R == nil {
		o.R = &diaryR{
			DiaryKeywords: related,
		}
	} else {
		o.R.DiaryKeywords = append(o.R.DiaryKeywords, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &diaryKeywordR{
				Diary: o,
			}
		} else {
			rel.R.Diary = o
		}
	}
	return nil
}

// Diaries retrieves all the records using an executor.
func Diaries(mods ...qm.QueryMod) diaryQuery {
	mods = append(mods, qm.From("`diary`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`diary`.*"})
	}

	return diaryQuery{q}
}

// FindDiaryG retrieves a single record by ID.
func FindDiaryG(ctx context.Context, diaryID int, selectCols ...string) (*Diary, error) {
	return FindDiary(ctx, boil.GetContextDB(), diaryID, selectCols...)
}

// FindDiary retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDiary(ctx context.Context, exec boil.ContextExecutor, diaryID int, selectCols ...string) (*Diary, error) {
	diaryObj := &Diary{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `diary` where `diary_id`=?", sel,
	)

	q := queries.Raw(query, diaryID)

	err := q.Bind(ctx, exec, diaryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from diary")
	}

	if err = diaryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return diaryObj, err
	}

	return diaryObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Diary) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Diary) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no diary provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(diaryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	diaryInsertCacheMut.RLock()
	cache, cached := diaryInsertCache[key]
	diaryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			diaryAllColumns,
			diaryColumnsWithDefault,
			diaryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(diaryType, diaryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(diaryType, diaryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `diary` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `diary` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `diary` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, diaryPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into diary")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.DiaryID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == diaryMapping["diary_id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.DiaryID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for diary")
	}

CacheNoHooks:
	if !cached {
		diaryInsertCacheMut.Lock()
		diaryInsertCache[key] = cache
		diaryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Diary record using the global executor.
// See Update for more documentation.
func (o *Diary) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Diary.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Diary) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	diaryUpdateCacheMut.RLock()
	cache, cached := diaryUpdateCache[key]
	diaryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			diaryAllColumns,
			diaryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update diary, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `diary` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, diaryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(diaryType, diaryMapping, append(wl, diaryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update diary row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for diary")
	}

	if !cached {
		diaryUpdateCacheMut.Lock()
		diaryUpdateCache[key] = cache
		diaryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q diaryQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q diaryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for diary")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for diary")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o DiarySlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DiarySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), diaryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `diary` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, diaryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in diary slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all diary")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Diary) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLDiaryUniqueColumns = []string{
	"diary_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Diary) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no diary provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(diaryColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDiaryUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	diaryUpsertCacheMut.RLock()
	cache, cached := diaryUpsertCache[key]
	diaryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			diaryAllColumns,
			diaryColumnsWithDefault,
			diaryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			diaryAllColumns,
			diaryPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert diary, could not build update column list")
		}

		ret := strmangle.SetComplement(diaryAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`diary`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `diary` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(diaryType, diaryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(diaryType, diaryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for diary")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.DiaryID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == diaryMapping["diary_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(diaryType, diaryMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for diary")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for diary")
	}

CacheNoHooks:
	if !cached {
		diaryUpsertCacheMut.Lock()
		diaryUpsertCache[key] = cache
		diaryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Diary record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Diary) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Diary record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Diary) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Diary provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), diaryPrimaryKeyMapping)
	sql := "DELETE FROM `diary` WHERE `diary_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from diary")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for diary")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q diaryQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q diaryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no diaryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from diary")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for diary")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o DiarySlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DiarySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(diaryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), diaryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `diary` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, diaryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from diary slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for diary")
	}

	if len(diaryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Diary) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Diary provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Diary) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDiary(ctx, exec, o.DiaryID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DiarySlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty DiarySlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DiarySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DiarySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), diaryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `diary`.* FROM `diary` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, diaryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DiarySlice")
	}

	*o = slice

	return nil
}

// DiaryExistsG checks if the Diary row exists.
func DiaryExistsG(ctx context.Context, diaryID int) (bool, error) {
	return DiaryExists(ctx, boil.GetContextDB(), diaryID)
}

// DiaryExists checks if the Diary row exists.
func DiaryExists(ctx context.Context, exec boil.ContextExecutor, diaryID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `diary` where `diary_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, diaryID)
	}
	row := exec.QueryRowContext(ctx, sql, diaryID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if diary exists")
	}

	return exists, nil
}

// Exists checks if the Diary row exists.
func (o *Diary) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DiaryExists(ctx, exec, o.DiaryID)
}
