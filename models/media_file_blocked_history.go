// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MediaFileBlockedHistory is an object representing the database table.
type MediaFileBlockedHistory struct {
	MediaFileBlockedHistoryID int       `boil:"media_file_blocked_history_id" json:"media_file_blocked_history_id" toml:"media_file_blocked_history_id" yaml:"media_file_blocked_history_id"`
	MediaFileID               string    `boil:"media_file_id" json:"media_file_id" toml:"media_file_id" yaml:"media_file_id"`
	MediaFileDetectedLabel    string    `boil:"media_file_detected_label" json:"media_file_detected_label" toml:"media_file_detected_label" yaml:"media_file_detected_label"`
	MediaFileDetectedWeights  float32   `boil:"media_file_detected_weights" json:"media_file_detected_weights" toml:"media_file_detected_weights" yaml:"media_file_detected_weights"`
	MediaFileCheckedAt        time.Time `boil:"media_file_checked_at" json:"media_file_checked_at" toml:"media_file_checked_at" yaml:"media_file_checked_at"`

	R *mediaFileBlockedHistoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L mediaFileBlockedHistoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MediaFileBlockedHistoryColumns = struct {
	MediaFileBlockedHistoryID string
	MediaFileID               string
	MediaFileDetectedLabel    string
	MediaFileDetectedWeights  string
	MediaFileCheckedAt        string
}{
	MediaFileBlockedHistoryID: "media_file_blocked_history_id",
	MediaFileID:               "media_file_id",
	MediaFileDetectedLabel:    "media_file_detected_label",
	MediaFileDetectedWeights:  "media_file_detected_weights",
	MediaFileCheckedAt:        "media_file_checked_at",
}

var MediaFileBlockedHistoryTableColumns = struct {
	MediaFileBlockedHistoryID string
	MediaFileID               string
	MediaFileDetectedLabel    string
	MediaFileDetectedWeights  string
	MediaFileCheckedAt        string
}{
	MediaFileBlockedHistoryID: "media_file_blocked_history.media_file_blocked_history_id",
	MediaFileID:               "media_file_blocked_history.media_file_id",
	MediaFileDetectedLabel:    "media_file_blocked_history.media_file_detected_label",
	MediaFileDetectedWeights:  "media_file_blocked_history.media_file_detected_weights",
	MediaFileCheckedAt:        "media_file_blocked_history.media_file_checked_at",
}

// Generated where

type whereHelperfloat32 struct{ field string }

func (w whereHelperfloat32) EQ(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat32) NEQ(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat32) LT(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat32) LTE(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat32) GT(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat32) GTE(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat32) IN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat32) NIN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var MediaFileBlockedHistoryWhere = struct {
	MediaFileBlockedHistoryID whereHelperint
	MediaFileID               whereHelperstring
	MediaFileDetectedLabel    whereHelperstring
	MediaFileDetectedWeights  whereHelperfloat32
	MediaFileCheckedAt        whereHelpertime_Time
}{
	MediaFileBlockedHistoryID: whereHelperint{field: "`media_file_blocked_history`.`media_file_blocked_history_id`"},
	MediaFileID:               whereHelperstring{field: "`media_file_blocked_history`.`media_file_id`"},
	MediaFileDetectedLabel:    whereHelperstring{field: "`media_file_blocked_history`.`media_file_detected_label`"},
	MediaFileDetectedWeights:  whereHelperfloat32{field: "`media_file_blocked_history`.`media_file_detected_weights`"},
	MediaFileCheckedAt:        whereHelpertime_Time{field: "`media_file_blocked_history`.`media_file_checked_at`"},
}

// MediaFileBlockedHistoryRels is where relationship names are stored.
var MediaFileBlockedHistoryRels = struct {
	MediaFile string
}{
	MediaFile: "MediaFile",
}

// mediaFileBlockedHistoryR is where relationships are stored.
type mediaFileBlockedHistoryR struct {
	MediaFile *Record `boil:"MediaFile" json:"MediaFile" toml:"MediaFile" yaml:"MediaFile"`
}

// NewStruct creates a new relationship struct
func (*mediaFileBlockedHistoryR) NewStruct() *mediaFileBlockedHistoryR {
	return &mediaFileBlockedHistoryR{}
}

func (r *mediaFileBlockedHistoryR) GetMediaFile() *Record {
	if r == nil {
		return nil
	}
	return r.MediaFile
}

// mediaFileBlockedHistoryL is where Load methods for each relationship are stored.
type mediaFileBlockedHistoryL struct{}

var (
	mediaFileBlockedHistoryAllColumns            = []string{"media_file_blocked_history_id", "media_file_id", "media_file_detected_label", "media_file_detected_weights", "media_file_checked_at"}
	mediaFileBlockedHistoryColumnsWithoutDefault = []string{"media_file_id", "media_file_detected_label", "media_file_detected_weights"}
	mediaFileBlockedHistoryColumnsWithDefault    = []string{"media_file_blocked_history_id", "media_file_checked_at"}
	mediaFileBlockedHistoryPrimaryKeyColumns     = []string{"media_file_blocked_history_id"}
	mediaFileBlockedHistoryGeneratedColumns      = []string{}
)

type (
	// MediaFileBlockedHistorySlice is an alias for a slice of pointers to MediaFileBlockedHistory.
	// This should almost always be used instead of []MediaFileBlockedHistory.
	MediaFileBlockedHistorySlice []*MediaFileBlockedHistory
	// MediaFileBlockedHistoryHook is the signature for custom MediaFileBlockedHistory hook methods
	MediaFileBlockedHistoryHook func(context.Context, boil.ContextExecutor, *MediaFileBlockedHistory) error

	mediaFileBlockedHistoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mediaFileBlockedHistoryType                 = reflect.TypeOf(&MediaFileBlockedHistory{})
	mediaFileBlockedHistoryMapping              = queries.MakeStructMapping(mediaFileBlockedHistoryType)
	mediaFileBlockedHistoryPrimaryKeyMapping, _ = queries.BindMapping(mediaFileBlockedHistoryType, mediaFileBlockedHistoryMapping, mediaFileBlockedHistoryPrimaryKeyColumns)
	mediaFileBlockedHistoryInsertCacheMut       sync.RWMutex
	mediaFileBlockedHistoryInsertCache          = make(map[string]insertCache)
	mediaFileBlockedHistoryUpdateCacheMut       sync.RWMutex
	mediaFileBlockedHistoryUpdateCache          = make(map[string]updateCache)
	mediaFileBlockedHistoryUpsertCacheMut       sync.RWMutex
	mediaFileBlockedHistoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mediaFileBlockedHistoryAfterSelectMu sync.Mutex
var mediaFileBlockedHistoryAfterSelectHooks []MediaFileBlockedHistoryHook

var mediaFileBlockedHistoryBeforeInsertMu sync.Mutex
var mediaFileBlockedHistoryBeforeInsertHooks []MediaFileBlockedHistoryHook
var mediaFileBlockedHistoryAfterInsertMu sync.Mutex
var mediaFileBlockedHistoryAfterInsertHooks []MediaFileBlockedHistoryHook

var mediaFileBlockedHistoryBeforeUpdateMu sync.Mutex
var mediaFileBlockedHistoryBeforeUpdateHooks []MediaFileBlockedHistoryHook
var mediaFileBlockedHistoryAfterUpdateMu sync.Mutex
var mediaFileBlockedHistoryAfterUpdateHooks []MediaFileBlockedHistoryHook

var mediaFileBlockedHistoryBeforeDeleteMu sync.Mutex
var mediaFileBlockedHistoryBeforeDeleteHooks []MediaFileBlockedHistoryHook
var mediaFileBlockedHistoryAfterDeleteMu sync.Mutex
var mediaFileBlockedHistoryAfterDeleteHooks []MediaFileBlockedHistoryHook

var mediaFileBlockedHistoryBeforeUpsertMu sync.Mutex
var mediaFileBlockedHistoryBeforeUpsertHooks []MediaFileBlockedHistoryHook
var mediaFileBlockedHistoryAfterUpsertMu sync.Mutex
var mediaFileBlockedHistoryAfterUpsertHooks []MediaFileBlockedHistoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MediaFileBlockedHistory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaFileBlockedHistoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MediaFileBlockedHistory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaFileBlockedHistoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MediaFileBlockedHistory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaFileBlockedHistoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MediaFileBlockedHistory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaFileBlockedHistoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MediaFileBlockedHistory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaFileBlockedHistoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MediaFileBlockedHistory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaFileBlockedHistoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MediaFileBlockedHistory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaFileBlockedHistoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MediaFileBlockedHistory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaFileBlockedHistoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MediaFileBlockedHistory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaFileBlockedHistoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMediaFileBlockedHistoryHook registers your hook function for all future operations.
func AddMediaFileBlockedHistoryHook(hookPoint boil.HookPoint, mediaFileBlockedHistoryHook MediaFileBlockedHistoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		mediaFileBlockedHistoryAfterSelectMu.Lock()
		mediaFileBlockedHistoryAfterSelectHooks = append(mediaFileBlockedHistoryAfterSelectHooks, mediaFileBlockedHistoryHook)
		mediaFileBlockedHistoryAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		mediaFileBlockedHistoryBeforeInsertMu.Lock()
		mediaFileBlockedHistoryBeforeInsertHooks = append(mediaFileBlockedHistoryBeforeInsertHooks, mediaFileBlockedHistoryHook)
		mediaFileBlockedHistoryBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		mediaFileBlockedHistoryAfterInsertMu.Lock()
		mediaFileBlockedHistoryAfterInsertHooks = append(mediaFileBlockedHistoryAfterInsertHooks, mediaFileBlockedHistoryHook)
		mediaFileBlockedHistoryAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		mediaFileBlockedHistoryBeforeUpdateMu.Lock()
		mediaFileBlockedHistoryBeforeUpdateHooks = append(mediaFileBlockedHistoryBeforeUpdateHooks, mediaFileBlockedHistoryHook)
		mediaFileBlockedHistoryBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		mediaFileBlockedHistoryAfterUpdateMu.Lock()
		mediaFileBlockedHistoryAfterUpdateHooks = append(mediaFileBlockedHistoryAfterUpdateHooks, mediaFileBlockedHistoryHook)
		mediaFileBlockedHistoryAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		mediaFileBlockedHistoryBeforeDeleteMu.Lock()
		mediaFileBlockedHistoryBeforeDeleteHooks = append(mediaFileBlockedHistoryBeforeDeleteHooks, mediaFileBlockedHistoryHook)
		mediaFileBlockedHistoryBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		mediaFileBlockedHistoryAfterDeleteMu.Lock()
		mediaFileBlockedHistoryAfterDeleteHooks = append(mediaFileBlockedHistoryAfterDeleteHooks, mediaFileBlockedHistoryHook)
		mediaFileBlockedHistoryAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		mediaFileBlockedHistoryBeforeUpsertMu.Lock()
		mediaFileBlockedHistoryBeforeUpsertHooks = append(mediaFileBlockedHistoryBeforeUpsertHooks, mediaFileBlockedHistoryHook)
		mediaFileBlockedHistoryBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		mediaFileBlockedHistoryAfterUpsertMu.Lock()
		mediaFileBlockedHistoryAfterUpsertHooks = append(mediaFileBlockedHistoryAfterUpsertHooks, mediaFileBlockedHistoryHook)
		mediaFileBlockedHistoryAfterUpsertMu.Unlock()
	}
}

// OneG returns a single mediaFileBlockedHistory record from the query using the global executor.
func (q mediaFileBlockedHistoryQuery) OneG(ctx context.Context) (*MediaFileBlockedHistory, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single mediaFileBlockedHistory record from the query.
func (q mediaFileBlockedHistoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MediaFileBlockedHistory, error) {
	o := &MediaFileBlockedHistory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for media_file_blocked_history")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all MediaFileBlockedHistory records from the query using the global executor.
func (q mediaFileBlockedHistoryQuery) AllG(ctx context.Context) (MediaFileBlockedHistorySlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all MediaFileBlockedHistory records from the query.
func (q mediaFileBlockedHistoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (MediaFileBlockedHistorySlice, error) {
	var o []*MediaFileBlockedHistory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MediaFileBlockedHistory slice")
	}

	if len(mediaFileBlockedHistoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all MediaFileBlockedHistory records in the query using the global executor
func (q mediaFileBlockedHistoryQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all MediaFileBlockedHistory records in the query.
func (q mediaFileBlockedHistoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count media_file_blocked_history rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q mediaFileBlockedHistoryQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q mediaFileBlockedHistoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if media_file_blocked_history exists")
	}

	return count > 0, nil
}

// MediaFile pointed to by the foreign key.
func (o *MediaFileBlockedHistory) MediaFile(mods ...qm.QueryMod) recordQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`media_file_id` = ?", o.MediaFileID),
	}

	queryMods = append(queryMods, mods...)

	return Records(queryMods...)
}

// LoadMediaFile allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mediaFileBlockedHistoryL) LoadMediaFile(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMediaFileBlockedHistory interface{}, mods queries.Applicator) error {
	var slice []*MediaFileBlockedHistory
	var object *MediaFileBlockedHistory

	if singular {
		var ok bool
		object, ok = maybeMediaFileBlockedHistory.(*MediaFileBlockedHistory)
		if !ok {
			object = new(MediaFileBlockedHistory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMediaFileBlockedHistory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMediaFileBlockedHistory))
			}
		}
	} else {
		s, ok := maybeMediaFileBlockedHistory.(*[]*MediaFileBlockedHistory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMediaFileBlockedHistory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMediaFileBlockedHistory))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &mediaFileBlockedHistoryR{}
		}
		if !queries.IsNil(object.MediaFileID) {
			args[object.MediaFileID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mediaFileBlockedHistoryR{}
			}

			if !queries.IsNil(obj.MediaFileID) {
				args[obj.MediaFileID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`record`),
		qm.WhereIn(`record.media_file_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Record")
	}

	var resultSlice []*Record
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Record")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for record")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for record")
	}

	if len(recordAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MediaFile = foreign
		if foreign.R == nil {
			foreign.R = &recordR{}
		}
		foreign.R.MediaFileMediaFileBlockedHistories = append(foreign.R.MediaFileMediaFileBlockedHistories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.MediaFileID, foreign.MediaFileID) {
				local.R.MediaFile = foreign
				if foreign.R == nil {
					foreign.R = &recordR{}
				}
				foreign.R.MediaFileMediaFileBlockedHistories = append(foreign.R.MediaFileMediaFileBlockedHistories, local)
				break
			}
		}
	}

	return nil
}

// SetMediaFileG of the mediaFileBlockedHistory to the related item.
// Sets o.R.MediaFile to related.
// Adds o to related.R.MediaFileMediaFileBlockedHistories.
// Uses the global database handle.
func (o *MediaFileBlockedHistory) SetMediaFileG(ctx context.Context, insert bool, related *Record) error {
	return o.SetMediaFile(ctx, boil.GetContextDB(), insert, related)
}

// SetMediaFile of the mediaFileBlockedHistory to the related item.
// Sets o.R.MediaFile to related.
// Adds o to related.R.MediaFileMediaFileBlockedHistories.
func (o *MediaFileBlockedHistory) SetMediaFile(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Record) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `media_file_blocked_history` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"media_file_id"}),
		strmangle.WhereClause("`", "`", 0, mediaFileBlockedHistoryPrimaryKeyColumns),
	)
	values := []interface{}{related.MediaFileID, o.MediaFileBlockedHistoryID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.MediaFileID, related.MediaFileID)
	if o.R == nil {
		o.R = &mediaFileBlockedHistoryR{
			MediaFile: related,
		}
	} else {
		o.R.MediaFile = related
	}

	if related.R == nil {
		related.R = &recordR{
			MediaFileMediaFileBlockedHistories: MediaFileBlockedHistorySlice{o},
		}
	} else {
		related.R.MediaFileMediaFileBlockedHistories = append(related.R.MediaFileMediaFileBlockedHistories, o)
	}

	return nil
}

// MediaFileBlockedHistories retrieves all the records using an executor.
func MediaFileBlockedHistories(mods ...qm.QueryMod) mediaFileBlockedHistoryQuery {
	mods = append(mods, qm.From("`media_file_blocked_history`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`media_file_blocked_history`.*"})
	}

	return mediaFileBlockedHistoryQuery{q}
}

// FindMediaFileBlockedHistoryG retrieves a single record by ID.
func FindMediaFileBlockedHistoryG(ctx context.Context, mediaFileBlockedHistoryID int, selectCols ...string) (*MediaFileBlockedHistory, error) {
	return FindMediaFileBlockedHistory(ctx, boil.GetContextDB(), mediaFileBlockedHistoryID, selectCols...)
}

// FindMediaFileBlockedHistory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMediaFileBlockedHistory(ctx context.Context, exec boil.ContextExecutor, mediaFileBlockedHistoryID int, selectCols ...string) (*MediaFileBlockedHistory, error) {
	mediaFileBlockedHistoryObj := &MediaFileBlockedHistory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `media_file_blocked_history` where `media_file_blocked_history_id`=?", sel,
	)

	q := queries.Raw(query, mediaFileBlockedHistoryID)

	err := q.Bind(ctx, exec, mediaFileBlockedHistoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from media_file_blocked_history")
	}

	if err = mediaFileBlockedHistoryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return mediaFileBlockedHistoryObj, err
	}

	return mediaFileBlockedHistoryObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *MediaFileBlockedHistory) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MediaFileBlockedHistory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no media_file_blocked_history provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mediaFileBlockedHistoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mediaFileBlockedHistoryInsertCacheMut.RLock()
	cache, cached := mediaFileBlockedHistoryInsertCache[key]
	mediaFileBlockedHistoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mediaFileBlockedHistoryAllColumns,
			mediaFileBlockedHistoryColumnsWithDefault,
			mediaFileBlockedHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mediaFileBlockedHistoryType, mediaFileBlockedHistoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mediaFileBlockedHistoryType, mediaFileBlockedHistoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `media_file_blocked_history` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `media_file_blocked_history` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `media_file_blocked_history` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, mediaFileBlockedHistoryPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into media_file_blocked_history")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.MediaFileBlockedHistoryID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == mediaFileBlockedHistoryMapping["media_file_blocked_history_id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.MediaFileBlockedHistoryID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for media_file_blocked_history")
	}

CacheNoHooks:
	if !cached {
		mediaFileBlockedHistoryInsertCacheMut.Lock()
		mediaFileBlockedHistoryInsertCache[key] = cache
		mediaFileBlockedHistoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single MediaFileBlockedHistory record using the global executor.
// See Update for more documentation.
func (o *MediaFileBlockedHistory) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the MediaFileBlockedHistory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MediaFileBlockedHistory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mediaFileBlockedHistoryUpdateCacheMut.RLock()
	cache, cached := mediaFileBlockedHistoryUpdateCache[key]
	mediaFileBlockedHistoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mediaFileBlockedHistoryAllColumns,
			mediaFileBlockedHistoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update media_file_blocked_history, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `media_file_blocked_history` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, mediaFileBlockedHistoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mediaFileBlockedHistoryType, mediaFileBlockedHistoryMapping, append(wl, mediaFileBlockedHistoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update media_file_blocked_history row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for media_file_blocked_history")
	}

	if !cached {
		mediaFileBlockedHistoryUpdateCacheMut.Lock()
		mediaFileBlockedHistoryUpdateCache[key] = cache
		mediaFileBlockedHistoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q mediaFileBlockedHistoryQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q mediaFileBlockedHistoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for media_file_blocked_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for media_file_blocked_history")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o MediaFileBlockedHistorySlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MediaFileBlockedHistorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mediaFileBlockedHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `media_file_blocked_history` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mediaFileBlockedHistoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in mediaFileBlockedHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all mediaFileBlockedHistory")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *MediaFileBlockedHistory) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLMediaFileBlockedHistoryUniqueColumns = []string{
	"media_file_blocked_history_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MediaFileBlockedHistory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no media_file_blocked_history provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mediaFileBlockedHistoryColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLMediaFileBlockedHistoryUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mediaFileBlockedHistoryUpsertCacheMut.RLock()
	cache, cached := mediaFileBlockedHistoryUpsertCache[key]
	mediaFileBlockedHistoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			mediaFileBlockedHistoryAllColumns,
			mediaFileBlockedHistoryColumnsWithDefault,
			mediaFileBlockedHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			mediaFileBlockedHistoryAllColumns,
			mediaFileBlockedHistoryPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert media_file_blocked_history, could not build update column list")
		}

		ret := strmangle.SetComplement(mediaFileBlockedHistoryAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`media_file_blocked_history`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `media_file_blocked_history` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(mediaFileBlockedHistoryType, mediaFileBlockedHistoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mediaFileBlockedHistoryType, mediaFileBlockedHistoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for media_file_blocked_history")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.MediaFileBlockedHistoryID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == mediaFileBlockedHistoryMapping["media_file_blocked_history_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(mediaFileBlockedHistoryType, mediaFileBlockedHistoryMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for media_file_blocked_history")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for media_file_blocked_history")
	}

CacheNoHooks:
	if !cached {
		mediaFileBlockedHistoryUpsertCacheMut.Lock()
		mediaFileBlockedHistoryUpsertCache[key] = cache
		mediaFileBlockedHistoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single MediaFileBlockedHistory record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *MediaFileBlockedHistory) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single MediaFileBlockedHistory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MediaFileBlockedHistory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MediaFileBlockedHistory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mediaFileBlockedHistoryPrimaryKeyMapping)
	sql := "DELETE FROM `media_file_blocked_history` WHERE `media_file_blocked_history_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from media_file_blocked_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for media_file_blocked_history")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q mediaFileBlockedHistoryQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q mediaFileBlockedHistoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no mediaFileBlockedHistoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from media_file_blocked_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for media_file_blocked_history")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o MediaFileBlockedHistorySlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MediaFileBlockedHistorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(mediaFileBlockedHistoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mediaFileBlockedHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `media_file_blocked_history` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mediaFileBlockedHistoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from mediaFileBlockedHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for media_file_blocked_history")
	}

	if len(mediaFileBlockedHistoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *MediaFileBlockedHistory) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no MediaFileBlockedHistory provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MediaFileBlockedHistory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMediaFileBlockedHistory(ctx, exec, o.MediaFileBlockedHistoryID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MediaFileBlockedHistorySlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty MediaFileBlockedHistorySlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MediaFileBlockedHistorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MediaFileBlockedHistorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mediaFileBlockedHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `media_file_blocked_history`.* FROM `media_file_blocked_history` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mediaFileBlockedHistoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MediaFileBlockedHistorySlice")
	}

	*o = slice

	return nil
}

// MediaFileBlockedHistoryExistsG checks if the MediaFileBlockedHistory row exists.
func MediaFileBlockedHistoryExistsG(ctx context.Context, mediaFileBlockedHistoryID int) (bool, error) {
	return MediaFileBlockedHistoryExists(ctx, boil.GetContextDB(), mediaFileBlockedHistoryID)
}

// MediaFileBlockedHistoryExists checks if the MediaFileBlockedHistory row exists.
func MediaFileBlockedHistoryExists(ctx context.Context, exec boil.ContextExecutor, mediaFileBlockedHistoryID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `media_file_blocked_history` where `media_file_blocked_history_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, mediaFileBlockedHistoryID)
	}
	row := exec.QueryRowContext(ctx, sql, mediaFileBlockedHistoryID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if media_file_blocked_history exists")
	}

	return exists, nil
}

// Exists checks if the MediaFileBlockedHistory row exists.
func (o *MediaFileBlockedHistory) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MediaFileBlockedHistoryExists(ctx, exec, o.MediaFileBlockedHistoryID)
}
