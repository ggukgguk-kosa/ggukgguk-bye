// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MemberVerify is an object representing the database table.
type MemberVerify struct {
	VerifyID        int       `boil:"verify_id" json:"verify_id" toml:"verify_id" yaml:"verify_id"`
	VerifyCreatedAt time.Time `boil:"verify_created_at" json:"verify_created_at" toml:"verify_created_at" yaml:"verify_created_at"`
	VerifyEmail     string    `boil:"verify_email" json:"verify_email" toml:"verify_email" yaml:"verify_email"`
	VerifyCode      string    `boil:"verify_code" json:"verify_code" toml:"verify_code" yaml:"verify_code"`

	R *memberVerifyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L memberVerifyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MemberVerifyColumns = struct {
	VerifyID        string
	VerifyCreatedAt string
	VerifyEmail     string
	VerifyCode      string
}{
	VerifyID:        "verify_id",
	VerifyCreatedAt: "verify_created_at",
	VerifyEmail:     "verify_email",
	VerifyCode:      "verify_code",
}

var MemberVerifyTableColumns = struct {
	VerifyID        string
	VerifyCreatedAt string
	VerifyEmail     string
	VerifyCode      string
}{
	VerifyID:        "member_verify.verify_id",
	VerifyCreatedAt: "member_verify.verify_created_at",
	VerifyEmail:     "member_verify.verify_email",
	VerifyCode:      "member_verify.verify_code",
}

// Generated where

var MemberVerifyWhere = struct {
	VerifyID        whereHelperint
	VerifyCreatedAt whereHelpertime_Time
	VerifyEmail     whereHelperstring
	VerifyCode      whereHelperstring
}{
	VerifyID:        whereHelperint{field: "`member_verify`.`verify_id`"},
	VerifyCreatedAt: whereHelpertime_Time{field: "`member_verify`.`verify_created_at`"},
	VerifyEmail:     whereHelperstring{field: "`member_verify`.`verify_email`"},
	VerifyCode:      whereHelperstring{field: "`member_verify`.`verify_code`"},
}

// MemberVerifyRels is where relationship names are stored.
var MemberVerifyRels = struct {
}{}

// memberVerifyR is where relationships are stored.
type memberVerifyR struct {
}

// NewStruct creates a new relationship struct
func (*memberVerifyR) NewStruct() *memberVerifyR {
	return &memberVerifyR{}
}

// memberVerifyL is where Load methods for each relationship are stored.
type memberVerifyL struct{}

var (
	memberVerifyAllColumns            = []string{"verify_id", "verify_created_at", "verify_email", "verify_code"}
	memberVerifyColumnsWithoutDefault = []string{"verify_email", "verify_code"}
	memberVerifyColumnsWithDefault    = []string{"verify_id", "verify_created_at"}
	memberVerifyPrimaryKeyColumns     = []string{"verify_id"}
	memberVerifyGeneratedColumns      = []string{}
)

type (
	// MemberVerifySlice is an alias for a slice of pointers to MemberVerify.
	// This should almost always be used instead of []MemberVerify.
	MemberVerifySlice []*MemberVerify
	// MemberVerifyHook is the signature for custom MemberVerify hook methods
	MemberVerifyHook func(context.Context, boil.ContextExecutor, *MemberVerify) error

	memberVerifyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	memberVerifyType                 = reflect.TypeOf(&MemberVerify{})
	memberVerifyMapping              = queries.MakeStructMapping(memberVerifyType)
	memberVerifyPrimaryKeyMapping, _ = queries.BindMapping(memberVerifyType, memberVerifyMapping, memberVerifyPrimaryKeyColumns)
	memberVerifyInsertCacheMut       sync.RWMutex
	memberVerifyInsertCache          = make(map[string]insertCache)
	memberVerifyUpdateCacheMut       sync.RWMutex
	memberVerifyUpdateCache          = make(map[string]updateCache)
	memberVerifyUpsertCacheMut       sync.RWMutex
	memberVerifyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var memberVerifyAfterSelectMu sync.Mutex
var memberVerifyAfterSelectHooks []MemberVerifyHook

var memberVerifyBeforeInsertMu sync.Mutex
var memberVerifyBeforeInsertHooks []MemberVerifyHook
var memberVerifyAfterInsertMu sync.Mutex
var memberVerifyAfterInsertHooks []MemberVerifyHook

var memberVerifyBeforeUpdateMu sync.Mutex
var memberVerifyBeforeUpdateHooks []MemberVerifyHook
var memberVerifyAfterUpdateMu sync.Mutex
var memberVerifyAfterUpdateHooks []MemberVerifyHook

var memberVerifyBeforeDeleteMu sync.Mutex
var memberVerifyBeforeDeleteHooks []MemberVerifyHook
var memberVerifyAfterDeleteMu sync.Mutex
var memberVerifyAfterDeleteHooks []MemberVerifyHook

var memberVerifyBeforeUpsertMu sync.Mutex
var memberVerifyBeforeUpsertHooks []MemberVerifyHook
var memberVerifyAfterUpsertMu sync.Mutex
var memberVerifyAfterUpsertHooks []MemberVerifyHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MemberVerify) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberVerifyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MemberVerify) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberVerifyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MemberVerify) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberVerifyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MemberVerify) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberVerifyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MemberVerify) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberVerifyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MemberVerify) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberVerifyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MemberVerify) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberVerifyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MemberVerify) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberVerifyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MemberVerify) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberVerifyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMemberVerifyHook registers your hook function for all future operations.
func AddMemberVerifyHook(hookPoint boil.HookPoint, memberVerifyHook MemberVerifyHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		memberVerifyAfterSelectMu.Lock()
		memberVerifyAfterSelectHooks = append(memberVerifyAfterSelectHooks, memberVerifyHook)
		memberVerifyAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		memberVerifyBeforeInsertMu.Lock()
		memberVerifyBeforeInsertHooks = append(memberVerifyBeforeInsertHooks, memberVerifyHook)
		memberVerifyBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		memberVerifyAfterInsertMu.Lock()
		memberVerifyAfterInsertHooks = append(memberVerifyAfterInsertHooks, memberVerifyHook)
		memberVerifyAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		memberVerifyBeforeUpdateMu.Lock()
		memberVerifyBeforeUpdateHooks = append(memberVerifyBeforeUpdateHooks, memberVerifyHook)
		memberVerifyBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		memberVerifyAfterUpdateMu.Lock()
		memberVerifyAfterUpdateHooks = append(memberVerifyAfterUpdateHooks, memberVerifyHook)
		memberVerifyAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		memberVerifyBeforeDeleteMu.Lock()
		memberVerifyBeforeDeleteHooks = append(memberVerifyBeforeDeleteHooks, memberVerifyHook)
		memberVerifyBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		memberVerifyAfterDeleteMu.Lock()
		memberVerifyAfterDeleteHooks = append(memberVerifyAfterDeleteHooks, memberVerifyHook)
		memberVerifyAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		memberVerifyBeforeUpsertMu.Lock()
		memberVerifyBeforeUpsertHooks = append(memberVerifyBeforeUpsertHooks, memberVerifyHook)
		memberVerifyBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		memberVerifyAfterUpsertMu.Lock()
		memberVerifyAfterUpsertHooks = append(memberVerifyAfterUpsertHooks, memberVerifyHook)
		memberVerifyAfterUpsertMu.Unlock()
	}
}

// OneG returns a single memberVerify record from the query using the global executor.
func (q memberVerifyQuery) OneG(ctx context.Context) (*MemberVerify, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single memberVerify record from the query.
func (q memberVerifyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MemberVerify, error) {
	o := &MemberVerify{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for member_verify")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all MemberVerify records from the query using the global executor.
func (q memberVerifyQuery) AllG(ctx context.Context) (MemberVerifySlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all MemberVerify records from the query.
func (q memberVerifyQuery) All(ctx context.Context, exec boil.ContextExecutor) (MemberVerifySlice, error) {
	var o []*MemberVerify

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MemberVerify slice")
	}

	if len(memberVerifyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all MemberVerify records in the query using the global executor
func (q memberVerifyQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all MemberVerify records in the query.
func (q memberVerifyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count member_verify rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q memberVerifyQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q memberVerifyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if member_verify exists")
	}

	return count > 0, nil
}

// MemberVerifies retrieves all the records using an executor.
func MemberVerifies(mods ...qm.QueryMod) memberVerifyQuery {
	mods = append(mods, qm.From("`member_verify`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`member_verify`.*"})
	}

	return memberVerifyQuery{q}
}

// FindMemberVerifyG retrieves a single record by ID.
func FindMemberVerifyG(ctx context.Context, verifyID int, selectCols ...string) (*MemberVerify, error) {
	return FindMemberVerify(ctx, boil.GetContextDB(), verifyID, selectCols...)
}

// FindMemberVerify retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMemberVerify(ctx context.Context, exec boil.ContextExecutor, verifyID int, selectCols ...string) (*MemberVerify, error) {
	memberVerifyObj := &MemberVerify{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `member_verify` where `verify_id`=?", sel,
	)

	q := queries.Raw(query, verifyID)

	err := q.Bind(ctx, exec, memberVerifyObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from member_verify")
	}

	if err = memberVerifyObj.doAfterSelectHooks(ctx, exec); err != nil {
		return memberVerifyObj, err
	}

	return memberVerifyObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *MemberVerify) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MemberVerify) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no member_verify provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(memberVerifyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	memberVerifyInsertCacheMut.RLock()
	cache, cached := memberVerifyInsertCache[key]
	memberVerifyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			memberVerifyAllColumns,
			memberVerifyColumnsWithDefault,
			memberVerifyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(memberVerifyType, memberVerifyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(memberVerifyType, memberVerifyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `member_verify` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `member_verify` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `member_verify` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, memberVerifyPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into member_verify")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.VerifyID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == memberVerifyMapping["verify_id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.VerifyID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for member_verify")
	}

CacheNoHooks:
	if !cached {
		memberVerifyInsertCacheMut.Lock()
		memberVerifyInsertCache[key] = cache
		memberVerifyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single MemberVerify record using the global executor.
// See Update for more documentation.
func (o *MemberVerify) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the MemberVerify.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MemberVerify) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	memberVerifyUpdateCacheMut.RLock()
	cache, cached := memberVerifyUpdateCache[key]
	memberVerifyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			memberVerifyAllColumns,
			memberVerifyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update member_verify, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `member_verify` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, memberVerifyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(memberVerifyType, memberVerifyMapping, append(wl, memberVerifyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update member_verify row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for member_verify")
	}

	if !cached {
		memberVerifyUpdateCacheMut.Lock()
		memberVerifyUpdateCache[key] = cache
		memberVerifyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q memberVerifyQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q memberVerifyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for member_verify")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for member_verify")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o MemberVerifySlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MemberVerifySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), memberVerifyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `member_verify` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, memberVerifyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in memberVerify slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all memberVerify")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *MemberVerify) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLMemberVerifyUniqueColumns = []string{
	"verify_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MemberVerify) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no member_verify provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(memberVerifyColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLMemberVerifyUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	memberVerifyUpsertCacheMut.RLock()
	cache, cached := memberVerifyUpsertCache[key]
	memberVerifyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			memberVerifyAllColumns,
			memberVerifyColumnsWithDefault,
			memberVerifyColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			memberVerifyAllColumns,
			memberVerifyPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert member_verify, could not build update column list")
		}

		ret := strmangle.SetComplement(memberVerifyAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`member_verify`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `member_verify` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(memberVerifyType, memberVerifyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(memberVerifyType, memberVerifyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for member_verify")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.VerifyID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == memberVerifyMapping["verify_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(memberVerifyType, memberVerifyMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for member_verify")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for member_verify")
	}

CacheNoHooks:
	if !cached {
		memberVerifyUpsertCacheMut.Lock()
		memberVerifyUpsertCache[key] = cache
		memberVerifyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single MemberVerify record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *MemberVerify) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single MemberVerify record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MemberVerify) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MemberVerify provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), memberVerifyPrimaryKeyMapping)
	sql := "DELETE FROM `member_verify` WHERE `verify_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from member_verify")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for member_verify")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q memberVerifyQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q memberVerifyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no memberVerifyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from member_verify")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for member_verify")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o MemberVerifySlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MemberVerifySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(memberVerifyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), memberVerifyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `member_verify` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, memberVerifyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from memberVerify slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for member_verify")
	}

	if len(memberVerifyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *MemberVerify) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no MemberVerify provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MemberVerify) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMemberVerify(ctx, exec, o.VerifyID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MemberVerifySlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty MemberVerifySlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MemberVerifySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MemberVerifySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), memberVerifyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `member_verify`.* FROM `member_verify` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, memberVerifyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MemberVerifySlice")
	}

	*o = slice

	return nil
}

// MemberVerifyExistsG checks if the MemberVerify row exists.
func MemberVerifyExistsG(ctx context.Context, verifyID int) (bool, error) {
	return MemberVerifyExists(ctx, boil.GetContextDB(), verifyID)
}

// MemberVerifyExists checks if the MemberVerify row exists.
func MemberVerifyExists(ctx context.Context, exec boil.ContextExecutor, verifyID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `member_verify` where `verify_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, verifyID)
	}
	row := exec.QueryRowContext(ctx, sql, verifyID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if member_verify exists")
	}

	return exists, nil
}

// Exists checks if the MemberVerify row exists.
func (o *MemberVerify) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MemberVerifyExists(ctx, exec, o.VerifyID)
}
