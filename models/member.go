// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Member is an object representing the database table.
type Member struct {
	MemberID        string      `boil:"member_id" json:"member_id" toml:"member_id" yaml:"member_id"`
	MemberPW        string      `boil:"member_pw" json:"member_pw" toml:"member_pw" yaml:"member_pw"`
	MemberName      string      `boil:"member_name" json:"member_name" toml:"member_name" yaml:"member_name"`
	MemberNickname  string      `boil:"member_nickname" json:"member_nickname" toml:"member_nickname" yaml:"member_nickname"`
	MemberEmail     null.String `boil:"member_email" json:"member_email,omitempty" toml:"member_email" yaml:"member_email,omitempty"`
	MemberPhone     string      `boil:"member_phone" json:"member_phone" toml:"member_phone" yaml:"member_phone"`
	MemberBirth     time.Time   `boil:"member_birth" json:"member_birth" toml:"member_birth" yaml:"member_birth"`
	MemberCreatedAt time.Time   `boil:"member_created_at" json:"member_created_at" toml:"member_created_at" yaml:"member_created_at"`
	// 탈퇴처리 시 아이디를 제외하고 공백 지정 후 본 컬럼 true 업데이트
	MemberActivated  bool        `boil:"member_activated" json:"member_activated" toml:"member_activated" yaml:"member_activated"`
	MemberAuthority  string      `boil:"member_authority" json:"member_authority" toml:"member_authority" yaml:"member_authority"`
	MemberSocial     null.String `boil:"member_social" json:"member_social,omitempty" toml:"member_social" yaml:"member_social,omitempty"`
	MemberAllowEmail bool        `boil:"member_allow_email" json:"member_allow_email" toml:"member_allow_email" yaml:"member_allow_email"`

	R *memberR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L memberL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MemberColumns = struct {
	MemberID         string
	MemberPW         string
	MemberName       string
	MemberNickname   string
	MemberEmail      string
	MemberPhone      string
	MemberBirth      string
	MemberCreatedAt  string
	MemberActivated  string
	MemberAuthority  string
	MemberSocial     string
	MemberAllowEmail string
}{
	MemberID:         "member_id",
	MemberPW:         "member_pw",
	MemberName:       "member_name",
	MemberNickname:   "member_nickname",
	MemberEmail:      "member_email",
	MemberPhone:      "member_phone",
	MemberBirth:      "member_birth",
	MemberCreatedAt:  "member_created_at",
	MemberActivated:  "member_activated",
	MemberAuthority:  "member_authority",
	MemberSocial:     "member_social",
	MemberAllowEmail: "member_allow_email",
}

var MemberTableColumns = struct {
	MemberID         string
	MemberPW         string
	MemberName       string
	MemberNickname   string
	MemberEmail      string
	MemberPhone      string
	MemberBirth      string
	MemberCreatedAt  string
	MemberActivated  string
	MemberAuthority  string
	MemberSocial     string
	MemberAllowEmail string
}{
	MemberID:         "member.member_id",
	MemberPW:         "member.member_pw",
	MemberName:       "member.member_name",
	MemberNickname:   "member.member_nickname",
	MemberEmail:      "member.member_email",
	MemberPhone:      "member.member_phone",
	MemberBirth:      "member.member_birth",
	MemberCreatedAt:  "member.member_created_at",
	MemberActivated:  "member.member_activated",
	MemberAuthority:  "member.member_authority",
	MemberSocial:     "member.member_social",
	MemberAllowEmail: "member.member_allow_email",
}

// Generated where

var MemberWhere = struct {
	MemberID         whereHelperstring
	MemberPW         whereHelperstring
	MemberName       whereHelperstring
	MemberNickname   whereHelperstring
	MemberEmail      whereHelpernull_String
	MemberPhone      whereHelperstring
	MemberBirth      whereHelpertime_Time
	MemberCreatedAt  whereHelpertime_Time
	MemberActivated  whereHelperbool
	MemberAuthority  whereHelperstring
	MemberSocial     whereHelpernull_String
	MemberAllowEmail whereHelperbool
}{
	MemberID:         whereHelperstring{field: "`member`.`member_id`"},
	MemberPW:         whereHelperstring{field: "`member`.`member_pw`"},
	MemberName:       whereHelperstring{field: "`member`.`member_name`"},
	MemberNickname:   whereHelperstring{field: "`member`.`member_nickname`"},
	MemberEmail:      whereHelpernull_String{field: "`member`.`member_email`"},
	MemberPhone:      whereHelperstring{field: "`member`.`member_phone`"},
	MemberBirth:      whereHelpertime_Time{field: "`member`.`member_birth`"},
	MemberCreatedAt:  whereHelpertime_Time{field: "`member`.`member_created_at`"},
	MemberActivated:  whereHelperbool{field: "`member`.`member_activated`"},
	MemberAuthority:  whereHelperstring{field: "`member`.`member_authority`"},
	MemberSocial:     whereHelpernull_String{field: "`member`.`member_social`"},
	MemberAllowEmail: whereHelperbool{field: "`member`.`member_allow_email`"},
}

// MemberRels is where relationship names are stored.
var MemberRels = struct {
	MemberSocialMemberSocialType string
	Diaries                      string
	Member1Friends               string
	Member2Friends               string
	FromMemberFriendRequests     string
	ToMemberFriendRequests       string
	ReceiverNotifications        string
	Records                      string
	RecordTests                  string
	Replies                      string
}{
	MemberSocialMemberSocialType: "MemberSocialMemberSocialType",
	Diaries:                      "Diaries",
	Member1Friends:               "Member1Friends",
	Member2Friends:               "Member2Friends",
	FromMemberFriendRequests:     "FromMemberFriendRequests",
	ToMemberFriendRequests:       "ToMemberFriendRequests",
	ReceiverNotifications:        "ReceiverNotifications",
	Records:                      "Records",
	RecordTests:                  "RecordTests",
	Replies:                      "Replies",
}

// memberR is where relationships are stored.
type memberR struct {
	MemberSocialMemberSocialType *MemberSocialType  `boil:"MemberSocialMemberSocialType" json:"MemberSocialMemberSocialType" toml:"MemberSocialMemberSocialType" yaml:"MemberSocialMemberSocialType"`
	Diaries                      DiarySlice         `boil:"Diaries" json:"Diaries" toml:"Diaries" yaml:"Diaries"`
	Member1Friends               FriendSlice        `boil:"Member1Friends" json:"Member1Friends" toml:"Member1Friends" yaml:"Member1Friends"`
	Member2Friends               FriendSlice        `boil:"Member2Friends" json:"Member2Friends" toml:"Member2Friends" yaml:"Member2Friends"`
	FromMemberFriendRequests     FriendRequestSlice `boil:"FromMemberFriendRequests" json:"FromMemberFriendRequests" toml:"FromMemberFriendRequests" yaml:"FromMemberFriendRequests"`
	ToMemberFriendRequests       FriendRequestSlice `boil:"ToMemberFriendRequests" json:"ToMemberFriendRequests" toml:"ToMemberFriendRequests" yaml:"ToMemberFriendRequests"`
	ReceiverNotifications        NotificationSlice  `boil:"ReceiverNotifications" json:"ReceiverNotifications" toml:"ReceiverNotifications" yaml:"ReceiverNotifications"`
	Records                      RecordSlice        `boil:"Records" json:"Records" toml:"Records" yaml:"Records"`
	RecordTests                  RecordTestSlice    `boil:"RecordTests" json:"RecordTests" toml:"RecordTests" yaml:"RecordTests"`
	Replies                      ReplySlice         `boil:"Replies" json:"Replies" toml:"Replies" yaml:"Replies"`
}

// NewStruct creates a new relationship struct
func (*memberR) NewStruct() *memberR {
	return &memberR{}
}

func (r *memberR) GetMemberSocialMemberSocialType() *MemberSocialType {
	if r == nil {
		return nil
	}
	return r.MemberSocialMemberSocialType
}

func (r *memberR) GetDiaries() DiarySlice {
	if r == nil {
		return nil
	}
	return r.Diaries
}

func (r *memberR) GetMember1Friends() FriendSlice {
	if r == nil {
		return nil
	}
	return r.Member1Friends
}

func (r *memberR) GetMember2Friends() FriendSlice {
	if r == nil {
		return nil
	}
	return r.Member2Friends
}

func (r *memberR) GetFromMemberFriendRequests() FriendRequestSlice {
	if r == nil {
		return nil
	}
	return r.FromMemberFriendRequests
}

func (r *memberR) GetToMemberFriendRequests() FriendRequestSlice {
	if r == nil {
		return nil
	}
	return r.ToMemberFriendRequests
}

func (r *memberR) GetReceiverNotifications() NotificationSlice {
	if r == nil {
		return nil
	}
	return r.ReceiverNotifications
}

func (r *memberR) GetRecords() RecordSlice {
	if r == nil {
		return nil
	}
	return r.Records
}

func (r *memberR) GetRecordTests() RecordTestSlice {
	if r == nil {
		return nil
	}
	return r.RecordTests
}

func (r *memberR) GetReplies() ReplySlice {
	if r == nil {
		return nil
	}
	return r.Replies
}

// memberL is where Load methods for each relationship are stored.
type memberL struct{}

var (
	memberAllColumns            = []string{"member_id", "member_pw", "member_name", "member_nickname", "member_email", "member_phone", "member_birth", "member_created_at", "member_activated", "member_authority", "member_social", "member_allow_email"}
	memberColumnsWithoutDefault = []string{"member_id", "member_pw", "member_name", "member_nickname", "member_email", "member_phone", "member_birth", "member_authority", "member_social"}
	memberColumnsWithDefault    = []string{"member_created_at", "member_activated", "member_allow_email"}
	memberPrimaryKeyColumns     = []string{"member_id"}
	memberGeneratedColumns      = []string{}
)

type (
	// MemberSlice is an alias for a slice of pointers to Member.
	// This should almost always be used instead of []Member.
	MemberSlice []*Member
	// MemberHook is the signature for custom Member hook methods
	MemberHook func(context.Context, boil.ContextExecutor, *Member) error

	memberQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	memberType                 = reflect.TypeOf(&Member{})
	memberMapping              = queries.MakeStructMapping(memberType)
	memberPrimaryKeyMapping, _ = queries.BindMapping(memberType, memberMapping, memberPrimaryKeyColumns)
	memberInsertCacheMut       sync.RWMutex
	memberInsertCache          = make(map[string]insertCache)
	memberUpdateCacheMut       sync.RWMutex
	memberUpdateCache          = make(map[string]updateCache)
	memberUpsertCacheMut       sync.RWMutex
	memberUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var memberAfterSelectMu sync.Mutex
var memberAfterSelectHooks []MemberHook

var memberBeforeInsertMu sync.Mutex
var memberBeforeInsertHooks []MemberHook
var memberAfterInsertMu sync.Mutex
var memberAfterInsertHooks []MemberHook

var memberBeforeUpdateMu sync.Mutex
var memberBeforeUpdateHooks []MemberHook
var memberAfterUpdateMu sync.Mutex
var memberAfterUpdateHooks []MemberHook

var memberBeforeDeleteMu sync.Mutex
var memberBeforeDeleteHooks []MemberHook
var memberAfterDeleteMu sync.Mutex
var memberAfterDeleteHooks []MemberHook

var memberBeforeUpsertMu sync.Mutex
var memberBeforeUpsertHooks []MemberHook
var memberAfterUpsertMu sync.Mutex
var memberAfterUpsertHooks []MemberHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Member) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Member) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Member) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Member) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Member) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Member) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Member) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Member) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Member) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMemberHook registers your hook function for all future operations.
func AddMemberHook(hookPoint boil.HookPoint, memberHook MemberHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		memberAfterSelectMu.Lock()
		memberAfterSelectHooks = append(memberAfterSelectHooks, memberHook)
		memberAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		memberBeforeInsertMu.Lock()
		memberBeforeInsertHooks = append(memberBeforeInsertHooks, memberHook)
		memberBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		memberAfterInsertMu.Lock()
		memberAfterInsertHooks = append(memberAfterInsertHooks, memberHook)
		memberAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		memberBeforeUpdateMu.Lock()
		memberBeforeUpdateHooks = append(memberBeforeUpdateHooks, memberHook)
		memberBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		memberAfterUpdateMu.Lock()
		memberAfterUpdateHooks = append(memberAfterUpdateHooks, memberHook)
		memberAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		memberBeforeDeleteMu.Lock()
		memberBeforeDeleteHooks = append(memberBeforeDeleteHooks, memberHook)
		memberBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		memberAfterDeleteMu.Lock()
		memberAfterDeleteHooks = append(memberAfterDeleteHooks, memberHook)
		memberAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		memberBeforeUpsertMu.Lock()
		memberBeforeUpsertHooks = append(memberBeforeUpsertHooks, memberHook)
		memberBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		memberAfterUpsertMu.Lock()
		memberAfterUpsertHooks = append(memberAfterUpsertHooks, memberHook)
		memberAfterUpsertMu.Unlock()
	}
}

// OneG returns a single member record from the query using the global executor.
func (q memberQuery) OneG(ctx context.Context) (*Member, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single member record from the query.
func (q memberQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Member, error) {
	o := &Member{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for member")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Member records from the query using the global executor.
func (q memberQuery) AllG(ctx context.Context) (MemberSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Member records from the query.
func (q memberQuery) All(ctx context.Context, exec boil.ContextExecutor) (MemberSlice, error) {
	var o []*Member

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Member slice")
	}

	if len(memberAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Member records in the query using the global executor
func (q memberQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Member records in the query.
func (q memberQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count member rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q memberQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q memberQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if member exists")
	}

	return count > 0, nil
}

// MemberSocialMemberSocialType pointed to by the foreign key.
func (o *Member) MemberSocialMemberSocialType(mods ...qm.QueryMod) memberSocialTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`member_social_id` = ?", o.MemberSocial),
	}

	queryMods = append(queryMods, mods...)

	return MemberSocialTypes(queryMods...)
}

// Diaries retrieves all the diary's Diaries with an executor.
func (o *Member) Diaries(mods ...qm.QueryMod) diaryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`diary`.`member_id`=?", o.MemberID),
	)

	return Diaries(queryMods...)
}

// Member1Friends retrieves all the friend's Friends with an executor via member1_id column.
func (o *Member) Member1Friends(mods ...qm.QueryMod) friendQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`friend`.`member1_id`=?", o.MemberID),
	)

	return Friends(queryMods...)
}

// Member2Friends retrieves all the friend's Friends with an executor via member2_id column.
func (o *Member) Member2Friends(mods ...qm.QueryMod) friendQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`friend`.`member2_id`=?", o.MemberID),
	)

	return Friends(queryMods...)
}

// FromMemberFriendRequests retrieves all the friend_request's FriendRequests with an executor via from_member_id column.
func (o *Member) FromMemberFriendRequests(mods ...qm.QueryMod) friendRequestQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`friend_request`.`from_member_id`=?", o.MemberID),
	)

	return FriendRequests(queryMods...)
}

// ToMemberFriendRequests retrieves all the friend_request's FriendRequests with an executor via to_member_id column.
func (o *Member) ToMemberFriendRequests(mods ...qm.QueryMod) friendRequestQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`friend_request`.`to_member_id`=?", o.MemberID),
	)

	return FriendRequests(queryMods...)
}

// ReceiverNotifications retrieves all the notification's Notifications with an executor via receiver_id column.
func (o *Member) ReceiverNotifications(mods ...qm.QueryMod) notificationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`notification`.`receiver_id`=?", o.MemberID),
	)

	return Notifications(queryMods...)
}

// Records retrieves all the record's Records with an executor.
func (o *Member) Records(mods ...qm.QueryMod) recordQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`record`.`member_id`=?", o.MemberID),
	)

	return Records(queryMods...)
}

// RecordTests retrieves all the record_test's RecordTests with an executor.
func (o *Member) RecordTests(mods ...qm.QueryMod) recordTestQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`record_test`.`member_id`=?", o.MemberID),
	)

	return RecordTests(queryMods...)
}

// Replies retrieves all the reply's Replies with an executor.
func (o *Member) Replies(mods ...qm.QueryMod) replyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`reply`.`member_id`=?", o.MemberID),
	)

	return Replies(queryMods...)
}

// LoadMemberSocialMemberSocialType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (memberL) LoadMemberSocialMemberSocialType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMember interface{}, mods queries.Applicator) error {
	var slice []*Member
	var object *Member

	if singular {
		var ok bool
		object, ok = maybeMember.(*Member)
		if !ok {
			object = new(Member)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMember)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMember))
			}
		}
	} else {
		s, ok := maybeMember.(*[]*Member)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMember)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMember))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &memberR{}
		}
		if !queries.IsNil(object.MemberSocial) {
			args[object.MemberSocial] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &memberR{}
			}

			if !queries.IsNil(obj.MemberSocial) {
				args[obj.MemberSocial] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`member_social_type`),
		qm.WhereIn(`member_social_type.member_social_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MemberSocialType")
	}

	var resultSlice []*MemberSocialType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MemberSocialType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for member_social_type")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for member_social_type")
	}

	if len(memberSocialTypeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MemberSocialMemberSocialType = foreign
		if foreign.R == nil {
			foreign.R = &memberSocialTypeR{}
		}
		foreign.R.MemberSocialMembers = append(foreign.R.MemberSocialMembers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.MemberSocial, foreign.MemberSocialID) {
				local.R.MemberSocialMemberSocialType = foreign
				if foreign.R == nil {
					foreign.R = &memberSocialTypeR{}
				}
				foreign.R.MemberSocialMembers = append(foreign.R.MemberSocialMembers, local)
				break
			}
		}
	}

	return nil
}

// LoadDiaries allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (memberL) LoadDiaries(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMember interface{}, mods queries.Applicator) error {
	var slice []*Member
	var object *Member

	if singular {
		var ok bool
		object, ok = maybeMember.(*Member)
		if !ok {
			object = new(Member)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMember)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMember))
			}
		}
	} else {
		s, ok := maybeMember.(*[]*Member)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMember)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMember))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &memberR{}
		}
		args[object.MemberID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &memberR{}
			}
			args[obj.MemberID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`diary`),
		qm.WhereIn(`diary.member_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load diary")
	}

	var resultSlice []*Diary
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice diary")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on diary")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for diary")
	}

	if len(diaryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Diaries = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &diaryR{}
			}
			foreign.R.Member = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.MemberID == foreign.MemberID {
				local.R.Diaries = append(local.R.Diaries, foreign)
				if foreign.R == nil {
					foreign.R = &diaryR{}
				}
				foreign.R.Member = local
				break
			}
		}
	}

	return nil
}

// LoadMember1Friends allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (memberL) LoadMember1Friends(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMember interface{}, mods queries.Applicator) error {
	var slice []*Member
	var object *Member

	if singular {
		var ok bool
		object, ok = maybeMember.(*Member)
		if !ok {
			object = new(Member)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMember)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMember))
			}
		}
	} else {
		s, ok := maybeMember.(*[]*Member)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMember)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMember))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &memberR{}
		}
		args[object.MemberID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &memberR{}
			}
			args[obj.MemberID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`friend`),
		qm.WhereIn(`friend.member1_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load friend")
	}

	var resultSlice []*Friend
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice friend")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on friend")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for friend")
	}

	if len(friendAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Member1Friends = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &friendR{}
			}
			foreign.R.Member1 = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.MemberID == foreign.Member1ID {
				local.R.Member1Friends = append(local.R.Member1Friends, foreign)
				if foreign.R == nil {
					foreign.R = &friendR{}
				}
				foreign.R.Member1 = local
				break
			}
		}
	}

	return nil
}

// LoadMember2Friends allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (memberL) LoadMember2Friends(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMember interface{}, mods queries.Applicator) error {
	var slice []*Member
	var object *Member

	if singular {
		var ok bool
		object, ok = maybeMember.(*Member)
		if !ok {
			object = new(Member)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMember)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMember))
			}
		}
	} else {
		s, ok := maybeMember.(*[]*Member)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMember)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMember))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &memberR{}
		}
		args[object.MemberID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &memberR{}
			}
			args[obj.MemberID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`friend`),
		qm.WhereIn(`friend.member2_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load friend")
	}

	var resultSlice []*Friend
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice friend")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on friend")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for friend")
	}

	if len(friendAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Member2Friends = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &friendR{}
			}
			foreign.R.Member2 = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.MemberID == foreign.Member2ID {
				local.R.Member2Friends = append(local.R.Member2Friends, foreign)
				if foreign.R == nil {
					foreign.R = &friendR{}
				}
				foreign.R.Member2 = local
				break
			}
		}
	}

	return nil
}

// LoadFromMemberFriendRequests allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (memberL) LoadFromMemberFriendRequests(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMember interface{}, mods queries.Applicator) error {
	var slice []*Member
	var object *Member

	if singular {
		var ok bool
		object, ok = maybeMember.(*Member)
		if !ok {
			object = new(Member)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMember)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMember))
			}
		}
	} else {
		s, ok := maybeMember.(*[]*Member)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMember)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMember))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &memberR{}
		}
		args[object.MemberID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &memberR{}
			}
			args[obj.MemberID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`friend_request`),
		qm.WhereIn(`friend_request.from_member_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load friend_request")
	}

	var resultSlice []*FriendRequest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice friend_request")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on friend_request")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for friend_request")
	}

	if len(friendRequestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FromMemberFriendRequests = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &friendRequestR{}
			}
			foreign.R.FromMember = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.MemberID == foreign.FromMemberID {
				local.R.FromMemberFriendRequests = append(local.R.FromMemberFriendRequests, foreign)
				if foreign.R == nil {
					foreign.R = &friendRequestR{}
				}
				foreign.R.FromMember = local
				break
			}
		}
	}

	return nil
}

// LoadToMemberFriendRequests allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (memberL) LoadToMemberFriendRequests(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMember interface{}, mods queries.Applicator) error {
	var slice []*Member
	var object *Member

	if singular {
		var ok bool
		object, ok = maybeMember.(*Member)
		if !ok {
			object = new(Member)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMember)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMember))
			}
		}
	} else {
		s, ok := maybeMember.(*[]*Member)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMember)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMember))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &memberR{}
		}
		args[object.MemberID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &memberR{}
			}
			args[obj.MemberID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`friend_request`),
		qm.WhereIn(`friend_request.to_member_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load friend_request")
	}

	var resultSlice []*FriendRequest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice friend_request")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on friend_request")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for friend_request")
	}

	if len(friendRequestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ToMemberFriendRequests = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &friendRequestR{}
			}
			foreign.R.ToMember = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.MemberID == foreign.ToMemberID {
				local.R.ToMemberFriendRequests = append(local.R.ToMemberFriendRequests, foreign)
				if foreign.R == nil {
					foreign.R = &friendRequestR{}
				}
				foreign.R.ToMember = local
				break
			}
		}
	}

	return nil
}

// LoadReceiverNotifications allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (memberL) LoadReceiverNotifications(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMember interface{}, mods queries.Applicator) error {
	var slice []*Member
	var object *Member

	if singular {
		var ok bool
		object, ok = maybeMember.(*Member)
		if !ok {
			object = new(Member)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMember)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMember))
			}
		}
	} else {
		s, ok := maybeMember.(*[]*Member)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMember)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMember))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &memberR{}
		}
		args[object.MemberID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &memberR{}
			}
			args[obj.MemberID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`notification`),
		qm.WhereIn(`notification.receiver_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load notification")
	}

	var resultSlice []*Notification
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice notification")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on notification")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for notification")
	}

	if len(notificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ReceiverNotifications = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &notificationR{}
			}
			foreign.R.Receiver = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.MemberID == foreign.ReceiverID {
				local.R.ReceiverNotifications = append(local.R.ReceiverNotifications, foreign)
				if foreign.R == nil {
					foreign.R = &notificationR{}
				}
				foreign.R.Receiver = local
				break
			}
		}
	}

	return nil
}

// LoadRecords allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (memberL) LoadRecords(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMember interface{}, mods queries.Applicator) error {
	var slice []*Member
	var object *Member

	if singular {
		var ok bool
		object, ok = maybeMember.(*Member)
		if !ok {
			object = new(Member)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMember)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMember))
			}
		}
	} else {
		s, ok := maybeMember.(*[]*Member)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMember)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMember))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &memberR{}
		}
		args[object.MemberID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &memberR{}
			}
			args[obj.MemberID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`record`),
		qm.WhereIn(`record.member_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load record")
	}

	var resultSlice []*Record
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice record")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on record")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for record")
	}

	if len(recordAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Records = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &recordR{}
			}
			foreign.R.Member = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.MemberID == foreign.MemberID {
				local.R.Records = append(local.R.Records, foreign)
				if foreign.R == nil {
					foreign.R = &recordR{}
				}
				foreign.R.Member = local
				break
			}
		}
	}

	return nil
}

// LoadRecordTests allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (memberL) LoadRecordTests(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMember interface{}, mods queries.Applicator) error {
	var slice []*Member
	var object *Member

	if singular {
		var ok bool
		object, ok = maybeMember.(*Member)
		if !ok {
			object = new(Member)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMember)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMember))
			}
		}
	} else {
		s, ok := maybeMember.(*[]*Member)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMember)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMember))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &memberR{}
		}
		args[object.MemberID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &memberR{}
			}
			args[obj.MemberID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`record_test`),
		qm.WhereIn(`record_test.member_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load record_test")
	}

	var resultSlice []*RecordTest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice record_test")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on record_test")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for record_test")
	}

	if len(recordTestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RecordTests = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &recordTestR{}
			}
			foreign.R.Member = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.MemberID == foreign.MemberID {
				local.R.RecordTests = append(local.R.RecordTests, foreign)
				if foreign.R == nil {
					foreign.R = &recordTestR{}
				}
				foreign.R.Member = local
				break
			}
		}
	}

	return nil
}

// LoadReplies allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (memberL) LoadReplies(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMember interface{}, mods queries.Applicator) error {
	var slice []*Member
	var object *Member

	if singular {
		var ok bool
		object, ok = maybeMember.(*Member)
		if !ok {
			object = new(Member)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMember)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMember))
			}
		}
	} else {
		s, ok := maybeMember.(*[]*Member)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMember)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMember))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &memberR{}
		}
		args[object.MemberID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &memberR{}
			}
			args[obj.MemberID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`reply`),
		qm.WhereIn(`reply.member_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load reply")
	}

	var resultSlice []*Reply
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice reply")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on reply")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for reply")
	}

	if len(replyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Replies = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &replyR{}
			}
			foreign.R.Member = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.MemberID == foreign.MemberID {
				local.R.Replies = append(local.R.Replies, foreign)
				if foreign.R == nil {
					foreign.R = &replyR{}
				}
				foreign.R.Member = local
				break
			}
		}
	}

	return nil
}

// SetMemberSocialMemberSocialTypeG of the member to the related item.
// Sets o.R.MemberSocialMemberSocialType to related.
// Adds o to related.R.MemberSocialMembers.
// Uses the global database handle.
func (o *Member) SetMemberSocialMemberSocialTypeG(ctx context.Context, insert bool, related *MemberSocialType) error {
	return o.SetMemberSocialMemberSocialType(ctx, boil.GetContextDB(), insert, related)
}

// SetMemberSocialMemberSocialType of the member to the related item.
// Sets o.R.MemberSocialMemberSocialType to related.
// Adds o to related.R.MemberSocialMembers.
func (o *Member) SetMemberSocialMemberSocialType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MemberSocialType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `member` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"member_social"}),
		strmangle.WhereClause("`", "`", 0, memberPrimaryKeyColumns),
	)
	values := []interface{}{related.MemberSocialID, o.MemberID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.MemberSocial, related.MemberSocialID)
	if o.R == nil {
		o.R = &memberR{
			MemberSocialMemberSocialType: related,
		}
	} else {
		o.R.MemberSocialMemberSocialType = related
	}

	if related.R == nil {
		related.R = &memberSocialTypeR{
			MemberSocialMembers: MemberSlice{o},
		}
	} else {
		related.R.MemberSocialMembers = append(related.R.MemberSocialMembers, o)
	}

	return nil
}

// RemoveMemberSocialMemberSocialTypeG relationship.
// Sets o.R.MemberSocialMemberSocialType to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *Member) RemoveMemberSocialMemberSocialTypeG(ctx context.Context, related *MemberSocialType) error {
	return o.RemoveMemberSocialMemberSocialType(ctx, boil.GetContextDB(), related)
}

// RemoveMemberSocialMemberSocialType relationship.
// Sets o.R.MemberSocialMemberSocialType to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Member) RemoveMemberSocialMemberSocialType(ctx context.Context, exec boil.ContextExecutor, related *MemberSocialType) error {
	var err error

	queries.SetScanner(&o.MemberSocial, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("member_social")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.MemberSocialMemberSocialType = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.MemberSocialMembers {
		if queries.Equal(o.MemberSocial, ri.MemberSocial) {
			continue
		}

		ln := len(related.R.MemberSocialMembers)
		if ln > 1 && i < ln-1 {
			related.R.MemberSocialMembers[i] = related.R.MemberSocialMembers[ln-1]
		}
		related.R.MemberSocialMembers = related.R.MemberSocialMembers[:ln-1]
		break
	}
	return nil
}

// AddDiariesG adds the given related objects to the existing relationships
// of the member, optionally inserting them as new records.
// Appends related to o.R.Diaries.
// Sets related.R.Member appropriately.
// Uses the global database handle.
func (o *Member) AddDiariesG(ctx context.Context, insert bool, related ...*Diary) error {
	return o.AddDiaries(ctx, boil.GetContextDB(), insert, related...)
}

// AddDiaries adds the given related objects to the existing relationships
// of the member, optionally inserting them as new records.
// Appends related to o.R.Diaries.
// Sets related.R.Member appropriately.
func (o *Member) AddDiaries(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Diary) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MemberID = o.MemberID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `diary` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"member_id"}),
				strmangle.WhereClause("`", "`", 0, diaryPrimaryKeyColumns),
			)
			values := []interface{}{o.MemberID, rel.DiaryID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MemberID = o.MemberID
		}
	}

	if o.R == nil {
		o.R = &memberR{
			Diaries: related,
		}
	} else {
		o.R.Diaries = append(o.R.Diaries, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &diaryR{
				Member: o,
			}
		} else {
			rel.R.Member = o
		}
	}
	return nil
}

// AddMember1FriendsG adds the given related objects to the existing relationships
// of the member, optionally inserting them as new records.
// Appends related to o.R.Member1Friends.
// Sets related.R.Member1 appropriately.
// Uses the global database handle.
func (o *Member) AddMember1FriendsG(ctx context.Context, insert bool, related ...*Friend) error {
	return o.AddMember1Friends(ctx, boil.GetContextDB(), insert, related...)
}

// AddMember1Friends adds the given related objects to the existing relationships
// of the member, optionally inserting them as new records.
// Appends related to o.R.Member1Friends.
// Sets related.R.Member1 appropriately.
func (o *Member) AddMember1Friends(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Friend) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Member1ID = o.MemberID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `friend` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"member1_id"}),
				strmangle.WhereClause("`", "`", 0, friendPrimaryKeyColumns),
			)
			values := []interface{}{o.MemberID, rel.FriendID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Member1ID = o.MemberID
		}
	}

	if o.R == nil {
		o.R = &memberR{
			Member1Friends: related,
		}
	} else {
		o.R.Member1Friends = append(o.R.Member1Friends, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &friendR{
				Member1: o,
			}
		} else {
			rel.R.Member1 = o
		}
	}
	return nil
}

// AddMember2FriendsG adds the given related objects to the existing relationships
// of the member, optionally inserting them as new records.
// Appends related to o.R.Member2Friends.
// Sets related.R.Member2 appropriately.
// Uses the global database handle.
func (o *Member) AddMember2FriendsG(ctx context.Context, insert bool, related ...*Friend) error {
	return o.AddMember2Friends(ctx, boil.GetContextDB(), insert, related...)
}

// AddMember2Friends adds the given related objects to the existing relationships
// of the member, optionally inserting them as new records.
// Appends related to o.R.Member2Friends.
// Sets related.R.Member2 appropriately.
func (o *Member) AddMember2Friends(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Friend) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Member2ID = o.MemberID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `friend` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"member2_id"}),
				strmangle.WhereClause("`", "`", 0, friendPrimaryKeyColumns),
			)
			values := []interface{}{o.MemberID, rel.FriendID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Member2ID = o.MemberID
		}
	}

	if o.R == nil {
		o.R = &memberR{
			Member2Friends: related,
		}
	} else {
		o.R.Member2Friends = append(o.R.Member2Friends, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &friendR{
				Member2: o,
			}
		} else {
			rel.R.Member2 = o
		}
	}
	return nil
}

// AddFromMemberFriendRequestsG adds the given related objects to the existing relationships
// of the member, optionally inserting them as new records.
// Appends related to o.R.FromMemberFriendRequests.
// Sets related.R.FromMember appropriately.
// Uses the global database handle.
func (o *Member) AddFromMemberFriendRequestsG(ctx context.Context, insert bool, related ...*FriendRequest) error {
	return o.AddFromMemberFriendRequests(ctx, boil.GetContextDB(), insert, related...)
}

// AddFromMemberFriendRequests adds the given related objects to the existing relationships
// of the member, optionally inserting them as new records.
// Appends related to o.R.FromMemberFriendRequests.
// Sets related.R.FromMember appropriately.
func (o *Member) AddFromMemberFriendRequests(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*FriendRequest) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FromMemberID = o.MemberID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `friend_request` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"from_member_id"}),
				strmangle.WhereClause("`", "`", 0, friendRequestPrimaryKeyColumns),
			)
			values := []interface{}{o.MemberID, rel.FriendRequestID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FromMemberID = o.MemberID
		}
	}

	if o.R == nil {
		o.R = &memberR{
			FromMemberFriendRequests: related,
		}
	} else {
		o.R.FromMemberFriendRequests = append(o.R.FromMemberFriendRequests, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &friendRequestR{
				FromMember: o,
			}
		} else {
			rel.R.FromMember = o
		}
	}
	return nil
}

// AddToMemberFriendRequestsG adds the given related objects to the existing relationships
// of the member, optionally inserting them as new records.
// Appends related to o.R.ToMemberFriendRequests.
// Sets related.R.ToMember appropriately.
// Uses the global database handle.
func (o *Member) AddToMemberFriendRequestsG(ctx context.Context, insert bool, related ...*FriendRequest) error {
	return o.AddToMemberFriendRequests(ctx, boil.GetContextDB(), insert, related...)
}

// AddToMemberFriendRequests adds the given related objects to the existing relationships
// of the member, optionally inserting them as new records.
// Appends related to o.R.ToMemberFriendRequests.
// Sets related.R.ToMember appropriately.
func (o *Member) AddToMemberFriendRequests(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*FriendRequest) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ToMemberID = o.MemberID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `friend_request` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"to_member_id"}),
				strmangle.WhereClause("`", "`", 0, friendRequestPrimaryKeyColumns),
			)
			values := []interface{}{o.MemberID, rel.FriendRequestID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ToMemberID = o.MemberID
		}
	}

	if o.R == nil {
		o.R = &memberR{
			ToMemberFriendRequests: related,
		}
	} else {
		o.R.ToMemberFriendRequests = append(o.R.ToMemberFriendRequests, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &friendRequestR{
				ToMember: o,
			}
		} else {
			rel.R.ToMember = o
		}
	}
	return nil
}

// AddReceiverNotificationsG adds the given related objects to the existing relationships
// of the member, optionally inserting them as new records.
// Appends related to o.R.ReceiverNotifications.
// Sets related.R.Receiver appropriately.
// Uses the global database handle.
func (o *Member) AddReceiverNotificationsG(ctx context.Context, insert bool, related ...*Notification) error {
	return o.AddReceiverNotifications(ctx, boil.GetContextDB(), insert, related...)
}

// AddReceiverNotifications adds the given related objects to the existing relationships
// of the member, optionally inserting them as new records.
// Appends related to o.R.ReceiverNotifications.
// Sets related.R.Receiver appropriately.
func (o *Member) AddReceiverNotifications(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Notification) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ReceiverID = o.MemberID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `notification` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"receiver_id"}),
				strmangle.WhereClause("`", "`", 0, notificationPrimaryKeyColumns),
			)
			values := []interface{}{o.MemberID, rel.NotificationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ReceiverID = o.MemberID
		}
	}

	if o.R == nil {
		o.R = &memberR{
			ReceiverNotifications: related,
		}
	} else {
		o.R.ReceiverNotifications = append(o.R.ReceiverNotifications, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &notificationR{
				Receiver: o,
			}
		} else {
			rel.R.Receiver = o
		}
	}
	return nil
}

// AddRecordsG adds the given related objects to the existing relationships
// of the member, optionally inserting them as new records.
// Appends related to o.R.Records.
// Sets related.R.Member appropriately.
// Uses the global database handle.
func (o *Member) AddRecordsG(ctx context.Context, insert bool, related ...*Record) error {
	return o.AddRecords(ctx, boil.GetContextDB(), insert, related...)
}

// AddRecords adds the given related objects to the existing relationships
// of the member, optionally inserting them as new records.
// Appends related to o.R.Records.
// Sets related.R.Member appropriately.
func (o *Member) AddRecords(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Record) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MemberID = o.MemberID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `record` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"member_id"}),
				strmangle.WhereClause("`", "`", 0, recordPrimaryKeyColumns),
			)
			values := []interface{}{o.MemberID, rel.RecordID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MemberID = o.MemberID
		}
	}

	if o.R == nil {
		o.R = &memberR{
			Records: related,
		}
	} else {
		o.R.Records = append(o.R.Records, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &recordR{
				Member: o,
			}
		} else {
			rel.R.Member = o
		}
	}
	return nil
}

// AddRecordTestsG adds the given related objects to the existing relationships
// of the member, optionally inserting them as new records.
// Appends related to o.R.RecordTests.
// Sets related.R.Member appropriately.
// Uses the global database handle.
func (o *Member) AddRecordTestsG(ctx context.Context, insert bool, related ...*RecordTest) error {
	return o.AddRecordTests(ctx, boil.GetContextDB(), insert, related...)
}

// AddRecordTests adds the given related objects to the existing relationships
// of the member, optionally inserting them as new records.
// Appends related to o.R.RecordTests.
// Sets related.R.Member appropriately.
func (o *Member) AddRecordTests(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RecordTest) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MemberID = o.MemberID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `record_test` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"member_id"}),
				strmangle.WhereClause("`", "`", 0, recordTestPrimaryKeyColumns),
			)
			values := []interface{}{o.MemberID, rel.RecordID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MemberID = o.MemberID
		}
	}

	if o.R == nil {
		o.R = &memberR{
			RecordTests: related,
		}
	} else {
		o.R.RecordTests = append(o.R.RecordTests, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &recordTestR{
				Member: o,
			}
		} else {
			rel.R.Member = o
		}
	}
	return nil
}

// AddRepliesG adds the given related objects to the existing relationships
// of the member, optionally inserting them as new records.
// Appends related to o.R.Replies.
// Sets related.R.Member appropriately.
// Uses the global database handle.
func (o *Member) AddRepliesG(ctx context.Context, insert bool, related ...*Reply) error {
	return o.AddReplies(ctx, boil.GetContextDB(), insert, related...)
}

// AddReplies adds the given related objects to the existing relationships
// of the member, optionally inserting them as new records.
// Appends related to o.R.Replies.
// Sets related.R.Member appropriately.
func (o *Member) AddReplies(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Reply) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MemberID = o.MemberID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `reply` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"member_id"}),
				strmangle.WhereClause("`", "`", 0, replyPrimaryKeyColumns),
			)
			values := []interface{}{o.MemberID, rel.ReplyID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MemberID = o.MemberID
		}
	}

	if o.R == nil {
		o.R = &memberR{
			Replies: related,
		}
	} else {
		o.R.Replies = append(o.R.Replies, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &replyR{
				Member: o,
			}
		} else {
			rel.R.Member = o
		}
	}
	return nil
}

// Members retrieves all the records using an executor.
func Members(mods ...qm.QueryMod) memberQuery {
	mods = append(mods, qm.From("`member`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`member`.*"})
	}

	return memberQuery{q}
}

// FindMemberG retrieves a single record by ID.
func FindMemberG(ctx context.Context, memberID string, selectCols ...string) (*Member, error) {
	return FindMember(ctx, boil.GetContextDB(), memberID, selectCols...)
}

// FindMember retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMember(ctx context.Context, exec boil.ContextExecutor, memberID string, selectCols ...string) (*Member, error) {
	memberObj := &Member{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `member` where `member_id`=?", sel,
	)

	q := queries.Raw(query, memberID)

	err := q.Bind(ctx, exec, memberObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from member")
	}

	if err = memberObj.doAfterSelectHooks(ctx, exec); err != nil {
		return memberObj, err
	}

	return memberObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Member) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Member) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no member provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(memberColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	memberInsertCacheMut.RLock()
	cache, cached := memberInsertCache[key]
	memberInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			memberAllColumns,
			memberColumnsWithDefault,
			memberColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(memberType, memberMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(memberType, memberMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `member` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `member` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `member` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, memberPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into member")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.MemberID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for member")
	}

CacheNoHooks:
	if !cached {
		memberInsertCacheMut.Lock()
		memberInsertCache[key] = cache
		memberInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Member record using the global executor.
// See Update for more documentation.
func (o *Member) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Member.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Member) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	memberUpdateCacheMut.RLock()
	cache, cached := memberUpdateCache[key]
	memberUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			memberAllColumns,
			memberPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update member, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `member` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, memberPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(memberType, memberMapping, append(wl, memberPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update member row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for member")
	}

	if !cached {
		memberUpdateCacheMut.Lock()
		memberUpdateCache[key] = cache
		memberUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q memberQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q memberQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for member")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for member")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o MemberSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MemberSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), memberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `member` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, memberPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in member slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all member")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Member) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLMemberUniqueColumns = []string{
	"member_id",
	"member_email",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Member) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no member provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(memberColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLMemberUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	memberUpsertCacheMut.RLock()
	cache, cached := memberUpsertCache[key]
	memberUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			memberAllColumns,
			memberColumnsWithDefault,
			memberColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			memberAllColumns,
			memberPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert member, could not build update column list")
		}

		ret := strmangle.SetComplement(memberAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`member`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `member` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(memberType, memberMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(memberType, memberMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for member")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(memberType, memberMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for member")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for member")
	}

CacheNoHooks:
	if !cached {
		memberUpsertCacheMut.Lock()
		memberUpsertCache[key] = cache
		memberUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Member record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Member) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Member record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Member) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Member provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), memberPrimaryKeyMapping)
	sql := "DELETE FROM `member` WHERE `member_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from member")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for member")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q memberQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q memberQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no memberQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from member")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for member")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o MemberSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MemberSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(memberBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), memberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `member` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, memberPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from member slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for member")
	}

	if len(memberAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Member) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Member provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Member) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMember(ctx, exec, o.MemberID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MemberSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty MemberSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MemberSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MemberSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), memberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `member`.* FROM `member` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, memberPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MemberSlice")
	}

	*o = slice

	return nil
}

// MemberExistsG checks if the Member row exists.
func MemberExistsG(ctx context.Context, memberID string) (bool, error) {
	return MemberExists(ctx, boil.GetContextDB(), memberID)
}

// MemberExists checks if the Member row exists.
func MemberExists(ctx context.Context, exec boil.ContextExecutor, memberID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `member` where `member_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, memberID)
	}
	row := exec.QueryRowContext(ctx, sql, memberID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if member exists")
	}

	return exists, nil
}

// Exists checks if the Member row exists.
func (o *Member) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MemberExists(ctx, exec, o.MemberID)
}
