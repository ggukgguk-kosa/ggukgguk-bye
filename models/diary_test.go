// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDiaries(t *testing.T) {
	t.Parallel()

	query := Diaries()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDiariesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Diary{}
	if err = randomize.Struct(seed, o, diaryDBTypes, true, diaryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Diary struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Diaries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDiariesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Diary{}
	if err = randomize.Struct(seed, o, diaryDBTypes, true, diaryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Diary struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Diaries().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Diaries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDiariesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Diary{}
	if err = randomize.Struct(seed, o, diaryDBTypes, true, diaryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Diary struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DiarySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Diaries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDiariesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Diary{}
	if err = randomize.Struct(seed, o, diaryDBTypes, true, diaryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Diary struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DiaryExists(ctx, tx, o.DiaryID)
	if err != nil {
		t.Errorf("Unable to check if Diary exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DiaryExists to return true, but got false.")
	}
}

func testDiariesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Diary{}
	if err = randomize.Struct(seed, o, diaryDBTypes, true, diaryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Diary struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	diaryFound, err := FindDiary(ctx, tx, o.DiaryID)
	if err != nil {
		t.Error(err)
	}

	if diaryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDiariesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Diary{}
	if err = randomize.Struct(seed, o, diaryDBTypes, true, diaryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Diary struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Diaries().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDiariesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Diary{}
	if err = randomize.Struct(seed, o, diaryDBTypes, true, diaryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Diary struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Diaries().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDiariesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	diaryOne := &Diary{}
	diaryTwo := &Diary{}
	if err = randomize.Struct(seed, diaryOne, diaryDBTypes, false, diaryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Diary struct: %s", err)
	}
	if err = randomize.Struct(seed, diaryTwo, diaryDBTypes, false, diaryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Diary struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = diaryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = diaryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Diaries().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDiariesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	diaryOne := &Diary{}
	diaryTwo := &Diary{}
	if err = randomize.Struct(seed, diaryOne, diaryDBTypes, false, diaryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Diary struct: %s", err)
	}
	if err = randomize.Struct(seed, diaryTwo, diaryDBTypes, false, diaryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Diary struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = diaryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = diaryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Diaries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func diaryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Diary) error {
	*o = Diary{}
	return nil
}

func diaryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Diary) error {
	*o = Diary{}
	return nil
}

func diaryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Diary) error {
	*o = Diary{}
	return nil
}

func diaryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Diary) error {
	*o = Diary{}
	return nil
}

func diaryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Diary) error {
	*o = Diary{}
	return nil
}

func diaryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Diary) error {
	*o = Diary{}
	return nil
}

func diaryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Diary) error {
	*o = Diary{}
	return nil
}

func diaryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Diary) error {
	*o = Diary{}
	return nil
}

func diaryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Diary) error {
	*o = Diary{}
	return nil
}

func testDiariesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Diary{}
	o := &Diary{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, diaryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Diary object: %s", err)
	}

	AddDiaryHook(boil.BeforeInsertHook, diaryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	diaryBeforeInsertHooks = []DiaryHook{}

	AddDiaryHook(boil.AfterInsertHook, diaryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	diaryAfterInsertHooks = []DiaryHook{}

	AddDiaryHook(boil.AfterSelectHook, diaryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	diaryAfterSelectHooks = []DiaryHook{}

	AddDiaryHook(boil.BeforeUpdateHook, diaryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	diaryBeforeUpdateHooks = []DiaryHook{}

	AddDiaryHook(boil.AfterUpdateHook, diaryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	diaryAfterUpdateHooks = []DiaryHook{}

	AddDiaryHook(boil.BeforeDeleteHook, diaryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	diaryBeforeDeleteHooks = []DiaryHook{}

	AddDiaryHook(boil.AfterDeleteHook, diaryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	diaryAfterDeleteHooks = []DiaryHook{}

	AddDiaryHook(boil.BeforeUpsertHook, diaryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	diaryBeforeUpsertHooks = []DiaryHook{}

	AddDiaryHook(boil.AfterUpsertHook, diaryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	diaryAfterUpsertHooks = []DiaryHook{}
}

func testDiariesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Diary{}
	if err = randomize.Struct(seed, o, diaryDBTypes, true, diaryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Diary struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Diaries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDiariesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Diary{}
	if err = randomize.Struct(seed, o, diaryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Diary struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(diaryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Diaries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDiaryToManyDiaryColors(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Diary
	var b, c DiaryColor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, diaryDBTypes, true, diaryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Diary struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, diaryColorDBTypes, false, diaryColorColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, diaryColorDBTypes, false, diaryColorColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.DiaryID = a.DiaryID
	c.DiaryID = a.DiaryID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.DiaryColors().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.DiaryID == b.DiaryID {
			bFound = true
		}
		if v.DiaryID == c.DiaryID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DiarySlice{&a}
	if err = a.L.LoadDiaryColors(ctx, tx, false, (*[]*Diary)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DiaryColors); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.DiaryColors = nil
	if err = a.L.LoadDiaryColors(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DiaryColors); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDiaryToManyDiaryKeywords(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Diary
	var b, c DiaryKeyword

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, diaryDBTypes, true, diaryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Diary struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, diaryKeywordDBTypes, false, diaryKeywordColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, diaryKeywordDBTypes, false, diaryKeywordColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.DiaryID = a.DiaryID
	c.DiaryID = a.DiaryID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.DiaryKeywords().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.DiaryID == b.DiaryID {
			bFound = true
		}
		if v.DiaryID == c.DiaryID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DiarySlice{&a}
	if err = a.L.LoadDiaryKeywords(ctx, tx, false, (*[]*Diary)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DiaryKeywords); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.DiaryKeywords = nil
	if err = a.L.LoadDiaryKeywords(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DiaryKeywords); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDiaryToManyAddOpDiaryColors(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Diary
	var b, c, d, e DiaryColor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, diaryDBTypes, false, strmangle.SetComplement(diaryPrimaryKeyColumns, diaryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DiaryColor{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, diaryColorDBTypes, false, strmangle.SetComplement(diaryColorPrimaryKeyColumns, diaryColorColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DiaryColor{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDiaryColors(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.DiaryID != first.DiaryID {
			t.Error("foreign key was wrong value", a.DiaryID, first.DiaryID)
		}
		if a.DiaryID != second.DiaryID {
			t.Error("foreign key was wrong value", a.DiaryID, second.DiaryID)
		}

		if first.R.Diary != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Diary != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.DiaryColors[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.DiaryColors[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.DiaryColors().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testDiaryToManyAddOpDiaryKeywords(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Diary
	var b, c, d, e DiaryKeyword

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, diaryDBTypes, false, strmangle.SetComplement(diaryPrimaryKeyColumns, diaryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DiaryKeyword{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, diaryKeywordDBTypes, false, strmangle.SetComplement(diaryKeywordPrimaryKeyColumns, diaryKeywordColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DiaryKeyword{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDiaryKeywords(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.DiaryID != first.DiaryID {
			t.Error("foreign key was wrong value", a.DiaryID, first.DiaryID)
		}
		if a.DiaryID != second.DiaryID {
			t.Error("foreign key was wrong value", a.DiaryID, second.DiaryID)
		}

		if first.R.Diary != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Diary != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.DiaryKeywords[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.DiaryKeywords[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.DiaryKeywords().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testDiaryToOneMemberUsingMember(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Diary
	var foreign Member

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, diaryDBTypes, false, diaryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Diary struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, memberDBTypes, false, memberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Member struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.MemberID = foreign.MemberID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Member().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.MemberID != foreign.MemberID {
		t.Errorf("want: %v, got %v", foreign.MemberID, check.MemberID)
	}

	ranAfterSelectHook := false
	AddMemberHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Member) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := DiarySlice{&local}
	if err = local.L.LoadMember(ctx, tx, false, (*[]*Diary)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Member == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Member = nil
	if err = local.L.LoadMember(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Member == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testDiaryToOneSetOpMemberUsingMember(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Diary
	var b, c Member

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, diaryDBTypes, false, strmangle.SetComplement(diaryPrimaryKeyColumns, diaryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, memberDBTypes, false, strmangle.SetComplement(memberPrimaryKeyColumns, memberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, memberDBTypes, false, strmangle.SetComplement(memberPrimaryKeyColumns, memberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Member{&b, &c} {
		err = a.SetMember(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Member != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Diaries[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.MemberID != x.MemberID {
			t.Error("foreign key was wrong value", a.MemberID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.MemberID))
		reflect.Indirect(reflect.ValueOf(&a.MemberID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.MemberID != x.MemberID {
			t.Error("foreign key was wrong value", a.MemberID, x.MemberID)
		}
	}
}

func testDiariesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Diary{}
	if err = randomize.Struct(seed, o, diaryDBTypes, true, diaryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Diary struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDiariesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Diary{}
	if err = randomize.Struct(seed, o, diaryDBTypes, true, diaryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Diary struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DiarySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDiariesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Diary{}
	if err = randomize.Struct(seed, o, diaryDBTypes, true, diaryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Diary struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Diaries().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	diaryDBTypes = map[string]string{`DiaryID`: `int`, `MemberID`: `varchar`, `DiaryYear`: `char`, `DiaryMonth`: `char`, `MainColor`: `char`, `MainKeyword`: `varchar`}
	_            = bytes.MinRead
)

func testDiariesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(diaryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(diaryAllColumns) == len(diaryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Diary{}
	if err = randomize.Struct(seed, o, diaryDBTypes, true, diaryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Diary struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Diaries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, diaryDBTypes, true, diaryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Diary struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDiariesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(diaryAllColumns) == len(diaryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Diary{}
	if err = randomize.Struct(seed, o, diaryDBTypes, true, diaryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Diary struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Diaries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, diaryDBTypes, true, diaryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Diary struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(diaryAllColumns, diaryPrimaryKeyColumns) {
		fields = diaryAllColumns
	} else {
		fields = strmangle.SetComplement(
			diaryAllColumns,
			diaryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DiarySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDiariesUpsert(t *testing.T) {
	t.Parallel()

	if len(diaryAllColumns) == len(diaryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLDiaryUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Diary{}
	if err = randomize.Struct(seed, &o, diaryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Diary struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Diary: %s", err)
	}

	count, err := Diaries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, diaryDBTypes, false, diaryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Diary struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Diary: %s", err)
	}

	count, err = Diaries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
