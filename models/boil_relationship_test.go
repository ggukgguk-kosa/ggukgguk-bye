// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("DiaryToMemberUsingMember", testDiaryToOneMemberUsingMember)
	t.Run("DiaryColorToDiaryUsingDiary", testDiaryColorToOneDiaryUsingDiary)
	t.Run("DiaryKeywordToDiaryUsingDiary", testDiaryKeywordToOneDiaryUsingDiary)
	t.Run("FriendToMemberUsingMember1", testFriendToOneMemberUsingMember1)
	t.Run("FriendToMemberUsingMember2", testFriendToOneMemberUsingMember2)
	t.Run("FriendRequestToMemberUsingFromMember", testFriendRequestToOneMemberUsingFromMember)
	t.Run("FriendRequestToMemberUsingToMember", testFriendRequestToOneMemberUsingToMember)
	t.Run("MediaFileToMediaTypeUsingMediaType", testMediaFileToOneMediaTypeUsingMediaType)
	t.Run("MediaFileBlockedHistoryToRecordUsingMediaFile", testMediaFileBlockedHistoryToOneRecordUsingMediaFile)
	t.Run("MediaFileRecheckRequestToRecordUsingMediaFile", testMediaFileRecheckRequestToOneRecordUsingMediaFile)
	t.Run("MemberToMemberSocialTypeUsingMemberSocialMemberSocialType", testMemberToOneMemberSocialTypeUsingMemberSocialMemberSocialType)
	t.Run("NotificationToMemberUsingReceiver", testNotificationToOneMemberUsingReceiver)
	t.Run("NotificationToNotificationTypeUsingNotificationType", testNotificationToOneNotificationTypeUsingNotificationType)
	t.Run("RecordToMemberUsingMember", testRecordToOneMemberUsingMember)
	t.Run("RecordToMediaFileUsingMediaFile", testRecordToOneMediaFileUsingMediaFile)
	t.Run("RecordKeywordToRecordUsingRecord", testRecordKeywordToOneRecordUsingRecord)
	t.Run("RecordTestToMemberUsingMember", testRecordTestToOneMemberUsingMember)
	t.Run("RecordTestToMediaFileUsingMediaFile", testRecordTestToOneMediaFileUsingMediaFile)
	t.Run("ReplyToRecordUsingRecord", testReplyToOneRecordUsingRecord)
	t.Run("ReplyToMemberUsingMember", testReplyToOneMemberUsingMember)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("DiaryToDiaryColors", testDiaryToManyDiaryColors)
	t.Run("DiaryToDiaryKeywords", testDiaryToManyDiaryKeywords)
	t.Run("MediaFileToRecords", testMediaFileToManyRecords)
	t.Run("MediaFileToRecordTests", testMediaFileToManyRecordTests)
	t.Run("MediaTypeToMediaFiles", testMediaTypeToManyMediaFiles)
	t.Run("MemberToDiaries", testMemberToManyDiaries)
	t.Run("MemberToMember1Friends", testMemberToManyMember1Friends)
	t.Run("MemberToMember2Friends", testMemberToManyMember2Friends)
	t.Run("MemberToFromMemberFriendRequests", testMemberToManyFromMemberFriendRequests)
	t.Run("MemberToToMemberFriendRequests", testMemberToManyToMemberFriendRequests)
	t.Run("MemberToReceiverNotifications", testMemberToManyReceiverNotifications)
	t.Run("MemberToRecords", testMemberToManyRecords)
	t.Run("MemberToRecordTests", testMemberToManyRecordTests)
	t.Run("MemberToReplies", testMemberToManyReplies)
	t.Run("MemberSocialTypeToMemberSocialMembers", testMemberSocialTypeToManyMemberSocialMembers)
	t.Run("NotificationTypeToNotifications", testNotificationTypeToManyNotifications)
	t.Run("RecordToMediaFileMediaFileBlockedHistories", testRecordToManyMediaFileMediaFileBlockedHistories)
	t.Run("RecordToMediaFileMediaFileRecheckRequests", testRecordToManyMediaFileMediaFileRecheckRequests)
	t.Run("RecordToRecordKeywords", testRecordToManyRecordKeywords)
	t.Run("RecordToReplies", testRecordToManyReplies)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("DiaryToMemberUsingDiaries", testDiaryToOneSetOpMemberUsingMember)
	t.Run("DiaryColorToDiaryUsingDiaryColors", testDiaryColorToOneSetOpDiaryUsingDiary)
	t.Run("DiaryKeywordToDiaryUsingDiaryKeywords", testDiaryKeywordToOneSetOpDiaryUsingDiary)
	t.Run("FriendToMemberUsingMember1Friends", testFriendToOneSetOpMemberUsingMember1)
	t.Run("FriendToMemberUsingMember2Friends", testFriendToOneSetOpMemberUsingMember2)
	t.Run("FriendRequestToMemberUsingFromMemberFriendRequests", testFriendRequestToOneSetOpMemberUsingFromMember)
	t.Run("FriendRequestToMemberUsingToMemberFriendRequests", testFriendRequestToOneSetOpMemberUsingToMember)
	t.Run("MediaFileToMediaTypeUsingMediaFiles", testMediaFileToOneSetOpMediaTypeUsingMediaType)
	t.Run("MediaFileBlockedHistoryToRecordUsingMediaFileMediaFileBlockedHistories", testMediaFileBlockedHistoryToOneSetOpRecordUsingMediaFile)
	t.Run("MediaFileRecheckRequestToRecordUsingMediaFileMediaFileRecheckRequests", testMediaFileRecheckRequestToOneSetOpRecordUsingMediaFile)
	t.Run("MemberToMemberSocialTypeUsingMemberSocialMembers", testMemberToOneSetOpMemberSocialTypeUsingMemberSocialMemberSocialType)
	t.Run("NotificationToMemberUsingReceiverNotifications", testNotificationToOneSetOpMemberUsingReceiver)
	t.Run("NotificationToNotificationTypeUsingNotifications", testNotificationToOneSetOpNotificationTypeUsingNotificationType)
	t.Run("RecordToMemberUsingRecords", testRecordToOneSetOpMemberUsingMember)
	t.Run("RecordToMediaFileUsingRecords", testRecordToOneSetOpMediaFileUsingMediaFile)
	t.Run("RecordKeywordToRecordUsingRecordKeywords", testRecordKeywordToOneSetOpRecordUsingRecord)
	t.Run("RecordTestToMemberUsingRecordTests", testRecordTestToOneSetOpMemberUsingMember)
	t.Run("RecordTestToMediaFileUsingRecordTests", testRecordTestToOneSetOpMediaFileUsingMediaFile)
	t.Run("ReplyToRecordUsingReplies", testReplyToOneSetOpRecordUsingRecord)
	t.Run("ReplyToMemberUsingReplies", testReplyToOneSetOpMemberUsingMember)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("MemberToMemberSocialTypeUsingMemberSocialMembers", testMemberToOneRemoveOpMemberSocialTypeUsingMemberSocialMemberSocialType)
	t.Run("RecordToMediaFileUsingRecords", testRecordToOneRemoveOpMediaFileUsingMediaFile)
	t.Run("RecordTestToMediaFileUsingRecordTests", testRecordTestToOneRemoveOpMediaFileUsingMediaFile)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("DiaryToDiaryColors", testDiaryToManyAddOpDiaryColors)
	t.Run("DiaryToDiaryKeywords", testDiaryToManyAddOpDiaryKeywords)
	t.Run("MediaFileToRecords", testMediaFileToManyAddOpRecords)
	t.Run("MediaFileToRecordTests", testMediaFileToManyAddOpRecordTests)
	t.Run("MediaTypeToMediaFiles", testMediaTypeToManyAddOpMediaFiles)
	t.Run("MemberToDiaries", testMemberToManyAddOpDiaries)
	t.Run("MemberToMember1Friends", testMemberToManyAddOpMember1Friends)
	t.Run("MemberToMember2Friends", testMemberToManyAddOpMember2Friends)
	t.Run("MemberToFromMemberFriendRequests", testMemberToManyAddOpFromMemberFriendRequests)
	t.Run("MemberToToMemberFriendRequests", testMemberToManyAddOpToMemberFriendRequests)
	t.Run("MemberToReceiverNotifications", testMemberToManyAddOpReceiverNotifications)
	t.Run("MemberToRecords", testMemberToManyAddOpRecords)
	t.Run("MemberToRecordTests", testMemberToManyAddOpRecordTests)
	t.Run("MemberToReplies", testMemberToManyAddOpReplies)
	t.Run("MemberSocialTypeToMemberSocialMembers", testMemberSocialTypeToManyAddOpMemberSocialMembers)
	t.Run("NotificationTypeToNotifications", testNotificationTypeToManyAddOpNotifications)
	t.Run("RecordToMediaFileMediaFileBlockedHistories", testRecordToManyAddOpMediaFileMediaFileBlockedHistories)
	t.Run("RecordToMediaFileMediaFileRecheckRequests", testRecordToManyAddOpMediaFileMediaFileRecheckRequests)
	t.Run("RecordToRecordKeywords", testRecordToManyAddOpRecordKeywords)
	t.Run("RecordToReplies", testRecordToManyAddOpReplies)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("MediaFileToRecords", testMediaFileToManySetOpRecords)
	t.Run("MediaFileToRecordTests", testMediaFileToManySetOpRecordTests)
	t.Run("MemberSocialTypeToMemberSocialMembers", testMemberSocialTypeToManySetOpMemberSocialMembers)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("MediaFileToRecords", testMediaFileToManyRemoveOpRecords)
	t.Run("MediaFileToRecordTests", testMediaFileToManyRemoveOpRecordTests)
	t.Run("MemberSocialTypeToMemberSocialMembers", testMemberSocialTypeToManyRemoveOpMemberSocialMembers)
}
