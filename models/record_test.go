// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRecords(t *testing.T) {
	t.Parallel()

	query := Records()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRecordsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Record{}
	if err = randomize.Struct(seed, o, recordDBTypes, true, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Records().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecordsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Record{}
	if err = randomize.Struct(seed, o, recordDBTypes, true, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Records().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Records().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecordsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Record{}
	if err = randomize.Struct(seed, o, recordDBTypes, true, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RecordSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Records().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecordsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Record{}
	if err = randomize.Struct(seed, o, recordDBTypes, true, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RecordExists(ctx, tx, o.RecordID)
	if err != nil {
		t.Errorf("Unable to check if Record exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RecordExists to return true, but got false.")
	}
}

func testRecordsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Record{}
	if err = randomize.Struct(seed, o, recordDBTypes, true, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	recordFound, err := FindRecord(ctx, tx, o.RecordID)
	if err != nil {
		t.Error(err)
	}

	if recordFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRecordsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Record{}
	if err = randomize.Struct(seed, o, recordDBTypes, true, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Records().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRecordsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Record{}
	if err = randomize.Struct(seed, o, recordDBTypes, true, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Records().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRecordsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	recordOne := &Record{}
	recordTwo := &Record{}
	if err = randomize.Struct(seed, recordOne, recordDBTypes, false, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}
	if err = randomize.Struct(seed, recordTwo, recordDBTypes, false, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = recordOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = recordTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Records().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRecordsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	recordOne := &Record{}
	recordTwo := &Record{}
	if err = randomize.Struct(seed, recordOne, recordDBTypes, false, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}
	if err = randomize.Struct(seed, recordTwo, recordDBTypes, false, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = recordOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = recordTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Records().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func recordBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Record) error {
	*o = Record{}
	return nil
}

func recordAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Record) error {
	*o = Record{}
	return nil
}

func recordAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Record) error {
	*o = Record{}
	return nil
}

func recordBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Record) error {
	*o = Record{}
	return nil
}

func recordAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Record) error {
	*o = Record{}
	return nil
}

func recordBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Record) error {
	*o = Record{}
	return nil
}

func recordAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Record) error {
	*o = Record{}
	return nil
}

func recordBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Record) error {
	*o = Record{}
	return nil
}

func recordAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Record) error {
	*o = Record{}
	return nil
}

func testRecordsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Record{}
	o := &Record{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, recordDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Record object: %s", err)
	}

	AddRecordHook(boil.BeforeInsertHook, recordBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	recordBeforeInsertHooks = []RecordHook{}

	AddRecordHook(boil.AfterInsertHook, recordAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	recordAfterInsertHooks = []RecordHook{}

	AddRecordHook(boil.AfterSelectHook, recordAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	recordAfterSelectHooks = []RecordHook{}

	AddRecordHook(boil.BeforeUpdateHook, recordBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	recordBeforeUpdateHooks = []RecordHook{}

	AddRecordHook(boil.AfterUpdateHook, recordAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	recordAfterUpdateHooks = []RecordHook{}

	AddRecordHook(boil.BeforeDeleteHook, recordBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	recordBeforeDeleteHooks = []RecordHook{}

	AddRecordHook(boil.AfterDeleteHook, recordAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	recordAfterDeleteHooks = []RecordHook{}

	AddRecordHook(boil.BeforeUpsertHook, recordBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	recordBeforeUpsertHooks = []RecordHook{}

	AddRecordHook(boil.AfterUpsertHook, recordAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	recordAfterUpsertHooks = []RecordHook{}
}

func testRecordsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Record{}
	if err = randomize.Struct(seed, o, recordDBTypes, true, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Records().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRecordsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Record{}
	if err = randomize.Struct(seed, o, recordDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(recordColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Records().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRecordToManyMediaFileMediaFileBlockedHistories(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Record
	var b, c MediaFileBlockedHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recordDBTypes, true, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, mediaFileBlockedHistoryDBTypes, false, mediaFileBlockedHistoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, mediaFileBlockedHistoryDBTypes, false, mediaFileBlockedHistoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.MediaFileID, a.MediaFileID)
	queries.Assign(&c.MediaFileID, a.MediaFileID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.MediaFileMediaFileBlockedHistories().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.MediaFileID, b.MediaFileID) {
			bFound = true
		}
		if queries.Equal(v.MediaFileID, c.MediaFileID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RecordSlice{&a}
	if err = a.L.LoadMediaFileMediaFileBlockedHistories(ctx, tx, false, (*[]*Record)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MediaFileMediaFileBlockedHistories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.MediaFileMediaFileBlockedHistories = nil
	if err = a.L.LoadMediaFileMediaFileBlockedHistories(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MediaFileMediaFileBlockedHistories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testRecordToManyMediaFileMediaFileRecheckRequests(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Record
	var b, c MediaFileRecheckRequest

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recordDBTypes, true, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, mediaFileRecheckRequestDBTypes, false, mediaFileRecheckRequestColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, mediaFileRecheckRequestDBTypes, false, mediaFileRecheckRequestColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.MediaFileID, a.MediaFileID)
	queries.Assign(&c.MediaFileID, a.MediaFileID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.MediaFileMediaFileRecheckRequests().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.MediaFileID, b.MediaFileID) {
			bFound = true
		}
		if queries.Equal(v.MediaFileID, c.MediaFileID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RecordSlice{&a}
	if err = a.L.LoadMediaFileMediaFileRecheckRequests(ctx, tx, false, (*[]*Record)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MediaFileMediaFileRecheckRequests); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.MediaFileMediaFileRecheckRequests = nil
	if err = a.L.LoadMediaFileMediaFileRecheckRequests(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MediaFileMediaFileRecheckRequests); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testRecordToManyRecordKeywords(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Record
	var b, c RecordKeyword

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recordDBTypes, true, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, recordKeywordDBTypes, false, recordKeywordColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, recordKeywordDBTypes, false, recordKeywordColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.RecordID = a.RecordID
	c.RecordID = a.RecordID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.RecordKeywords().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.RecordID == b.RecordID {
			bFound = true
		}
		if v.RecordID == c.RecordID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RecordSlice{&a}
	if err = a.L.LoadRecordKeywords(ctx, tx, false, (*[]*Record)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RecordKeywords); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.RecordKeywords = nil
	if err = a.L.LoadRecordKeywords(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RecordKeywords); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testRecordToManyReplies(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Record
	var b, c Reply

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recordDBTypes, true, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, replyDBTypes, false, replyColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, replyDBTypes, false, replyColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.RecordID = a.RecordID
	c.RecordID = a.RecordID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Replies().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.RecordID == b.RecordID {
			bFound = true
		}
		if v.RecordID == c.RecordID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RecordSlice{&a}
	if err = a.L.LoadReplies(ctx, tx, false, (*[]*Record)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Replies); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Replies = nil
	if err = a.L.LoadReplies(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Replies); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testRecordToManyAddOpMediaFileMediaFileBlockedHistories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Record
	var b, c, d, e MediaFileBlockedHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recordDBTypes, false, strmangle.SetComplement(recordPrimaryKeyColumns, recordColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MediaFileBlockedHistory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, mediaFileBlockedHistoryDBTypes, false, strmangle.SetComplement(mediaFileBlockedHistoryPrimaryKeyColumns, mediaFileBlockedHistoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*MediaFileBlockedHistory{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMediaFileMediaFileBlockedHistories(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.MediaFileID, first.MediaFileID) {
			t.Error("foreign key was wrong value", a.MediaFileID, first.MediaFileID)
		}
		if !queries.Equal(a.MediaFileID, second.MediaFileID) {
			t.Error("foreign key was wrong value", a.MediaFileID, second.MediaFileID)
		}

		if first.R.MediaFile != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.MediaFile != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.MediaFileMediaFileBlockedHistories[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.MediaFileMediaFileBlockedHistories[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.MediaFileMediaFileBlockedHistories().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testRecordToManyAddOpMediaFileMediaFileRecheckRequests(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Record
	var b, c, d, e MediaFileRecheckRequest

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recordDBTypes, false, strmangle.SetComplement(recordPrimaryKeyColumns, recordColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MediaFileRecheckRequest{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, mediaFileRecheckRequestDBTypes, false, strmangle.SetComplement(mediaFileRecheckRequestPrimaryKeyColumns, mediaFileRecheckRequestColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*MediaFileRecheckRequest{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMediaFileMediaFileRecheckRequests(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.MediaFileID, first.MediaFileID) {
			t.Error("foreign key was wrong value", a.MediaFileID, first.MediaFileID)
		}
		if !queries.Equal(a.MediaFileID, second.MediaFileID) {
			t.Error("foreign key was wrong value", a.MediaFileID, second.MediaFileID)
		}

		if first.R.MediaFile != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.MediaFile != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.MediaFileMediaFileRecheckRequests[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.MediaFileMediaFileRecheckRequests[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.MediaFileMediaFileRecheckRequests().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testRecordToManyAddOpRecordKeywords(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Record
	var b, c, d, e RecordKeyword

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recordDBTypes, false, strmangle.SetComplement(recordPrimaryKeyColumns, recordColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RecordKeyword{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, recordKeywordDBTypes, false, strmangle.SetComplement(recordKeywordPrimaryKeyColumns, recordKeywordColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*RecordKeyword{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRecordKeywords(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.RecordID != first.RecordID {
			t.Error("foreign key was wrong value", a.RecordID, first.RecordID)
		}
		if a.RecordID != second.RecordID {
			t.Error("foreign key was wrong value", a.RecordID, second.RecordID)
		}

		if first.R.Record != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Record != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.RecordKeywords[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.RecordKeywords[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RecordKeywords().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testRecordToManyAddOpReplies(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Record
	var b, c, d, e Reply

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recordDBTypes, false, strmangle.SetComplement(recordPrimaryKeyColumns, recordColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Reply{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, replyDBTypes, false, strmangle.SetComplement(replyPrimaryKeyColumns, replyColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Reply{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddReplies(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.RecordID != first.RecordID {
			t.Error("foreign key was wrong value", a.RecordID, first.RecordID)
		}
		if a.RecordID != second.RecordID {
			t.Error("foreign key was wrong value", a.RecordID, second.RecordID)
		}

		if first.R.Record != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Record != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Replies[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Replies[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Replies().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testRecordToOneMemberUsingMember(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Record
	var foreign Member

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, recordDBTypes, false, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, memberDBTypes, false, memberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Member struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.MemberID = foreign.MemberID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Member().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.MemberID != foreign.MemberID {
		t.Errorf("want: %v, got %v", foreign.MemberID, check.MemberID)
	}

	ranAfterSelectHook := false
	AddMemberHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Member) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := RecordSlice{&local}
	if err = local.L.LoadMember(ctx, tx, false, (*[]*Record)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Member == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Member = nil
	if err = local.L.LoadMember(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Member == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testRecordToOneMediaFileUsingMediaFile(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Record
	var foreign MediaFile

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, recordDBTypes, true, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, mediaFileDBTypes, false, mediaFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MediaFile struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.MediaFileID, foreign.MediaFileID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.MediaFile().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.MediaFileID, foreign.MediaFileID) {
		t.Errorf("want: %v, got %v", foreign.MediaFileID, check.MediaFileID)
	}

	ranAfterSelectHook := false
	AddMediaFileHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *MediaFile) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := RecordSlice{&local}
	if err = local.L.LoadMediaFile(ctx, tx, false, (*[]*Record)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.MediaFile == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.MediaFile = nil
	if err = local.L.LoadMediaFile(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.MediaFile == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testRecordToOneSetOpMemberUsingMember(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Record
	var b, c Member

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recordDBTypes, false, strmangle.SetComplement(recordPrimaryKeyColumns, recordColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, memberDBTypes, false, strmangle.SetComplement(memberPrimaryKeyColumns, memberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, memberDBTypes, false, strmangle.SetComplement(memberPrimaryKeyColumns, memberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Member{&b, &c} {
		err = a.SetMember(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Member != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Records[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.MemberID != x.MemberID {
			t.Error("foreign key was wrong value", a.MemberID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.MemberID))
		reflect.Indirect(reflect.ValueOf(&a.MemberID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.MemberID != x.MemberID {
			t.Error("foreign key was wrong value", a.MemberID, x.MemberID)
		}
	}
}
func testRecordToOneSetOpMediaFileUsingMediaFile(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Record
	var b, c MediaFile

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recordDBTypes, false, strmangle.SetComplement(recordPrimaryKeyColumns, recordColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mediaFileDBTypes, false, strmangle.SetComplement(mediaFilePrimaryKeyColumns, mediaFileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, mediaFileDBTypes, false, strmangle.SetComplement(mediaFilePrimaryKeyColumns, mediaFileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*MediaFile{&b, &c} {
		err = a.SetMediaFile(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.MediaFile != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Records[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.MediaFileID, x.MediaFileID) {
			t.Error("foreign key was wrong value", a.MediaFileID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.MediaFileID))
		reflect.Indirect(reflect.ValueOf(&a.MediaFileID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.MediaFileID, x.MediaFileID) {
			t.Error("foreign key was wrong value", a.MediaFileID, x.MediaFileID)
		}
	}
}

func testRecordToOneRemoveOpMediaFileUsingMediaFile(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Record
	var b MediaFile

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recordDBTypes, false, strmangle.SetComplement(recordPrimaryKeyColumns, recordColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mediaFileDBTypes, false, strmangle.SetComplement(mediaFilePrimaryKeyColumns, mediaFileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetMediaFile(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveMediaFile(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.MediaFile().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.MediaFile != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.MediaFileID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Records) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testRecordsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Record{}
	if err = randomize.Struct(seed, o, recordDBTypes, true, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRecordsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Record{}
	if err = randomize.Struct(seed, o, recordDBTypes, true, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RecordSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRecordsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Record{}
	if err = randomize.Struct(seed, o, recordDBTypes, true, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Records().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	recordDBTypes = map[string]string{`RecordID`: `int`, `MemberID`: `varchar`, `RecordComment`: `varchar`, `RecordCreatedAt`: `datetime`, `MediaFileID`: `char`, `RecordLocationY`: `float`, `RecordLocationX`: `float`, `RecordIsOpen`: `tinyint`, `RecordShareTo`: `varchar`, `RecordShareAccepted`: `tinyint`}
	_             = bytes.MinRead
)

func testRecordsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(recordPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(recordAllColumns) == len(recordPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Record{}
	if err = randomize.Struct(seed, o, recordDBTypes, true, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Records().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, recordDBTypes, true, recordPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRecordsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(recordAllColumns) == len(recordPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Record{}
	if err = randomize.Struct(seed, o, recordDBTypes, true, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Records().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, recordDBTypes, true, recordPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(recordAllColumns, recordPrimaryKeyColumns) {
		fields = recordAllColumns
	} else {
		fields = strmangle.SetComplement(
			recordAllColumns,
			recordPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RecordSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRecordsUpsert(t *testing.T) {
	t.Parallel()

	if len(recordAllColumns) == len(recordPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLRecordUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Record{}
	if err = randomize.Struct(seed, &o, recordDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Record: %s", err)
	}

	count, err := Records().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, recordDBTypes, false, recordPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Record: %s", err)
	}

	count, err = Records().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
