// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// NotificationType is an object representing the database table.
type NotificationType struct {
	NotificationTypeID      string      `boil:"notification_type_id" json:"notification_type_id" toml:"notification_type_id" yaml:"notification_type_id"`
	NotificationTypeComment null.String `boil:"notification_type_comment" json:"notification_type_comment,omitempty" toml:"notification_type_comment" yaml:"notification_type_comment,omitempty"`

	R *notificationTypeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L notificationTypeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NotificationTypeColumns = struct {
	NotificationTypeID      string
	NotificationTypeComment string
}{
	NotificationTypeID:      "notification_type_id",
	NotificationTypeComment: "notification_type_comment",
}

var NotificationTypeTableColumns = struct {
	NotificationTypeID      string
	NotificationTypeComment string
}{
	NotificationTypeID:      "notification_type.notification_type_id",
	NotificationTypeComment: "notification_type.notification_type_comment",
}

// Generated where

var NotificationTypeWhere = struct {
	NotificationTypeID      whereHelperstring
	NotificationTypeComment whereHelpernull_String
}{
	NotificationTypeID:      whereHelperstring{field: "`notification_type`.`notification_type_id`"},
	NotificationTypeComment: whereHelpernull_String{field: "`notification_type`.`notification_type_comment`"},
}

// NotificationTypeRels is where relationship names are stored.
var NotificationTypeRels = struct {
	Notifications string
}{
	Notifications: "Notifications",
}

// notificationTypeR is where relationships are stored.
type notificationTypeR struct {
	Notifications NotificationSlice `boil:"Notifications" json:"Notifications" toml:"Notifications" yaml:"Notifications"`
}

// NewStruct creates a new relationship struct
func (*notificationTypeR) NewStruct() *notificationTypeR {
	return &notificationTypeR{}
}

func (r *notificationTypeR) GetNotifications() NotificationSlice {
	if r == nil {
		return nil
	}
	return r.Notifications
}

// notificationTypeL is where Load methods for each relationship are stored.
type notificationTypeL struct{}

var (
	notificationTypeAllColumns            = []string{"notification_type_id", "notification_type_comment"}
	notificationTypeColumnsWithoutDefault = []string{"notification_type_id", "notification_type_comment"}
	notificationTypeColumnsWithDefault    = []string{}
	notificationTypePrimaryKeyColumns     = []string{"notification_type_id"}
	notificationTypeGeneratedColumns      = []string{}
)

type (
	// NotificationTypeSlice is an alias for a slice of pointers to NotificationType.
	// This should almost always be used instead of []NotificationType.
	NotificationTypeSlice []*NotificationType
	// NotificationTypeHook is the signature for custom NotificationType hook methods
	NotificationTypeHook func(context.Context, boil.ContextExecutor, *NotificationType) error

	notificationTypeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	notificationTypeType                 = reflect.TypeOf(&NotificationType{})
	notificationTypeMapping              = queries.MakeStructMapping(notificationTypeType)
	notificationTypePrimaryKeyMapping, _ = queries.BindMapping(notificationTypeType, notificationTypeMapping, notificationTypePrimaryKeyColumns)
	notificationTypeInsertCacheMut       sync.RWMutex
	notificationTypeInsertCache          = make(map[string]insertCache)
	notificationTypeUpdateCacheMut       sync.RWMutex
	notificationTypeUpdateCache          = make(map[string]updateCache)
	notificationTypeUpsertCacheMut       sync.RWMutex
	notificationTypeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var notificationTypeAfterSelectMu sync.Mutex
var notificationTypeAfterSelectHooks []NotificationTypeHook

var notificationTypeBeforeInsertMu sync.Mutex
var notificationTypeBeforeInsertHooks []NotificationTypeHook
var notificationTypeAfterInsertMu sync.Mutex
var notificationTypeAfterInsertHooks []NotificationTypeHook

var notificationTypeBeforeUpdateMu sync.Mutex
var notificationTypeBeforeUpdateHooks []NotificationTypeHook
var notificationTypeAfterUpdateMu sync.Mutex
var notificationTypeAfterUpdateHooks []NotificationTypeHook

var notificationTypeBeforeDeleteMu sync.Mutex
var notificationTypeBeforeDeleteHooks []NotificationTypeHook
var notificationTypeAfterDeleteMu sync.Mutex
var notificationTypeAfterDeleteHooks []NotificationTypeHook

var notificationTypeBeforeUpsertMu sync.Mutex
var notificationTypeBeforeUpsertHooks []NotificationTypeHook
var notificationTypeAfterUpsertMu sync.Mutex
var notificationTypeAfterUpsertHooks []NotificationTypeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *NotificationType) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationTypeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *NotificationType) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationTypeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *NotificationType) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationTypeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *NotificationType) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationTypeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *NotificationType) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationTypeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *NotificationType) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationTypeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *NotificationType) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationTypeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *NotificationType) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationTypeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *NotificationType) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationTypeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddNotificationTypeHook registers your hook function for all future operations.
func AddNotificationTypeHook(hookPoint boil.HookPoint, notificationTypeHook NotificationTypeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		notificationTypeAfterSelectMu.Lock()
		notificationTypeAfterSelectHooks = append(notificationTypeAfterSelectHooks, notificationTypeHook)
		notificationTypeAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		notificationTypeBeforeInsertMu.Lock()
		notificationTypeBeforeInsertHooks = append(notificationTypeBeforeInsertHooks, notificationTypeHook)
		notificationTypeBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		notificationTypeAfterInsertMu.Lock()
		notificationTypeAfterInsertHooks = append(notificationTypeAfterInsertHooks, notificationTypeHook)
		notificationTypeAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		notificationTypeBeforeUpdateMu.Lock()
		notificationTypeBeforeUpdateHooks = append(notificationTypeBeforeUpdateHooks, notificationTypeHook)
		notificationTypeBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		notificationTypeAfterUpdateMu.Lock()
		notificationTypeAfterUpdateHooks = append(notificationTypeAfterUpdateHooks, notificationTypeHook)
		notificationTypeAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		notificationTypeBeforeDeleteMu.Lock()
		notificationTypeBeforeDeleteHooks = append(notificationTypeBeforeDeleteHooks, notificationTypeHook)
		notificationTypeBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		notificationTypeAfterDeleteMu.Lock()
		notificationTypeAfterDeleteHooks = append(notificationTypeAfterDeleteHooks, notificationTypeHook)
		notificationTypeAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		notificationTypeBeforeUpsertMu.Lock()
		notificationTypeBeforeUpsertHooks = append(notificationTypeBeforeUpsertHooks, notificationTypeHook)
		notificationTypeBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		notificationTypeAfterUpsertMu.Lock()
		notificationTypeAfterUpsertHooks = append(notificationTypeAfterUpsertHooks, notificationTypeHook)
		notificationTypeAfterUpsertMu.Unlock()
	}
}

// OneG returns a single notificationType record from the query using the global executor.
func (q notificationTypeQuery) OneG(ctx context.Context) (*NotificationType, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single notificationType record from the query.
func (q notificationTypeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*NotificationType, error) {
	o := &NotificationType{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for notification_type")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all NotificationType records from the query using the global executor.
func (q notificationTypeQuery) AllG(ctx context.Context) (NotificationTypeSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all NotificationType records from the query.
func (q notificationTypeQuery) All(ctx context.Context, exec boil.ContextExecutor) (NotificationTypeSlice, error) {
	var o []*NotificationType

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to NotificationType slice")
	}

	if len(notificationTypeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all NotificationType records in the query using the global executor
func (q notificationTypeQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all NotificationType records in the query.
func (q notificationTypeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count notification_type rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q notificationTypeQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q notificationTypeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if notification_type exists")
	}

	return count > 0, nil
}

// Notifications retrieves all the notification's Notifications with an executor.
func (o *NotificationType) Notifications(mods ...qm.QueryMod) notificationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`notification`.`notification_type_id`=?", o.NotificationTypeID),
	)

	return Notifications(queryMods...)
}

// LoadNotifications allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (notificationTypeL) LoadNotifications(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNotificationType interface{}, mods queries.Applicator) error {
	var slice []*NotificationType
	var object *NotificationType

	if singular {
		var ok bool
		object, ok = maybeNotificationType.(*NotificationType)
		if !ok {
			object = new(NotificationType)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeNotificationType)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeNotificationType))
			}
		}
	} else {
		s, ok := maybeNotificationType.(*[]*NotificationType)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeNotificationType)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeNotificationType))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &notificationTypeR{}
		}
		args[object.NotificationTypeID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &notificationTypeR{}
			}
			args[obj.NotificationTypeID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`notification`),
		qm.WhereIn(`notification.notification_type_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load notification")
	}

	var resultSlice []*Notification
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice notification")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on notification")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for notification")
	}

	if len(notificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Notifications = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &notificationR{}
			}
			foreign.R.NotificationType = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.NotificationTypeID == foreign.NotificationTypeID {
				local.R.Notifications = append(local.R.Notifications, foreign)
				if foreign.R == nil {
					foreign.R = &notificationR{}
				}
				foreign.R.NotificationType = local
				break
			}
		}
	}

	return nil
}

// AddNotificationsG adds the given related objects to the existing relationships
// of the notification_type, optionally inserting them as new records.
// Appends related to o.R.Notifications.
// Sets related.R.NotificationType appropriately.
// Uses the global database handle.
func (o *NotificationType) AddNotificationsG(ctx context.Context, insert bool, related ...*Notification) error {
	return o.AddNotifications(ctx, boil.GetContextDB(), insert, related...)
}

// AddNotifications adds the given related objects to the existing relationships
// of the notification_type, optionally inserting them as new records.
// Appends related to o.R.Notifications.
// Sets related.R.NotificationType appropriately.
func (o *NotificationType) AddNotifications(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Notification) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.NotificationTypeID = o.NotificationTypeID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `notification` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"notification_type_id"}),
				strmangle.WhereClause("`", "`", 0, notificationPrimaryKeyColumns),
			)
			values := []interface{}{o.NotificationTypeID, rel.NotificationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.NotificationTypeID = o.NotificationTypeID
		}
	}

	if o.R == nil {
		o.R = &notificationTypeR{
			Notifications: related,
		}
	} else {
		o.R.Notifications = append(o.R.Notifications, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &notificationR{
				NotificationType: o,
			}
		} else {
			rel.R.NotificationType = o
		}
	}
	return nil
}

// NotificationTypes retrieves all the records using an executor.
func NotificationTypes(mods ...qm.QueryMod) notificationTypeQuery {
	mods = append(mods, qm.From("`notification_type`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`notification_type`.*"})
	}

	return notificationTypeQuery{q}
}

// FindNotificationTypeG retrieves a single record by ID.
func FindNotificationTypeG(ctx context.Context, notificationTypeID string, selectCols ...string) (*NotificationType, error) {
	return FindNotificationType(ctx, boil.GetContextDB(), notificationTypeID, selectCols...)
}

// FindNotificationType retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNotificationType(ctx context.Context, exec boil.ContextExecutor, notificationTypeID string, selectCols ...string) (*NotificationType, error) {
	notificationTypeObj := &NotificationType{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `notification_type` where `notification_type_id`=?", sel,
	)

	q := queries.Raw(query, notificationTypeID)

	err := q.Bind(ctx, exec, notificationTypeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from notification_type")
	}

	if err = notificationTypeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return notificationTypeObj, err
	}

	return notificationTypeObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *NotificationType) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *NotificationType) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no notification_type provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(notificationTypeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	notificationTypeInsertCacheMut.RLock()
	cache, cached := notificationTypeInsertCache[key]
	notificationTypeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			notificationTypeAllColumns,
			notificationTypeColumnsWithDefault,
			notificationTypeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(notificationTypeType, notificationTypeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(notificationTypeType, notificationTypeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `notification_type` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `notification_type` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `notification_type` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, notificationTypePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into notification_type")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.NotificationTypeID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for notification_type")
	}

CacheNoHooks:
	if !cached {
		notificationTypeInsertCacheMut.Lock()
		notificationTypeInsertCache[key] = cache
		notificationTypeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single NotificationType record using the global executor.
// See Update for more documentation.
func (o *NotificationType) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the NotificationType.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *NotificationType) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	notificationTypeUpdateCacheMut.RLock()
	cache, cached := notificationTypeUpdateCache[key]
	notificationTypeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			notificationTypeAllColumns,
			notificationTypePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update notification_type, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `notification_type` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, notificationTypePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(notificationTypeType, notificationTypeMapping, append(wl, notificationTypePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update notification_type row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for notification_type")
	}

	if !cached {
		notificationTypeUpdateCacheMut.Lock()
		notificationTypeUpdateCache[key] = cache
		notificationTypeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q notificationTypeQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q notificationTypeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for notification_type")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for notification_type")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o NotificationTypeSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NotificationTypeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notificationTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `notification_type` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, notificationTypePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in notificationType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all notificationType")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *NotificationType) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLNotificationTypeUniqueColumns = []string{
	"notification_type_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *NotificationType) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no notification_type provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(notificationTypeColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLNotificationTypeUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	notificationTypeUpsertCacheMut.RLock()
	cache, cached := notificationTypeUpsertCache[key]
	notificationTypeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			notificationTypeAllColumns,
			notificationTypeColumnsWithDefault,
			notificationTypeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			notificationTypeAllColumns,
			notificationTypePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert notification_type, could not build update column list")
		}

		ret := strmangle.SetComplement(notificationTypeAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`notification_type`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `notification_type` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(notificationTypeType, notificationTypeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(notificationTypeType, notificationTypeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for notification_type")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(notificationTypeType, notificationTypeMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for notification_type")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for notification_type")
	}

CacheNoHooks:
	if !cached {
		notificationTypeUpsertCacheMut.Lock()
		notificationTypeUpsertCache[key] = cache
		notificationTypeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single NotificationType record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *NotificationType) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single NotificationType record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *NotificationType) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no NotificationType provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), notificationTypePrimaryKeyMapping)
	sql := "DELETE FROM `notification_type` WHERE `notification_type_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from notification_type")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for notification_type")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q notificationTypeQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q notificationTypeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no notificationTypeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from notification_type")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for notification_type")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o NotificationTypeSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NotificationTypeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(notificationTypeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notificationTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `notification_type` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, notificationTypePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from notificationType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for notification_type")
	}

	if len(notificationTypeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *NotificationType) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no NotificationType provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *NotificationType) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindNotificationType(ctx, exec, o.NotificationTypeID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NotificationTypeSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty NotificationTypeSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NotificationTypeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NotificationTypeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notificationTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `notification_type`.* FROM `notification_type` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, notificationTypePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in NotificationTypeSlice")
	}

	*o = slice

	return nil
}

// NotificationTypeExistsG checks if the NotificationType row exists.
func NotificationTypeExistsG(ctx context.Context, notificationTypeID string) (bool, error) {
	return NotificationTypeExists(ctx, boil.GetContextDB(), notificationTypeID)
}

// NotificationTypeExists checks if the NotificationType row exists.
func NotificationTypeExists(ctx context.Context, exec boil.ContextExecutor, notificationTypeID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `notification_type` where `notification_type_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, notificationTypeID)
	}
	row := exec.QueryRowContext(ctx, sql, notificationTypeID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if notification_type exists")
	}

	return exists, nil
}

// Exists checks if the NotificationType row exists.
func (o *NotificationType) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return NotificationTypeExists(ctx, exec, o.NotificationTypeID)
}
