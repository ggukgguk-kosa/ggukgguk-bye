// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMembers(t *testing.T) {
	t.Parallel()

	query := Members()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMembersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Member{}
	if err = randomize.Struct(seed, o, memberDBTypes, true, memberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Member struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Members().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMembersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Member{}
	if err = randomize.Struct(seed, o, memberDBTypes, true, memberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Member struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Members().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Members().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMembersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Member{}
	if err = randomize.Struct(seed, o, memberDBTypes, true, memberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Member struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MemberSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Members().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMembersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Member{}
	if err = randomize.Struct(seed, o, memberDBTypes, true, memberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Member struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MemberExists(ctx, tx, o.MemberID)
	if err != nil {
		t.Errorf("Unable to check if Member exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MemberExists to return true, but got false.")
	}
}

func testMembersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Member{}
	if err = randomize.Struct(seed, o, memberDBTypes, true, memberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Member struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	memberFound, err := FindMember(ctx, tx, o.MemberID)
	if err != nil {
		t.Error(err)
	}

	if memberFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMembersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Member{}
	if err = randomize.Struct(seed, o, memberDBTypes, true, memberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Member struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Members().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testMembersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Member{}
	if err = randomize.Struct(seed, o, memberDBTypes, true, memberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Member struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Members().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMembersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	memberOne := &Member{}
	memberTwo := &Member{}
	if err = randomize.Struct(seed, memberOne, memberDBTypes, false, memberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Member struct: %s", err)
	}
	if err = randomize.Struct(seed, memberTwo, memberDBTypes, false, memberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Member struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = memberOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = memberTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Members().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMembersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	memberOne := &Member{}
	memberTwo := &Member{}
	if err = randomize.Struct(seed, memberOne, memberDBTypes, false, memberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Member struct: %s", err)
	}
	if err = randomize.Struct(seed, memberTwo, memberDBTypes, false, memberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Member struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = memberOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = memberTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Members().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func memberBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Member) error {
	*o = Member{}
	return nil
}

func memberAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Member) error {
	*o = Member{}
	return nil
}

func memberAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Member) error {
	*o = Member{}
	return nil
}

func memberBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Member) error {
	*o = Member{}
	return nil
}

func memberAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Member) error {
	*o = Member{}
	return nil
}

func memberBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Member) error {
	*o = Member{}
	return nil
}

func memberAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Member) error {
	*o = Member{}
	return nil
}

func memberBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Member) error {
	*o = Member{}
	return nil
}

func memberAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Member) error {
	*o = Member{}
	return nil
}

func testMembersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Member{}
	o := &Member{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, memberDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Member object: %s", err)
	}

	AddMemberHook(boil.BeforeInsertHook, memberBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	memberBeforeInsertHooks = []MemberHook{}

	AddMemberHook(boil.AfterInsertHook, memberAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	memberAfterInsertHooks = []MemberHook{}

	AddMemberHook(boil.AfterSelectHook, memberAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	memberAfterSelectHooks = []MemberHook{}

	AddMemberHook(boil.BeforeUpdateHook, memberBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	memberBeforeUpdateHooks = []MemberHook{}

	AddMemberHook(boil.AfterUpdateHook, memberAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	memberAfterUpdateHooks = []MemberHook{}

	AddMemberHook(boil.BeforeDeleteHook, memberBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	memberBeforeDeleteHooks = []MemberHook{}

	AddMemberHook(boil.AfterDeleteHook, memberAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	memberAfterDeleteHooks = []MemberHook{}

	AddMemberHook(boil.BeforeUpsertHook, memberBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	memberBeforeUpsertHooks = []MemberHook{}

	AddMemberHook(boil.AfterUpsertHook, memberAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	memberAfterUpsertHooks = []MemberHook{}
}

func testMembersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Member{}
	if err = randomize.Struct(seed, o, memberDBTypes, true, memberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Member struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Members().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMembersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Member{}
	if err = randomize.Struct(seed, o, memberDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Member struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(memberColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Members().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMemberToManyDiaries(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Member
	var b, c Diary

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, memberDBTypes, true, memberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Member struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, diaryDBTypes, false, diaryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, diaryDBTypes, false, diaryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.MemberID = a.MemberID
	c.MemberID = a.MemberID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Diaries().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.MemberID == b.MemberID {
			bFound = true
		}
		if v.MemberID == c.MemberID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MemberSlice{&a}
	if err = a.L.LoadDiaries(ctx, tx, false, (*[]*Member)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Diaries); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Diaries = nil
	if err = a.L.LoadDiaries(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Diaries); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMemberToManyMember1Friends(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Member
	var b, c Friend

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, memberDBTypes, true, memberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Member struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, friendDBTypes, false, friendColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, friendDBTypes, false, friendColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.Member1ID = a.MemberID
	c.Member1ID = a.MemberID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Member1Friends().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.Member1ID == b.Member1ID {
			bFound = true
		}
		if v.Member1ID == c.Member1ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MemberSlice{&a}
	if err = a.L.LoadMember1Friends(ctx, tx, false, (*[]*Member)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Member1Friends); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Member1Friends = nil
	if err = a.L.LoadMember1Friends(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Member1Friends); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMemberToManyMember2Friends(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Member
	var b, c Friend

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, memberDBTypes, true, memberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Member struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, friendDBTypes, false, friendColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, friendDBTypes, false, friendColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.Member2ID = a.MemberID
	c.Member2ID = a.MemberID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Member2Friends().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.Member2ID == b.Member2ID {
			bFound = true
		}
		if v.Member2ID == c.Member2ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MemberSlice{&a}
	if err = a.L.LoadMember2Friends(ctx, tx, false, (*[]*Member)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Member2Friends); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Member2Friends = nil
	if err = a.L.LoadMember2Friends(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Member2Friends); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMemberToManyFromMemberFriendRequests(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Member
	var b, c FriendRequest

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, memberDBTypes, true, memberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Member struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, friendRequestDBTypes, false, friendRequestColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, friendRequestDBTypes, false, friendRequestColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.FromMemberID = a.MemberID
	c.FromMemberID = a.MemberID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.FromMemberFriendRequests().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.FromMemberID == b.FromMemberID {
			bFound = true
		}
		if v.FromMemberID == c.FromMemberID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MemberSlice{&a}
	if err = a.L.LoadFromMemberFriendRequests(ctx, tx, false, (*[]*Member)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FromMemberFriendRequests); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.FromMemberFriendRequests = nil
	if err = a.L.LoadFromMemberFriendRequests(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FromMemberFriendRequests); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMemberToManyToMemberFriendRequests(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Member
	var b, c FriendRequest

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, memberDBTypes, true, memberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Member struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, friendRequestDBTypes, false, friendRequestColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, friendRequestDBTypes, false, friendRequestColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ToMemberID = a.MemberID
	c.ToMemberID = a.MemberID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ToMemberFriendRequests().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ToMemberID == b.ToMemberID {
			bFound = true
		}
		if v.ToMemberID == c.ToMemberID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MemberSlice{&a}
	if err = a.L.LoadToMemberFriendRequests(ctx, tx, false, (*[]*Member)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ToMemberFriendRequests); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ToMemberFriendRequests = nil
	if err = a.L.LoadToMemberFriendRequests(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ToMemberFriendRequests); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMemberToManyReceiverNotifications(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Member
	var b, c Notification

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, memberDBTypes, true, memberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Member struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, notificationDBTypes, false, notificationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, notificationDBTypes, false, notificationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ReceiverID = a.MemberID
	c.ReceiverID = a.MemberID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ReceiverNotifications().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ReceiverID == b.ReceiverID {
			bFound = true
		}
		if v.ReceiverID == c.ReceiverID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MemberSlice{&a}
	if err = a.L.LoadReceiverNotifications(ctx, tx, false, (*[]*Member)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ReceiverNotifications); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ReceiverNotifications = nil
	if err = a.L.LoadReceiverNotifications(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ReceiverNotifications); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMemberToManyRecords(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Member
	var b, c Record

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, memberDBTypes, true, memberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Member struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, recordDBTypes, false, recordColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, recordDBTypes, false, recordColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.MemberID = a.MemberID
	c.MemberID = a.MemberID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Records().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.MemberID == b.MemberID {
			bFound = true
		}
		if v.MemberID == c.MemberID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MemberSlice{&a}
	if err = a.L.LoadRecords(ctx, tx, false, (*[]*Member)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Records); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Records = nil
	if err = a.L.LoadRecords(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Records); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMemberToManyRecordTests(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Member
	var b, c RecordTest

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, memberDBTypes, true, memberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Member struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, recordTestDBTypes, false, recordTestColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, recordTestDBTypes, false, recordTestColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.MemberID = a.MemberID
	c.MemberID = a.MemberID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.RecordTests().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.MemberID == b.MemberID {
			bFound = true
		}
		if v.MemberID == c.MemberID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MemberSlice{&a}
	if err = a.L.LoadRecordTests(ctx, tx, false, (*[]*Member)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RecordTests); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.RecordTests = nil
	if err = a.L.LoadRecordTests(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RecordTests); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMemberToManyReplies(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Member
	var b, c Reply

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, memberDBTypes, true, memberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Member struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, replyDBTypes, false, replyColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, replyDBTypes, false, replyColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.MemberID = a.MemberID
	c.MemberID = a.MemberID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Replies().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.MemberID == b.MemberID {
			bFound = true
		}
		if v.MemberID == c.MemberID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MemberSlice{&a}
	if err = a.L.LoadReplies(ctx, tx, false, (*[]*Member)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Replies); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Replies = nil
	if err = a.L.LoadReplies(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Replies); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMemberToManyAddOpDiaries(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Member
	var b, c, d, e Diary

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, memberDBTypes, false, strmangle.SetComplement(memberPrimaryKeyColumns, memberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Diary{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, diaryDBTypes, false, strmangle.SetComplement(diaryPrimaryKeyColumns, diaryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Diary{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDiaries(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.MemberID != first.MemberID {
			t.Error("foreign key was wrong value", a.MemberID, first.MemberID)
		}
		if a.MemberID != second.MemberID {
			t.Error("foreign key was wrong value", a.MemberID, second.MemberID)
		}

		if first.R.Member != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Member != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Diaries[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Diaries[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Diaries().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testMemberToManyAddOpMember1Friends(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Member
	var b, c, d, e Friend

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, memberDBTypes, false, strmangle.SetComplement(memberPrimaryKeyColumns, memberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Friend{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, friendDBTypes, false, strmangle.SetComplement(friendPrimaryKeyColumns, friendColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Friend{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMember1Friends(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.MemberID != first.Member1ID {
			t.Error("foreign key was wrong value", a.MemberID, first.Member1ID)
		}
		if a.MemberID != second.Member1ID {
			t.Error("foreign key was wrong value", a.MemberID, second.Member1ID)
		}

		if first.R.Member1 != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Member1 != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Member1Friends[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Member1Friends[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Member1Friends().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testMemberToManyAddOpMember2Friends(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Member
	var b, c, d, e Friend

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, memberDBTypes, false, strmangle.SetComplement(memberPrimaryKeyColumns, memberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Friend{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, friendDBTypes, false, strmangle.SetComplement(friendPrimaryKeyColumns, friendColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Friend{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMember2Friends(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.MemberID != first.Member2ID {
			t.Error("foreign key was wrong value", a.MemberID, first.Member2ID)
		}
		if a.MemberID != second.Member2ID {
			t.Error("foreign key was wrong value", a.MemberID, second.Member2ID)
		}

		if first.R.Member2 != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Member2 != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Member2Friends[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Member2Friends[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Member2Friends().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testMemberToManyAddOpFromMemberFriendRequests(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Member
	var b, c, d, e FriendRequest

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, memberDBTypes, false, strmangle.SetComplement(memberPrimaryKeyColumns, memberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*FriendRequest{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, friendRequestDBTypes, false, strmangle.SetComplement(friendRequestPrimaryKeyColumns, friendRequestColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*FriendRequest{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddFromMemberFriendRequests(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.MemberID != first.FromMemberID {
			t.Error("foreign key was wrong value", a.MemberID, first.FromMemberID)
		}
		if a.MemberID != second.FromMemberID {
			t.Error("foreign key was wrong value", a.MemberID, second.FromMemberID)
		}

		if first.R.FromMember != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.FromMember != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.FromMemberFriendRequests[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.FromMemberFriendRequests[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.FromMemberFriendRequests().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testMemberToManyAddOpToMemberFriendRequests(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Member
	var b, c, d, e FriendRequest

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, memberDBTypes, false, strmangle.SetComplement(memberPrimaryKeyColumns, memberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*FriendRequest{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, friendRequestDBTypes, false, strmangle.SetComplement(friendRequestPrimaryKeyColumns, friendRequestColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*FriendRequest{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddToMemberFriendRequests(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.MemberID != first.ToMemberID {
			t.Error("foreign key was wrong value", a.MemberID, first.ToMemberID)
		}
		if a.MemberID != second.ToMemberID {
			t.Error("foreign key was wrong value", a.MemberID, second.ToMemberID)
		}

		if first.R.ToMember != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ToMember != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ToMemberFriendRequests[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ToMemberFriendRequests[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ToMemberFriendRequests().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testMemberToManyAddOpReceiverNotifications(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Member
	var b, c, d, e Notification

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, memberDBTypes, false, strmangle.SetComplement(memberPrimaryKeyColumns, memberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Notification{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, notificationDBTypes, false, strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Notification{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddReceiverNotifications(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.MemberID != first.ReceiverID {
			t.Error("foreign key was wrong value", a.MemberID, first.ReceiverID)
		}
		if a.MemberID != second.ReceiverID {
			t.Error("foreign key was wrong value", a.MemberID, second.ReceiverID)
		}

		if first.R.Receiver != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Receiver != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ReceiverNotifications[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ReceiverNotifications[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ReceiverNotifications().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testMemberToManyAddOpRecords(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Member
	var b, c, d, e Record

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, memberDBTypes, false, strmangle.SetComplement(memberPrimaryKeyColumns, memberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Record{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, recordDBTypes, false, strmangle.SetComplement(recordPrimaryKeyColumns, recordColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Record{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRecords(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.MemberID != first.MemberID {
			t.Error("foreign key was wrong value", a.MemberID, first.MemberID)
		}
		if a.MemberID != second.MemberID {
			t.Error("foreign key was wrong value", a.MemberID, second.MemberID)
		}

		if first.R.Member != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Member != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Records[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Records[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Records().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testMemberToManyAddOpRecordTests(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Member
	var b, c, d, e RecordTest

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, memberDBTypes, false, strmangle.SetComplement(memberPrimaryKeyColumns, memberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RecordTest{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, recordTestDBTypes, false, strmangle.SetComplement(recordTestPrimaryKeyColumns, recordTestColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*RecordTest{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRecordTests(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.MemberID != first.MemberID {
			t.Error("foreign key was wrong value", a.MemberID, first.MemberID)
		}
		if a.MemberID != second.MemberID {
			t.Error("foreign key was wrong value", a.MemberID, second.MemberID)
		}

		if first.R.Member != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Member != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.RecordTests[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.RecordTests[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RecordTests().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testMemberToManyAddOpReplies(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Member
	var b, c, d, e Reply

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, memberDBTypes, false, strmangle.SetComplement(memberPrimaryKeyColumns, memberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Reply{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, replyDBTypes, false, strmangle.SetComplement(replyPrimaryKeyColumns, replyColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Reply{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddReplies(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.MemberID != first.MemberID {
			t.Error("foreign key was wrong value", a.MemberID, first.MemberID)
		}
		if a.MemberID != second.MemberID {
			t.Error("foreign key was wrong value", a.MemberID, second.MemberID)
		}

		if first.R.Member != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Member != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Replies[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Replies[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Replies().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testMemberToOneMemberSocialTypeUsingMemberSocialMemberSocialType(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Member
	var foreign MemberSocialType

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, memberDBTypes, true, memberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Member struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, memberSocialTypeDBTypes, false, memberSocialTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberSocialType struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.MemberSocial, foreign.MemberSocialID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.MemberSocialMemberSocialType().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.MemberSocialID, foreign.MemberSocialID) {
		t.Errorf("want: %v, got %v", foreign.MemberSocialID, check.MemberSocialID)
	}

	ranAfterSelectHook := false
	AddMemberSocialTypeHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *MemberSocialType) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := MemberSlice{&local}
	if err = local.L.LoadMemberSocialMemberSocialType(ctx, tx, false, (*[]*Member)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.MemberSocialMemberSocialType == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.MemberSocialMemberSocialType = nil
	if err = local.L.LoadMemberSocialMemberSocialType(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.MemberSocialMemberSocialType == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testMemberToOneSetOpMemberSocialTypeUsingMemberSocialMemberSocialType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Member
	var b, c MemberSocialType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, memberDBTypes, false, strmangle.SetComplement(memberPrimaryKeyColumns, memberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, memberSocialTypeDBTypes, false, strmangle.SetComplement(memberSocialTypePrimaryKeyColumns, memberSocialTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, memberSocialTypeDBTypes, false, strmangle.SetComplement(memberSocialTypePrimaryKeyColumns, memberSocialTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*MemberSocialType{&b, &c} {
		err = a.SetMemberSocialMemberSocialType(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.MemberSocialMemberSocialType != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MemberSocialMembers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.MemberSocial, x.MemberSocialID) {
			t.Error("foreign key was wrong value", a.MemberSocial)
		}

		zero := reflect.Zero(reflect.TypeOf(a.MemberSocial))
		reflect.Indirect(reflect.ValueOf(&a.MemberSocial)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.MemberSocial, x.MemberSocialID) {
			t.Error("foreign key was wrong value", a.MemberSocial, x.MemberSocialID)
		}
	}
}

func testMemberToOneRemoveOpMemberSocialTypeUsingMemberSocialMemberSocialType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Member
	var b MemberSocialType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, memberDBTypes, false, strmangle.SetComplement(memberPrimaryKeyColumns, memberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, memberSocialTypeDBTypes, false, strmangle.SetComplement(memberSocialTypePrimaryKeyColumns, memberSocialTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetMemberSocialMemberSocialType(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveMemberSocialMemberSocialType(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.MemberSocialMemberSocialType().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.MemberSocialMemberSocialType != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.MemberSocial) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.MemberSocialMembers) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testMembersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Member{}
	if err = randomize.Struct(seed, o, memberDBTypes, true, memberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Member struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMembersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Member{}
	if err = randomize.Struct(seed, o, memberDBTypes, true, memberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Member struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MemberSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMembersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Member{}
	if err = randomize.Struct(seed, o, memberDBTypes, true, memberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Member struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Members().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	memberDBTypes = map[string]string{`MemberID`: `varchar`, `MemberPW`: `varchar`, `MemberName`: `varchar`, `MemberNickname`: `varchar`, `MemberEmail`: `varchar`, `MemberPhone`: `varchar`, `MemberBirth`: `date`, `MemberCreatedAt`: `datetime`, `MemberActivated`: `tinyint`, `MemberAuthority`: `enum('GUEST','NORMAL','SERVICE_ADMIN','SYSTEM_ADMIN')`, `MemberSocial`: `varchar`, `MemberAllowEmail`: `tinyint`}
	_             = bytes.MinRead
)

func testMembersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(memberPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(memberAllColumns) == len(memberPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Member{}
	if err = randomize.Struct(seed, o, memberDBTypes, true, memberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Member struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Members().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, memberDBTypes, true, memberPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Member struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMembersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(memberAllColumns) == len(memberPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Member{}
	if err = randomize.Struct(seed, o, memberDBTypes, true, memberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Member struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Members().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, memberDBTypes, true, memberPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Member struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(memberAllColumns, memberPrimaryKeyColumns) {
		fields = memberAllColumns
	} else {
		fields = strmangle.SetComplement(
			memberAllColumns,
			memberPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MemberSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMembersUpsert(t *testing.T) {
	t.Parallel()

	if len(memberAllColumns) == len(memberPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLMemberUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Member{}
	if err = randomize.Struct(seed, &o, memberDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Member struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Member: %s", err)
	}

	count, err := Members().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, memberDBTypes, false, memberPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Member struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Member: %s", err)
	}

	count, err = Members().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
