// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMediaFileRecheckRequests(t *testing.T) {
	t.Parallel()

	query := MediaFileRecheckRequests()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMediaFileRecheckRequestsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MediaFileRecheckRequest{}
	if err = randomize.Struct(seed, o, mediaFileRecheckRequestDBTypes, true, mediaFileRecheckRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MediaFileRecheckRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MediaFileRecheckRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMediaFileRecheckRequestsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MediaFileRecheckRequest{}
	if err = randomize.Struct(seed, o, mediaFileRecheckRequestDBTypes, true, mediaFileRecheckRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MediaFileRecheckRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := MediaFileRecheckRequests().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MediaFileRecheckRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMediaFileRecheckRequestsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MediaFileRecheckRequest{}
	if err = randomize.Struct(seed, o, mediaFileRecheckRequestDBTypes, true, mediaFileRecheckRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MediaFileRecheckRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MediaFileRecheckRequestSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MediaFileRecheckRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMediaFileRecheckRequestsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MediaFileRecheckRequest{}
	if err = randomize.Struct(seed, o, mediaFileRecheckRequestDBTypes, true, mediaFileRecheckRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MediaFileRecheckRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MediaFileRecheckRequestExists(ctx, tx, o.MediaFileRecheckRequestID)
	if err != nil {
		t.Errorf("Unable to check if MediaFileRecheckRequest exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MediaFileRecheckRequestExists to return true, but got false.")
	}
}

func testMediaFileRecheckRequestsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MediaFileRecheckRequest{}
	if err = randomize.Struct(seed, o, mediaFileRecheckRequestDBTypes, true, mediaFileRecheckRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MediaFileRecheckRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	mediaFileRecheckRequestFound, err := FindMediaFileRecheckRequest(ctx, tx, o.MediaFileRecheckRequestID)
	if err != nil {
		t.Error(err)
	}

	if mediaFileRecheckRequestFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMediaFileRecheckRequestsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MediaFileRecheckRequest{}
	if err = randomize.Struct(seed, o, mediaFileRecheckRequestDBTypes, true, mediaFileRecheckRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MediaFileRecheckRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = MediaFileRecheckRequests().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testMediaFileRecheckRequestsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MediaFileRecheckRequest{}
	if err = randomize.Struct(seed, o, mediaFileRecheckRequestDBTypes, true, mediaFileRecheckRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MediaFileRecheckRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := MediaFileRecheckRequests().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMediaFileRecheckRequestsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	mediaFileRecheckRequestOne := &MediaFileRecheckRequest{}
	mediaFileRecheckRequestTwo := &MediaFileRecheckRequest{}
	if err = randomize.Struct(seed, mediaFileRecheckRequestOne, mediaFileRecheckRequestDBTypes, false, mediaFileRecheckRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MediaFileRecheckRequest struct: %s", err)
	}
	if err = randomize.Struct(seed, mediaFileRecheckRequestTwo, mediaFileRecheckRequestDBTypes, false, mediaFileRecheckRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MediaFileRecheckRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = mediaFileRecheckRequestOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = mediaFileRecheckRequestTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MediaFileRecheckRequests().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMediaFileRecheckRequestsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	mediaFileRecheckRequestOne := &MediaFileRecheckRequest{}
	mediaFileRecheckRequestTwo := &MediaFileRecheckRequest{}
	if err = randomize.Struct(seed, mediaFileRecheckRequestOne, mediaFileRecheckRequestDBTypes, false, mediaFileRecheckRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MediaFileRecheckRequest struct: %s", err)
	}
	if err = randomize.Struct(seed, mediaFileRecheckRequestTwo, mediaFileRecheckRequestDBTypes, false, mediaFileRecheckRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MediaFileRecheckRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = mediaFileRecheckRequestOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = mediaFileRecheckRequestTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MediaFileRecheckRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func mediaFileRecheckRequestBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *MediaFileRecheckRequest) error {
	*o = MediaFileRecheckRequest{}
	return nil
}

func mediaFileRecheckRequestAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *MediaFileRecheckRequest) error {
	*o = MediaFileRecheckRequest{}
	return nil
}

func mediaFileRecheckRequestAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *MediaFileRecheckRequest) error {
	*o = MediaFileRecheckRequest{}
	return nil
}

func mediaFileRecheckRequestBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MediaFileRecheckRequest) error {
	*o = MediaFileRecheckRequest{}
	return nil
}

func mediaFileRecheckRequestAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MediaFileRecheckRequest) error {
	*o = MediaFileRecheckRequest{}
	return nil
}

func mediaFileRecheckRequestBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MediaFileRecheckRequest) error {
	*o = MediaFileRecheckRequest{}
	return nil
}

func mediaFileRecheckRequestAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MediaFileRecheckRequest) error {
	*o = MediaFileRecheckRequest{}
	return nil
}

func mediaFileRecheckRequestBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MediaFileRecheckRequest) error {
	*o = MediaFileRecheckRequest{}
	return nil
}

func mediaFileRecheckRequestAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MediaFileRecheckRequest) error {
	*o = MediaFileRecheckRequest{}
	return nil
}

func testMediaFileRecheckRequestsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &MediaFileRecheckRequest{}
	o := &MediaFileRecheckRequest{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, mediaFileRecheckRequestDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MediaFileRecheckRequest object: %s", err)
	}

	AddMediaFileRecheckRequestHook(boil.BeforeInsertHook, mediaFileRecheckRequestBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	mediaFileRecheckRequestBeforeInsertHooks = []MediaFileRecheckRequestHook{}

	AddMediaFileRecheckRequestHook(boil.AfterInsertHook, mediaFileRecheckRequestAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	mediaFileRecheckRequestAfterInsertHooks = []MediaFileRecheckRequestHook{}

	AddMediaFileRecheckRequestHook(boil.AfterSelectHook, mediaFileRecheckRequestAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	mediaFileRecheckRequestAfterSelectHooks = []MediaFileRecheckRequestHook{}

	AddMediaFileRecheckRequestHook(boil.BeforeUpdateHook, mediaFileRecheckRequestBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	mediaFileRecheckRequestBeforeUpdateHooks = []MediaFileRecheckRequestHook{}

	AddMediaFileRecheckRequestHook(boil.AfterUpdateHook, mediaFileRecheckRequestAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	mediaFileRecheckRequestAfterUpdateHooks = []MediaFileRecheckRequestHook{}

	AddMediaFileRecheckRequestHook(boil.BeforeDeleteHook, mediaFileRecheckRequestBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	mediaFileRecheckRequestBeforeDeleteHooks = []MediaFileRecheckRequestHook{}

	AddMediaFileRecheckRequestHook(boil.AfterDeleteHook, mediaFileRecheckRequestAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	mediaFileRecheckRequestAfterDeleteHooks = []MediaFileRecheckRequestHook{}

	AddMediaFileRecheckRequestHook(boil.BeforeUpsertHook, mediaFileRecheckRequestBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	mediaFileRecheckRequestBeforeUpsertHooks = []MediaFileRecheckRequestHook{}

	AddMediaFileRecheckRequestHook(boil.AfterUpsertHook, mediaFileRecheckRequestAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	mediaFileRecheckRequestAfterUpsertHooks = []MediaFileRecheckRequestHook{}
}

func testMediaFileRecheckRequestsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MediaFileRecheckRequest{}
	if err = randomize.Struct(seed, o, mediaFileRecheckRequestDBTypes, true, mediaFileRecheckRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MediaFileRecheckRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MediaFileRecheckRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMediaFileRecheckRequestsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MediaFileRecheckRequest{}
	if err = randomize.Struct(seed, o, mediaFileRecheckRequestDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MediaFileRecheckRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(mediaFileRecheckRequestColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := MediaFileRecheckRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMediaFileRecheckRequestToOneRecordUsingMediaFile(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local MediaFileRecheckRequest
	var foreign Record

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, mediaFileRecheckRequestDBTypes, false, mediaFileRecheckRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MediaFileRecheckRequest struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, recordDBTypes, true, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.MediaFileID, foreign.MediaFileID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.MediaFile().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.MediaFileID, foreign.MediaFileID) {
		t.Errorf("want: %v, got %v", foreign.MediaFileID, check.MediaFileID)
	}

	ranAfterSelectHook := false
	AddRecordHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Record) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := MediaFileRecheckRequestSlice{&local}
	if err = local.L.LoadMediaFile(ctx, tx, false, (*[]*MediaFileRecheckRequest)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.MediaFile == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.MediaFile = nil
	if err = local.L.LoadMediaFile(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.MediaFile == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testMediaFileRecheckRequestToOneSetOpRecordUsingMediaFile(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MediaFileRecheckRequest
	var b, c Record

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mediaFileRecheckRequestDBTypes, false, strmangle.SetComplement(mediaFileRecheckRequestPrimaryKeyColumns, mediaFileRecheckRequestColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, recordDBTypes, false, strmangle.SetComplement(recordPrimaryKeyColumns, recordColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, recordDBTypes, false, strmangle.SetComplement(recordPrimaryKeyColumns, recordColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Record{&b, &c} {
		err = a.SetMediaFile(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.MediaFile != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MediaFileMediaFileRecheckRequests[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.MediaFileID, x.MediaFileID) {
			t.Error("foreign key was wrong value", a.MediaFileID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.MediaFileID))
		reflect.Indirect(reflect.ValueOf(&a.MediaFileID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.MediaFileID, x.MediaFileID) {
			t.Error("foreign key was wrong value", a.MediaFileID, x.MediaFileID)
		}
	}
}

func testMediaFileRecheckRequestsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MediaFileRecheckRequest{}
	if err = randomize.Struct(seed, o, mediaFileRecheckRequestDBTypes, true, mediaFileRecheckRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MediaFileRecheckRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMediaFileRecheckRequestsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MediaFileRecheckRequest{}
	if err = randomize.Struct(seed, o, mediaFileRecheckRequestDBTypes, true, mediaFileRecheckRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MediaFileRecheckRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MediaFileRecheckRequestSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMediaFileRecheckRequestsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MediaFileRecheckRequest{}
	if err = randomize.Struct(seed, o, mediaFileRecheckRequestDBTypes, true, mediaFileRecheckRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MediaFileRecheckRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MediaFileRecheckRequests().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	mediaFileRecheckRequestDBTypes = map[string]string{`MediaFileRecheckRequestID`: `int`, `MediaFileID`: `char`, `MediaFileRecheckRequestClaim`: `varchar`, `MediaFileRecheckRequestReply`: `varchar`, `MediaFileRecheckRequestStatus`: `enum('BEFORE','PROCEEDING','REJECTED','PASSED')`, `MediaFileRecheckRequestCreatedAt`: `datetime`}
	_                              = bytes.MinRead
)

func testMediaFileRecheckRequestsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(mediaFileRecheckRequestPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(mediaFileRecheckRequestAllColumns) == len(mediaFileRecheckRequestPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MediaFileRecheckRequest{}
	if err = randomize.Struct(seed, o, mediaFileRecheckRequestDBTypes, true, mediaFileRecheckRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MediaFileRecheckRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MediaFileRecheckRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, mediaFileRecheckRequestDBTypes, true, mediaFileRecheckRequestPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MediaFileRecheckRequest struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMediaFileRecheckRequestsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(mediaFileRecheckRequestAllColumns) == len(mediaFileRecheckRequestPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MediaFileRecheckRequest{}
	if err = randomize.Struct(seed, o, mediaFileRecheckRequestDBTypes, true, mediaFileRecheckRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MediaFileRecheckRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MediaFileRecheckRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, mediaFileRecheckRequestDBTypes, true, mediaFileRecheckRequestPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MediaFileRecheckRequest struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(mediaFileRecheckRequestAllColumns, mediaFileRecheckRequestPrimaryKeyColumns) {
		fields = mediaFileRecheckRequestAllColumns
	} else {
		fields = strmangle.SetComplement(
			mediaFileRecheckRequestAllColumns,
			mediaFileRecheckRequestPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MediaFileRecheckRequestSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMediaFileRecheckRequestsUpsert(t *testing.T) {
	t.Parallel()

	if len(mediaFileRecheckRequestAllColumns) == len(mediaFileRecheckRequestPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLMediaFileRecheckRequestUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := MediaFileRecheckRequest{}
	if err = randomize.Struct(seed, &o, mediaFileRecheckRequestDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MediaFileRecheckRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MediaFileRecheckRequest: %s", err)
	}

	count, err := MediaFileRecheckRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, mediaFileRecheckRequestDBTypes, false, mediaFileRecheckRequestPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MediaFileRecheckRequest struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MediaFileRecheckRequest: %s", err)
	}

	count, err = MediaFileRecheckRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
