// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDiaryKeywords(t *testing.T) {
	t.Parallel()

	query := DiaryKeywords()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDiaryKeywordsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiaryKeyword{}
	if err = randomize.Struct(seed, o, diaryKeywordDBTypes, true, diaryKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DiaryKeywords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDiaryKeywordsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiaryKeyword{}
	if err = randomize.Struct(seed, o, diaryKeywordDBTypes, true, diaryKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DiaryKeywords().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DiaryKeywords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDiaryKeywordsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiaryKeyword{}
	if err = randomize.Struct(seed, o, diaryKeywordDBTypes, true, diaryKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DiaryKeywordSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DiaryKeywords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDiaryKeywordsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiaryKeyword{}
	if err = randomize.Struct(seed, o, diaryKeywordDBTypes, true, diaryKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DiaryKeywordExists(ctx, tx, o.DiaryKeywordID)
	if err != nil {
		t.Errorf("Unable to check if DiaryKeyword exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DiaryKeywordExists to return true, but got false.")
	}
}

func testDiaryKeywordsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiaryKeyword{}
	if err = randomize.Struct(seed, o, diaryKeywordDBTypes, true, diaryKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	diaryKeywordFound, err := FindDiaryKeyword(ctx, tx, o.DiaryKeywordID)
	if err != nil {
		t.Error(err)
	}

	if diaryKeywordFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDiaryKeywordsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiaryKeyword{}
	if err = randomize.Struct(seed, o, diaryKeywordDBTypes, true, diaryKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DiaryKeywords().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDiaryKeywordsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiaryKeyword{}
	if err = randomize.Struct(seed, o, diaryKeywordDBTypes, true, diaryKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DiaryKeywords().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDiaryKeywordsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	diaryKeywordOne := &DiaryKeyword{}
	diaryKeywordTwo := &DiaryKeyword{}
	if err = randomize.Struct(seed, diaryKeywordOne, diaryKeywordDBTypes, false, diaryKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryKeyword struct: %s", err)
	}
	if err = randomize.Struct(seed, diaryKeywordTwo, diaryKeywordDBTypes, false, diaryKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = diaryKeywordOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = diaryKeywordTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DiaryKeywords().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDiaryKeywordsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	diaryKeywordOne := &DiaryKeyword{}
	diaryKeywordTwo := &DiaryKeyword{}
	if err = randomize.Struct(seed, diaryKeywordOne, diaryKeywordDBTypes, false, diaryKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryKeyword struct: %s", err)
	}
	if err = randomize.Struct(seed, diaryKeywordTwo, diaryKeywordDBTypes, false, diaryKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = diaryKeywordOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = diaryKeywordTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DiaryKeywords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func diaryKeywordBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DiaryKeyword) error {
	*o = DiaryKeyword{}
	return nil
}

func diaryKeywordAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DiaryKeyword) error {
	*o = DiaryKeyword{}
	return nil
}

func diaryKeywordAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DiaryKeyword) error {
	*o = DiaryKeyword{}
	return nil
}

func diaryKeywordBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DiaryKeyword) error {
	*o = DiaryKeyword{}
	return nil
}

func diaryKeywordAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DiaryKeyword) error {
	*o = DiaryKeyword{}
	return nil
}

func diaryKeywordBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DiaryKeyword) error {
	*o = DiaryKeyword{}
	return nil
}

func diaryKeywordAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DiaryKeyword) error {
	*o = DiaryKeyword{}
	return nil
}

func diaryKeywordBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DiaryKeyword) error {
	*o = DiaryKeyword{}
	return nil
}

func diaryKeywordAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DiaryKeyword) error {
	*o = DiaryKeyword{}
	return nil
}

func testDiaryKeywordsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DiaryKeyword{}
	o := &DiaryKeyword{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, diaryKeywordDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DiaryKeyword object: %s", err)
	}

	AddDiaryKeywordHook(boil.BeforeInsertHook, diaryKeywordBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	diaryKeywordBeforeInsertHooks = []DiaryKeywordHook{}

	AddDiaryKeywordHook(boil.AfterInsertHook, diaryKeywordAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	diaryKeywordAfterInsertHooks = []DiaryKeywordHook{}

	AddDiaryKeywordHook(boil.AfterSelectHook, diaryKeywordAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	diaryKeywordAfterSelectHooks = []DiaryKeywordHook{}

	AddDiaryKeywordHook(boil.BeforeUpdateHook, diaryKeywordBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	diaryKeywordBeforeUpdateHooks = []DiaryKeywordHook{}

	AddDiaryKeywordHook(boil.AfterUpdateHook, diaryKeywordAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	diaryKeywordAfterUpdateHooks = []DiaryKeywordHook{}

	AddDiaryKeywordHook(boil.BeforeDeleteHook, diaryKeywordBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	diaryKeywordBeforeDeleteHooks = []DiaryKeywordHook{}

	AddDiaryKeywordHook(boil.AfterDeleteHook, diaryKeywordAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	diaryKeywordAfterDeleteHooks = []DiaryKeywordHook{}

	AddDiaryKeywordHook(boil.BeforeUpsertHook, diaryKeywordBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	diaryKeywordBeforeUpsertHooks = []DiaryKeywordHook{}

	AddDiaryKeywordHook(boil.AfterUpsertHook, diaryKeywordAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	diaryKeywordAfterUpsertHooks = []DiaryKeywordHook{}
}

func testDiaryKeywordsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiaryKeyword{}
	if err = randomize.Struct(seed, o, diaryKeywordDBTypes, true, diaryKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DiaryKeywords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDiaryKeywordsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiaryKeyword{}
	if err = randomize.Struct(seed, o, diaryKeywordDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DiaryKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(diaryKeywordColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DiaryKeywords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDiaryKeywordToOneDiaryUsingDiary(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DiaryKeyword
	var foreign Diary

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, diaryKeywordDBTypes, false, diaryKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryKeyword struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, diaryDBTypes, false, diaryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Diary struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.DiaryID = foreign.DiaryID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Diary().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.DiaryID != foreign.DiaryID {
		t.Errorf("want: %v, got %v", foreign.DiaryID, check.DiaryID)
	}

	ranAfterSelectHook := false
	AddDiaryHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Diary) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := DiaryKeywordSlice{&local}
	if err = local.L.LoadDiary(ctx, tx, false, (*[]*DiaryKeyword)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Diary == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Diary = nil
	if err = local.L.LoadDiary(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Diary == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testDiaryKeywordToOneSetOpDiaryUsingDiary(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DiaryKeyword
	var b, c Diary

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, diaryKeywordDBTypes, false, strmangle.SetComplement(diaryKeywordPrimaryKeyColumns, diaryKeywordColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, diaryDBTypes, false, strmangle.SetComplement(diaryPrimaryKeyColumns, diaryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, diaryDBTypes, false, strmangle.SetComplement(diaryPrimaryKeyColumns, diaryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Diary{&b, &c} {
		err = a.SetDiary(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Diary != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DiaryKeywords[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.DiaryID != x.DiaryID {
			t.Error("foreign key was wrong value", a.DiaryID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DiaryID))
		reflect.Indirect(reflect.ValueOf(&a.DiaryID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.DiaryID != x.DiaryID {
			t.Error("foreign key was wrong value", a.DiaryID, x.DiaryID)
		}
	}
}

func testDiaryKeywordsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiaryKeyword{}
	if err = randomize.Struct(seed, o, diaryKeywordDBTypes, true, diaryKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDiaryKeywordsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiaryKeyword{}
	if err = randomize.Struct(seed, o, diaryKeywordDBTypes, true, diaryKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DiaryKeywordSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDiaryKeywordsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiaryKeyword{}
	if err = randomize.Struct(seed, o, diaryKeywordDBTypes, true, diaryKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DiaryKeywords().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	diaryKeywordDBTypes = map[string]string{`DiaryKeywordID`: `int`, `DiaryID`: `int`, `DiaryKeyword`: `varchar`, `DiaryFreq`: `int`}
	_                   = bytes.MinRead
)

func testDiaryKeywordsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(diaryKeywordPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(diaryKeywordAllColumns) == len(diaryKeywordPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DiaryKeyword{}
	if err = randomize.Struct(seed, o, diaryKeywordDBTypes, true, diaryKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DiaryKeywords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, diaryKeywordDBTypes, true, diaryKeywordPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DiaryKeyword struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDiaryKeywordsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(diaryKeywordAllColumns) == len(diaryKeywordPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DiaryKeyword{}
	if err = randomize.Struct(seed, o, diaryKeywordDBTypes, true, diaryKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DiaryKeywords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, diaryKeywordDBTypes, true, diaryKeywordPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DiaryKeyword struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(diaryKeywordAllColumns, diaryKeywordPrimaryKeyColumns) {
		fields = diaryKeywordAllColumns
	} else {
		fields = strmangle.SetComplement(
			diaryKeywordAllColumns,
			diaryKeywordPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DiaryKeywordSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDiaryKeywordsUpsert(t *testing.T) {
	t.Parallel()

	if len(diaryKeywordAllColumns) == len(diaryKeywordPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLDiaryKeywordUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DiaryKeyword{}
	if err = randomize.Struct(seed, &o, diaryKeywordDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DiaryKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DiaryKeyword: %s", err)
	}

	count, err := DiaryKeywords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, diaryKeywordDBTypes, false, diaryKeywordPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DiaryKeyword struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DiaryKeyword: %s", err)
	}

	count, err = DiaryKeywords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
