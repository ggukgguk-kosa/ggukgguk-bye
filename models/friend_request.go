// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// FriendRequest is an object representing the database table.
type FriendRequest struct {
	FriendRequestID   int       `boil:"friend_request_id" json:"friend_request_id" toml:"friend_request_id" yaml:"friend_request_id"`
	FromMemberID      string    `boil:"from_member_id" json:"from_member_id" toml:"from_member_id" yaml:"from_member_id"`
	ToMemberID        string    `boil:"to_member_id" json:"to_member_id" toml:"to_member_id" yaml:"to_member_id"`
	FriendRequestTime time.Time `boil:"friend_request_time" json:"friend_request_time" toml:"friend_request_time" yaml:"friend_request_time"`

	R *friendRequestR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L friendRequestL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FriendRequestColumns = struct {
	FriendRequestID   string
	FromMemberID      string
	ToMemberID        string
	FriendRequestTime string
}{
	FriendRequestID:   "friend_request_id",
	FromMemberID:      "from_member_id",
	ToMemberID:        "to_member_id",
	FriendRequestTime: "friend_request_time",
}

var FriendRequestTableColumns = struct {
	FriendRequestID   string
	FromMemberID      string
	ToMemberID        string
	FriendRequestTime string
}{
	FriendRequestID:   "friend_request.friend_request_id",
	FromMemberID:      "friend_request.from_member_id",
	ToMemberID:        "friend_request.to_member_id",
	FriendRequestTime: "friend_request.friend_request_time",
}

// Generated where

var FriendRequestWhere = struct {
	FriendRequestID   whereHelperint
	FromMemberID      whereHelperstring
	ToMemberID        whereHelperstring
	FriendRequestTime whereHelpertime_Time
}{
	FriendRequestID:   whereHelperint{field: "`friend_request`.`friend_request_id`"},
	FromMemberID:      whereHelperstring{field: "`friend_request`.`from_member_id`"},
	ToMemberID:        whereHelperstring{field: "`friend_request`.`to_member_id`"},
	FriendRequestTime: whereHelpertime_Time{field: "`friend_request`.`friend_request_time`"},
}

// FriendRequestRels is where relationship names are stored.
var FriendRequestRels = struct {
	FromMember string
	ToMember   string
}{
	FromMember: "FromMember",
	ToMember:   "ToMember",
}

// friendRequestR is where relationships are stored.
type friendRequestR struct {
	FromMember *Member `boil:"FromMember" json:"FromMember" toml:"FromMember" yaml:"FromMember"`
	ToMember   *Member `boil:"ToMember" json:"ToMember" toml:"ToMember" yaml:"ToMember"`
}

// NewStruct creates a new relationship struct
func (*friendRequestR) NewStruct() *friendRequestR {
	return &friendRequestR{}
}

func (r *friendRequestR) GetFromMember() *Member {
	if r == nil {
		return nil
	}
	return r.FromMember
}

func (r *friendRequestR) GetToMember() *Member {
	if r == nil {
		return nil
	}
	return r.ToMember
}

// friendRequestL is where Load methods for each relationship are stored.
type friendRequestL struct{}

var (
	friendRequestAllColumns            = []string{"friend_request_id", "from_member_id", "to_member_id", "friend_request_time"}
	friendRequestColumnsWithoutDefault = []string{"from_member_id", "to_member_id"}
	friendRequestColumnsWithDefault    = []string{"friend_request_id", "friend_request_time"}
	friendRequestPrimaryKeyColumns     = []string{"friend_request_id"}
	friendRequestGeneratedColumns      = []string{}
)

type (
	// FriendRequestSlice is an alias for a slice of pointers to FriendRequest.
	// This should almost always be used instead of []FriendRequest.
	FriendRequestSlice []*FriendRequest
	// FriendRequestHook is the signature for custom FriendRequest hook methods
	FriendRequestHook func(context.Context, boil.ContextExecutor, *FriendRequest) error

	friendRequestQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	friendRequestType                 = reflect.TypeOf(&FriendRequest{})
	friendRequestMapping              = queries.MakeStructMapping(friendRequestType)
	friendRequestPrimaryKeyMapping, _ = queries.BindMapping(friendRequestType, friendRequestMapping, friendRequestPrimaryKeyColumns)
	friendRequestInsertCacheMut       sync.RWMutex
	friendRequestInsertCache          = make(map[string]insertCache)
	friendRequestUpdateCacheMut       sync.RWMutex
	friendRequestUpdateCache          = make(map[string]updateCache)
	friendRequestUpsertCacheMut       sync.RWMutex
	friendRequestUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var friendRequestAfterSelectMu sync.Mutex
var friendRequestAfterSelectHooks []FriendRequestHook

var friendRequestBeforeInsertMu sync.Mutex
var friendRequestBeforeInsertHooks []FriendRequestHook
var friendRequestAfterInsertMu sync.Mutex
var friendRequestAfterInsertHooks []FriendRequestHook

var friendRequestBeforeUpdateMu sync.Mutex
var friendRequestBeforeUpdateHooks []FriendRequestHook
var friendRequestAfterUpdateMu sync.Mutex
var friendRequestAfterUpdateHooks []FriendRequestHook

var friendRequestBeforeDeleteMu sync.Mutex
var friendRequestBeforeDeleteHooks []FriendRequestHook
var friendRequestAfterDeleteMu sync.Mutex
var friendRequestAfterDeleteHooks []FriendRequestHook

var friendRequestBeforeUpsertMu sync.Mutex
var friendRequestBeforeUpsertHooks []FriendRequestHook
var friendRequestAfterUpsertMu sync.Mutex
var friendRequestAfterUpsertHooks []FriendRequestHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FriendRequest) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range friendRequestAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FriendRequest) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range friendRequestBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FriendRequest) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range friendRequestAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FriendRequest) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range friendRequestBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FriendRequest) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range friendRequestAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FriendRequest) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range friendRequestBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FriendRequest) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range friendRequestAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FriendRequest) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range friendRequestBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FriendRequest) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range friendRequestAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFriendRequestHook registers your hook function for all future operations.
func AddFriendRequestHook(hookPoint boil.HookPoint, friendRequestHook FriendRequestHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		friendRequestAfterSelectMu.Lock()
		friendRequestAfterSelectHooks = append(friendRequestAfterSelectHooks, friendRequestHook)
		friendRequestAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		friendRequestBeforeInsertMu.Lock()
		friendRequestBeforeInsertHooks = append(friendRequestBeforeInsertHooks, friendRequestHook)
		friendRequestBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		friendRequestAfterInsertMu.Lock()
		friendRequestAfterInsertHooks = append(friendRequestAfterInsertHooks, friendRequestHook)
		friendRequestAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		friendRequestBeforeUpdateMu.Lock()
		friendRequestBeforeUpdateHooks = append(friendRequestBeforeUpdateHooks, friendRequestHook)
		friendRequestBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		friendRequestAfterUpdateMu.Lock()
		friendRequestAfterUpdateHooks = append(friendRequestAfterUpdateHooks, friendRequestHook)
		friendRequestAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		friendRequestBeforeDeleteMu.Lock()
		friendRequestBeforeDeleteHooks = append(friendRequestBeforeDeleteHooks, friendRequestHook)
		friendRequestBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		friendRequestAfterDeleteMu.Lock()
		friendRequestAfterDeleteHooks = append(friendRequestAfterDeleteHooks, friendRequestHook)
		friendRequestAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		friendRequestBeforeUpsertMu.Lock()
		friendRequestBeforeUpsertHooks = append(friendRequestBeforeUpsertHooks, friendRequestHook)
		friendRequestBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		friendRequestAfterUpsertMu.Lock()
		friendRequestAfterUpsertHooks = append(friendRequestAfterUpsertHooks, friendRequestHook)
		friendRequestAfterUpsertMu.Unlock()
	}
}

// OneG returns a single friendRequest record from the query using the global executor.
func (q friendRequestQuery) OneG(ctx context.Context) (*FriendRequest, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single friendRequest record from the query.
func (q friendRequestQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FriendRequest, error) {
	o := &FriendRequest{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for friend_request")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all FriendRequest records from the query using the global executor.
func (q friendRequestQuery) AllG(ctx context.Context) (FriendRequestSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all FriendRequest records from the query.
func (q friendRequestQuery) All(ctx context.Context, exec boil.ContextExecutor) (FriendRequestSlice, error) {
	var o []*FriendRequest

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to FriendRequest slice")
	}

	if len(friendRequestAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all FriendRequest records in the query using the global executor
func (q friendRequestQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all FriendRequest records in the query.
func (q friendRequestQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count friend_request rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q friendRequestQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q friendRequestQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if friend_request exists")
	}

	return count > 0, nil
}

// FromMember pointed to by the foreign key.
func (o *FriendRequest) FromMember(mods ...qm.QueryMod) memberQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`member_id` = ?", o.FromMemberID),
	}

	queryMods = append(queryMods, mods...)

	return Members(queryMods...)
}

// ToMember pointed to by the foreign key.
func (o *FriendRequest) ToMember(mods ...qm.QueryMod) memberQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`member_id` = ?", o.ToMemberID),
	}

	queryMods = append(queryMods, mods...)

	return Members(queryMods...)
}

// LoadFromMember allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (friendRequestL) LoadFromMember(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFriendRequest interface{}, mods queries.Applicator) error {
	var slice []*FriendRequest
	var object *FriendRequest

	if singular {
		var ok bool
		object, ok = maybeFriendRequest.(*FriendRequest)
		if !ok {
			object = new(FriendRequest)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFriendRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFriendRequest))
			}
		}
	} else {
		s, ok := maybeFriendRequest.(*[]*FriendRequest)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFriendRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFriendRequest))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &friendRequestR{}
		}
		args[object.FromMemberID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &friendRequestR{}
			}

			args[obj.FromMemberID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`member`),
		qm.WhereIn(`member.member_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Member")
	}

	var resultSlice []*Member
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Member")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for member")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for member")
	}

	if len(memberAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FromMember = foreign
		if foreign.R == nil {
			foreign.R = &memberR{}
		}
		foreign.R.FromMemberFriendRequests = append(foreign.R.FromMemberFriendRequests, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FromMemberID == foreign.MemberID {
				local.R.FromMember = foreign
				if foreign.R == nil {
					foreign.R = &memberR{}
				}
				foreign.R.FromMemberFriendRequests = append(foreign.R.FromMemberFriendRequests, local)
				break
			}
		}
	}

	return nil
}

// LoadToMember allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (friendRequestL) LoadToMember(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFriendRequest interface{}, mods queries.Applicator) error {
	var slice []*FriendRequest
	var object *FriendRequest

	if singular {
		var ok bool
		object, ok = maybeFriendRequest.(*FriendRequest)
		if !ok {
			object = new(FriendRequest)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFriendRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFriendRequest))
			}
		}
	} else {
		s, ok := maybeFriendRequest.(*[]*FriendRequest)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFriendRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFriendRequest))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &friendRequestR{}
		}
		args[object.ToMemberID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &friendRequestR{}
			}

			args[obj.ToMemberID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`member`),
		qm.WhereIn(`member.member_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Member")
	}

	var resultSlice []*Member
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Member")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for member")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for member")
	}

	if len(memberAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ToMember = foreign
		if foreign.R == nil {
			foreign.R = &memberR{}
		}
		foreign.R.ToMemberFriendRequests = append(foreign.R.ToMemberFriendRequests, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ToMemberID == foreign.MemberID {
				local.R.ToMember = foreign
				if foreign.R == nil {
					foreign.R = &memberR{}
				}
				foreign.R.ToMemberFriendRequests = append(foreign.R.ToMemberFriendRequests, local)
				break
			}
		}
	}

	return nil
}

// SetFromMemberG of the friendRequest to the related item.
// Sets o.R.FromMember to related.
// Adds o to related.R.FromMemberFriendRequests.
// Uses the global database handle.
func (o *FriendRequest) SetFromMemberG(ctx context.Context, insert bool, related *Member) error {
	return o.SetFromMember(ctx, boil.GetContextDB(), insert, related)
}

// SetFromMember of the friendRequest to the related item.
// Sets o.R.FromMember to related.
// Adds o to related.R.FromMemberFriendRequests.
func (o *FriendRequest) SetFromMember(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Member) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `friend_request` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"from_member_id"}),
		strmangle.WhereClause("`", "`", 0, friendRequestPrimaryKeyColumns),
	)
	values := []interface{}{related.MemberID, o.FriendRequestID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FromMemberID = related.MemberID
	if o.R == nil {
		o.R = &friendRequestR{
			FromMember: related,
		}
	} else {
		o.R.FromMember = related
	}

	if related.R == nil {
		related.R = &memberR{
			FromMemberFriendRequests: FriendRequestSlice{o},
		}
	} else {
		related.R.FromMemberFriendRequests = append(related.R.FromMemberFriendRequests, o)
	}

	return nil
}

// SetToMemberG of the friendRequest to the related item.
// Sets o.R.ToMember to related.
// Adds o to related.R.ToMemberFriendRequests.
// Uses the global database handle.
func (o *FriendRequest) SetToMemberG(ctx context.Context, insert bool, related *Member) error {
	return o.SetToMember(ctx, boil.GetContextDB(), insert, related)
}

// SetToMember of the friendRequest to the related item.
// Sets o.R.ToMember to related.
// Adds o to related.R.ToMemberFriendRequests.
func (o *FriendRequest) SetToMember(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Member) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `friend_request` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"to_member_id"}),
		strmangle.WhereClause("`", "`", 0, friendRequestPrimaryKeyColumns),
	)
	values := []interface{}{related.MemberID, o.FriendRequestID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ToMemberID = related.MemberID
	if o.R == nil {
		o.R = &friendRequestR{
			ToMember: related,
		}
	} else {
		o.R.ToMember = related
	}

	if related.R == nil {
		related.R = &memberR{
			ToMemberFriendRequests: FriendRequestSlice{o},
		}
	} else {
		related.R.ToMemberFriendRequests = append(related.R.ToMemberFriendRequests, o)
	}

	return nil
}

// FriendRequests retrieves all the records using an executor.
func FriendRequests(mods ...qm.QueryMod) friendRequestQuery {
	mods = append(mods, qm.From("`friend_request`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`friend_request`.*"})
	}

	return friendRequestQuery{q}
}

// FindFriendRequestG retrieves a single record by ID.
func FindFriendRequestG(ctx context.Context, friendRequestID int, selectCols ...string) (*FriendRequest, error) {
	return FindFriendRequest(ctx, boil.GetContextDB(), friendRequestID, selectCols...)
}

// FindFriendRequest retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFriendRequest(ctx context.Context, exec boil.ContextExecutor, friendRequestID int, selectCols ...string) (*FriendRequest, error) {
	friendRequestObj := &FriendRequest{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `friend_request` where `friend_request_id`=?", sel,
	)

	q := queries.Raw(query, friendRequestID)

	err := q.Bind(ctx, exec, friendRequestObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from friend_request")
	}

	if err = friendRequestObj.doAfterSelectHooks(ctx, exec); err != nil {
		return friendRequestObj, err
	}

	return friendRequestObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *FriendRequest) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FriendRequest) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no friend_request provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(friendRequestColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	friendRequestInsertCacheMut.RLock()
	cache, cached := friendRequestInsertCache[key]
	friendRequestInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			friendRequestAllColumns,
			friendRequestColumnsWithDefault,
			friendRequestColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(friendRequestType, friendRequestMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(friendRequestType, friendRequestMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `friend_request` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `friend_request` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `friend_request` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, friendRequestPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into friend_request")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.FriendRequestID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == friendRequestMapping["friend_request_id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.FriendRequestID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for friend_request")
	}

CacheNoHooks:
	if !cached {
		friendRequestInsertCacheMut.Lock()
		friendRequestInsertCache[key] = cache
		friendRequestInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single FriendRequest record using the global executor.
// See Update for more documentation.
func (o *FriendRequest) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the FriendRequest.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FriendRequest) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	friendRequestUpdateCacheMut.RLock()
	cache, cached := friendRequestUpdateCache[key]
	friendRequestUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			friendRequestAllColumns,
			friendRequestPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update friend_request, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `friend_request` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, friendRequestPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(friendRequestType, friendRequestMapping, append(wl, friendRequestPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update friend_request row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for friend_request")
	}

	if !cached {
		friendRequestUpdateCacheMut.Lock()
		friendRequestUpdateCache[key] = cache
		friendRequestUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q friendRequestQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q friendRequestQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for friend_request")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for friend_request")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o FriendRequestSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FriendRequestSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), friendRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `friend_request` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, friendRequestPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in friendRequest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all friendRequest")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *FriendRequest) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLFriendRequestUniqueColumns = []string{
	"friend_request_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FriendRequest) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no friend_request provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(friendRequestColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLFriendRequestUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	friendRequestUpsertCacheMut.RLock()
	cache, cached := friendRequestUpsertCache[key]
	friendRequestUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			friendRequestAllColumns,
			friendRequestColumnsWithDefault,
			friendRequestColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			friendRequestAllColumns,
			friendRequestPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert friend_request, could not build update column list")
		}

		ret := strmangle.SetComplement(friendRequestAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`friend_request`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `friend_request` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(friendRequestType, friendRequestMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(friendRequestType, friendRequestMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for friend_request")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.FriendRequestID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == friendRequestMapping["friend_request_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(friendRequestType, friendRequestMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for friend_request")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for friend_request")
	}

CacheNoHooks:
	if !cached {
		friendRequestUpsertCacheMut.Lock()
		friendRequestUpsertCache[key] = cache
		friendRequestUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single FriendRequest record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *FriendRequest) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single FriendRequest record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FriendRequest) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FriendRequest provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), friendRequestPrimaryKeyMapping)
	sql := "DELETE FROM `friend_request` WHERE `friend_request_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from friend_request")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for friend_request")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q friendRequestQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q friendRequestQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no friendRequestQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from friend_request")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for friend_request")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o FriendRequestSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FriendRequestSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(friendRequestBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), friendRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `friend_request` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, friendRequestPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from friendRequest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for friend_request")
	}

	if len(friendRequestAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *FriendRequest) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no FriendRequest provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FriendRequest) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFriendRequest(ctx, exec, o.FriendRequestID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FriendRequestSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty FriendRequestSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FriendRequestSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FriendRequestSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), friendRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `friend_request`.* FROM `friend_request` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, friendRequestPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FriendRequestSlice")
	}

	*o = slice

	return nil
}

// FriendRequestExistsG checks if the FriendRequest row exists.
func FriendRequestExistsG(ctx context.Context, friendRequestID int) (bool, error) {
	return FriendRequestExists(ctx, boil.GetContextDB(), friendRequestID)
}

// FriendRequestExists checks if the FriendRequest row exists.
func FriendRequestExists(ctx context.Context, exec boil.ContextExecutor, friendRequestID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `friend_request` where `friend_request_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, friendRequestID)
	}
	row := exec.QueryRowContext(ctx, sql, friendRequestID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if friend_request exists")
	}

	return exists, nil
}

// Exists checks if the FriendRequest row exists.
func (o *FriendRequest) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return FriendRequestExists(ctx, exec, o.FriendRequestID)
}
