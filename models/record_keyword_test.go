// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRecordKeywords(t *testing.T) {
	t.Parallel()

	query := RecordKeywords()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRecordKeywordsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecordKeyword{}
	if err = randomize.Struct(seed, o, recordKeywordDBTypes, true, recordKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecordKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RecordKeywords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecordKeywordsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecordKeyword{}
	if err = randomize.Struct(seed, o, recordKeywordDBTypes, true, recordKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecordKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := RecordKeywords().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RecordKeywords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecordKeywordsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecordKeyword{}
	if err = randomize.Struct(seed, o, recordKeywordDBTypes, true, recordKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecordKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RecordKeywordSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RecordKeywords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecordKeywordsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecordKeyword{}
	if err = randomize.Struct(seed, o, recordKeywordDBTypes, true, recordKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecordKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RecordKeywordExists(ctx, tx, o.RecordKeywordID)
	if err != nil {
		t.Errorf("Unable to check if RecordKeyword exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RecordKeywordExists to return true, but got false.")
	}
}

func testRecordKeywordsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecordKeyword{}
	if err = randomize.Struct(seed, o, recordKeywordDBTypes, true, recordKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecordKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	recordKeywordFound, err := FindRecordKeyword(ctx, tx, o.RecordKeywordID)
	if err != nil {
		t.Error(err)
	}

	if recordKeywordFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRecordKeywordsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecordKeyword{}
	if err = randomize.Struct(seed, o, recordKeywordDBTypes, true, recordKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecordKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = RecordKeywords().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRecordKeywordsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecordKeyword{}
	if err = randomize.Struct(seed, o, recordKeywordDBTypes, true, recordKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecordKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := RecordKeywords().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRecordKeywordsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	recordKeywordOne := &RecordKeyword{}
	recordKeywordTwo := &RecordKeyword{}
	if err = randomize.Struct(seed, recordKeywordOne, recordKeywordDBTypes, false, recordKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecordKeyword struct: %s", err)
	}
	if err = randomize.Struct(seed, recordKeywordTwo, recordKeywordDBTypes, false, recordKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecordKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = recordKeywordOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = recordKeywordTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RecordKeywords().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRecordKeywordsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	recordKeywordOne := &RecordKeyword{}
	recordKeywordTwo := &RecordKeyword{}
	if err = randomize.Struct(seed, recordKeywordOne, recordKeywordDBTypes, false, recordKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecordKeyword struct: %s", err)
	}
	if err = randomize.Struct(seed, recordKeywordTwo, recordKeywordDBTypes, false, recordKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecordKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = recordKeywordOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = recordKeywordTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecordKeywords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func recordKeywordBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *RecordKeyword) error {
	*o = RecordKeyword{}
	return nil
}

func recordKeywordAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *RecordKeyword) error {
	*o = RecordKeyword{}
	return nil
}

func recordKeywordAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *RecordKeyword) error {
	*o = RecordKeyword{}
	return nil
}

func recordKeywordBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RecordKeyword) error {
	*o = RecordKeyword{}
	return nil
}

func recordKeywordAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RecordKeyword) error {
	*o = RecordKeyword{}
	return nil
}

func recordKeywordBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RecordKeyword) error {
	*o = RecordKeyword{}
	return nil
}

func recordKeywordAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RecordKeyword) error {
	*o = RecordKeyword{}
	return nil
}

func recordKeywordBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RecordKeyword) error {
	*o = RecordKeyword{}
	return nil
}

func recordKeywordAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RecordKeyword) error {
	*o = RecordKeyword{}
	return nil
}

func testRecordKeywordsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &RecordKeyword{}
	o := &RecordKeyword{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, recordKeywordDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RecordKeyword object: %s", err)
	}

	AddRecordKeywordHook(boil.BeforeInsertHook, recordKeywordBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	recordKeywordBeforeInsertHooks = []RecordKeywordHook{}

	AddRecordKeywordHook(boil.AfterInsertHook, recordKeywordAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	recordKeywordAfterInsertHooks = []RecordKeywordHook{}

	AddRecordKeywordHook(boil.AfterSelectHook, recordKeywordAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	recordKeywordAfterSelectHooks = []RecordKeywordHook{}

	AddRecordKeywordHook(boil.BeforeUpdateHook, recordKeywordBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	recordKeywordBeforeUpdateHooks = []RecordKeywordHook{}

	AddRecordKeywordHook(boil.AfterUpdateHook, recordKeywordAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	recordKeywordAfterUpdateHooks = []RecordKeywordHook{}

	AddRecordKeywordHook(boil.BeforeDeleteHook, recordKeywordBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	recordKeywordBeforeDeleteHooks = []RecordKeywordHook{}

	AddRecordKeywordHook(boil.AfterDeleteHook, recordKeywordAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	recordKeywordAfterDeleteHooks = []RecordKeywordHook{}

	AddRecordKeywordHook(boil.BeforeUpsertHook, recordKeywordBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	recordKeywordBeforeUpsertHooks = []RecordKeywordHook{}

	AddRecordKeywordHook(boil.AfterUpsertHook, recordKeywordAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	recordKeywordAfterUpsertHooks = []RecordKeywordHook{}
}

func testRecordKeywordsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecordKeyword{}
	if err = randomize.Struct(seed, o, recordKeywordDBTypes, true, recordKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecordKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecordKeywords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRecordKeywordsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecordKeyword{}
	if err = randomize.Struct(seed, o, recordKeywordDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RecordKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(recordKeywordColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := RecordKeywords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRecordKeywordToOneRecordUsingRecord(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local RecordKeyword
	var foreign Record

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, recordKeywordDBTypes, false, recordKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecordKeyword struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, recordDBTypes, false, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.RecordID = foreign.RecordID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Record().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.RecordID != foreign.RecordID {
		t.Errorf("want: %v, got %v", foreign.RecordID, check.RecordID)
	}

	ranAfterSelectHook := false
	AddRecordHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Record) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := RecordKeywordSlice{&local}
	if err = local.L.LoadRecord(ctx, tx, false, (*[]*RecordKeyword)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Record == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Record = nil
	if err = local.L.LoadRecord(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Record == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testRecordKeywordToOneSetOpRecordUsingRecord(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RecordKeyword
	var b, c Record

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recordKeywordDBTypes, false, strmangle.SetComplement(recordKeywordPrimaryKeyColumns, recordKeywordColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, recordDBTypes, false, strmangle.SetComplement(recordPrimaryKeyColumns, recordColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, recordDBTypes, false, strmangle.SetComplement(recordPrimaryKeyColumns, recordColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Record{&b, &c} {
		err = a.SetRecord(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Record != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RecordKeywords[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.RecordID != x.RecordID {
			t.Error("foreign key was wrong value", a.RecordID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RecordID))
		reflect.Indirect(reflect.ValueOf(&a.RecordID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.RecordID != x.RecordID {
			t.Error("foreign key was wrong value", a.RecordID, x.RecordID)
		}
	}
}

func testRecordKeywordsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecordKeyword{}
	if err = randomize.Struct(seed, o, recordKeywordDBTypes, true, recordKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecordKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRecordKeywordsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecordKeyword{}
	if err = randomize.Struct(seed, o, recordKeywordDBTypes, true, recordKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecordKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RecordKeywordSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRecordKeywordsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecordKeyword{}
	if err = randomize.Struct(seed, o, recordKeywordDBTypes, true, recordKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecordKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RecordKeywords().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	recordKeywordDBTypes = map[string]string{`RecordKeywordID`: `int`, `RecordID`: `int`, `RecordKeyword`: `varchar`}
	_                    = bytes.MinRead
)

func testRecordKeywordsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(recordKeywordPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(recordKeywordAllColumns) == len(recordKeywordPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RecordKeyword{}
	if err = randomize.Struct(seed, o, recordKeywordDBTypes, true, recordKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecordKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecordKeywords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, recordKeywordDBTypes, true, recordKeywordPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RecordKeyword struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRecordKeywordsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(recordKeywordAllColumns) == len(recordKeywordPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RecordKeyword{}
	if err = randomize.Struct(seed, o, recordKeywordDBTypes, true, recordKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecordKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecordKeywords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, recordKeywordDBTypes, true, recordKeywordPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RecordKeyword struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(recordKeywordAllColumns, recordKeywordPrimaryKeyColumns) {
		fields = recordKeywordAllColumns
	} else {
		fields = strmangle.SetComplement(
			recordKeywordAllColumns,
			recordKeywordPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RecordKeywordSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRecordKeywordsUpsert(t *testing.T) {
	t.Parallel()

	if len(recordKeywordAllColumns) == len(recordKeywordPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLRecordKeywordUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := RecordKeyword{}
	if err = randomize.Struct(seed, &o, recordKeywordDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RecordKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RecordKeyword: %s", err)
	}

	count, err := RecordKeywords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, recordKeywordDBTypes, false, recordKeywordPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RecordKeyword struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RecordKeyword: %s", err)
	}

	count, err = RecordKeywords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
