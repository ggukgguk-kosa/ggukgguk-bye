// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MediaFile is an object representing the database table.
type MediaFile struct { // UUID
	MediaFileID      string    `boil:"media_file_id" json:"media_file_id" toml:"media_file_id" yaml:"media_file_id"`
	MediaTypeID      string    `boil:"media_type_id" json:"media_type_id" toml:"media_type_id" yaml:"media_type_id"`
	MediaFileBlocked null.Bool `boil:"media_file_blocked" json:"media_file_blocked,omitempty" toml:"media_file_blocked" yaml:"media_file_blocked,omitempty"`
	MediaFileChecked bool      `boil:"media_file_checked" json:"media_file_checked" toml:"media_file_checked" yaml:"media_file_checked"`

	R *mediaFileR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L mediaFileL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MediaFileColumns = struct {
	MediaFileID      string
	MediaTypeID      string
	MediaFileBlocked string
	MediaFileChecked string
}{
	MediaFileID:      "media_file_id",
	MediaTypeID:      "media_type_id",
	MediaFileBlocked: "media_file_blocked",
	MediaFileChecked: "media_file_checked",
}

var MediaFileTableColumns = struct {
	MediaFileID      string
	MediaTypeID      string
	MediaFileBlocked string
	MediaFileChecked string
}{
	MediaFileID:      "media_file.media_file_id",
	MediaTypeID:      "media_file.media_type_id",
	MediaFileBlocked: "media_file.media_file_blocked",
	MediaFileChecked: "media_file.media_file_checked",
}

// Generated where

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var MediaFileWhere = struct {
	MediaFileID      whereHelperstring
	MediaTypeID      whereHelperstring
	MediaFileBlocked whereHelpernull_Bool
	MediaFileChecked whereHelperbool
}{
	MediaFileID:      whereHelperstring{field: "`media_file`.`media_file_id`"},
	MediaTypeID:      whereHelperstring{field: "`media_file`.`media_type_id`"},
	MediaFileBlocked: whereHelpernull_Bool{field: "`media_file`.`media_file_blocked`"},
	MediaFileChecked: whereHelperbool{field: "`media_file`.`media_file_checked`"},
}

// MediaFileRels is where relationship names are stored.
var MediaFileRels = struct {
	MediaType   string
	Records     string
	RecordTests string
}{
	MediaType:   "MediaType",
	Records:     "Records",
	RecordTests: "RecordTests",
}

// mediaFileR is where relationships are stored.
type mediaFileR struct {
	MediaType   *MediaType      `boil:"MediaType" json:"MediaType" toml:"MediaType" yaml:"MediaType"`
	Records     RecordSlice     `boil:"Records" json:"Records" toml:"Records" yaml:"Records"`
	RecordTests RecordTestSlice `boil:"RecordTests" json:"RecordTests" toml:"RecordTests" yaml:"RecordTests"`
}

// NewStruct creates a new relationship struct
func (*mediaFileR) NewStruct() *mediaFileR {
	return &mediaFileR{}
}

func (r *mediaFileR) GetMediaType() *MediaType {
	if r == nil {
		return nil
	}
	return r.MediaType
}

func (r *mediaFileR) GetRecords() RecordSlice {
	if r == nil {
		return nil
	}
	return r.Records
}

func (r *mediaFileR) GetRecordTests() RecordTestSlice {
	if r == nil {
		return nil
	}
	return r.RecordTests
}

// mediaFileL is where Load methods for each relationship are stored.
type mediaFileL struct{}

var (
	mediaFileAllColumns            = []string{"media_file_id", "media_type_id", "media_file_blocked", "media_file_checked"}
	mediaFileColumnsWithoutDefault = []string{"media_file_id", "media_type_id", "media_file_blocked"}
	mediaFileColumnsWithDefault    = []string{"media_file_checked"}
	mediaFilePrimaryKeyColumns     = []string{"media_file_id"}
	mediaFileGeneratedColumns      = []string{}
)

type (
	// MediaFileSlice is an alias for a slice of pointers to MediaFile.
	// This should almost always be used instead of []MediaFile.
	MediaFileSlice []*MediaFile
	// MediaFileHook is the signature for custom MediaFile hook methods
	MediaFileHook func(context.Context, boil.ContextExecutor, *MediaFile) error

	mediaFileQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mediaFileType                 = reflect.TypeOf(&MediaFile{})
	mediaFileMapping              = queries.MakeStructMapping(mediaFileType)
	mediaFilePrimaryKeyMapping, _ = queries.BindMapping(mediaFileType, mediaFileMapping, mediaFilePrimaryKeyColumns)
	mediaFileInsertCacheMut       sync.RWMutex
	mediaFileInsertCache          = make(map[string]insertCache)
	mediaFileUpdateCacheMut       sync.RWMutex
	mediaFileUpdateCache          = make(map[string]updateCache)
	mediaFileUpsertCacheMut       sync.RWMutex
	mediaFileUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mediaFileAfterSelectMu sync.Mutex
var mediaFileAfterSelectHooks []MediaFileHook

var mediaFileBeforeInsertMu sync.Mutex
var mediaFileBeforeInsertHooks []MediaFileHook
var mediaFileAfterInsertMu sync.Mutex
var mediaFileAfterInsertHooks []MediaFileHook

var mediaFileBeforeUpdateMu sync.Mutex
var mediaFileBeforeUpdateHooks []MediaFileHook
var mediaFileAfterUpdateMu sync.Mutex
var mediaFileAfterUpdateHooks []MediaFileHook

var mediaFileBeforeDeleteMu sync.Mutex
var mediaFileBeforeDeleteHooks []MediaFileHook
var mediaFileAfterDeleteMu sync.Mutex
var mediaFileAfterDeleteHooks []MediaFileHook

var mediaFileBeforeUpsertMu sync.Mutex
var mediaFileBeforeUpsertHooks []MediaFileHook
var mediaFileAfterUpsertMu sync.Mutex
var mediaFileAfterUpsertHooks []MediaFileHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MediaFile) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaFileAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MediaFile) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaFileBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MediaFile) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaFileAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MediaFile) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaFileBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MediaFile) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaFileAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MediaFile) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaFileBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MediaFile) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaFileAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MediaFile) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaFileBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MediaFile) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaFileAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMediaFileHook registers your hook function for all future operations.
func AddMediaFileHook(hookPoint boil.HookPoint, mediaFileHook MediaFileHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		mediaFileAfterSelectMu.Lock()
		mediaFileAfterSelectHooks = append(mediaFileAfterSelectHooks, mediaFileHook)
		mediaFileAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		mediaFileBeforeInsertMu.Lock()
		mediaFileBeforeInsertHooks = append(mediaFileBeforeInsertHooks, mediaFileHook)
		mediaFileBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		mediaFileAfterInsertMu.Lock()
		mediaFileAfterInsertHooks = append(mediaFileAfterInsertHooks, mediaFileHook)
		mediaFileAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		mediaFileBeforeUpdateMu.Lock()
		mediaFileBeforeUpdateHooks = append(mediaFileBeforeUpdateHooks, mediaFileHook)
		mediaFileBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		mediaFileAfterUpdateMu.Lock()
		mediaFileAfterUpdateHooks = append(mediaFileAfterUpdateHooks, mediaFileHook)
		mediaFileAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		mediaFileBeforeDeleteMu.Lock()
		mediaFileBeforeDeleteHooks = append(mediaFileBeforeDeleteHooks, mediaFileHook)
		mediaFileBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		mediaFileAfterDeleteMu.Lock()
		mediaFileAfterDeleteHooks = append(mediaFileAfterDeleteHooks, mediaFileHook)
		mediaFileAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		mediaFileBeforeUpsertMu.Lock()
		mediaFileBeforeUpsertHooks = append(mediaFileBeforeUpsertHooks, mediaFileHook)
		mediaFileBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		mediaFileAfterUpsertMu.Lock()
		mediaFileAfterUpsertHooks = append(mediaFileAfterUpsertHooks, mediaFileHook)
		mediaFileAfterUpsertMu.Unlock()
	}
}

// OneG returns a single mediaFile record from the query using the global executor.
func (q mediaFileQuery) OneG(ctx context.Context) (*MediaFile, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single mediaFile record from the query.
func (q mediaFileQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MediaFile, error) {
	o := &MediaFile{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for media_file")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all MediaFile records from the query using the global executor.
func (q mediaFileQuery) AllG(ctx context.Context) (MediaFileSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all MediaFile records from the query.
func (q mediaFileQuery) All(ctx context.Context, exec boil.ContextExecutor) (MediaFileSlice, error) {
	var o []*MediaFile

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MediaFile slice")
	}

	if len(mediaFileAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all MediaFile records in the query using the global executor
func (q mediaFileQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all MediaFile records in the query.
func (q mediaFileQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count media_file rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q mediaFileQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q mediaFileQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if media_file exists")
	}

	return count > 0, nil
}

// MediaType pointed to by the foreign key.
func (o *MediaFile) MediaType(mods ...qm.QueryMod) mediaTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`media_type_id` = ?", o.MediaTypeID),
	}

	queryMods = append(queryMods, mods...)

	return MediaTypes(queryMods...)
}

// Records retrieves all the record's Records with an executor.
func (o *MediaFile) Records(mods ...qm.QueryMod) recordQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`record`.`media_file_id`=?", o.MediaFileID),
	)

	return Records(queryMods...)
}

// RecordTests retrieves all the record_test's RecordTests with an executor.
func (o *MediaFile) RecordTests(mods ...qm.QueryMod) recordTestQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`record_test`.`media_file_id`=?", o.MediaFileID),
	)

	return RecordTests(queryMods...)
}

// LoadMediaType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mediaFileL) LoadMediaType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMediaFile interface{}, mods queries.Applicator) error {
	var slice []*MediaFile
	var object *MediaFile

	if singular {
		var ok bool
		object, ok = maybeMediaFile.(*MediaFile)
		if !ok {
			object = new(MediaFile)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMediaFile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMediaFile))
			}
		}
	} else {
		s, ok := maybeMediaFile.(*[]*MediaFile)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMediaFile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMediaFile))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &mediaFileR{}
		}
		args[object.MediaTypeID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mediaFileR{}
			}

			args[obj.MediaTypeID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`media_type`),
		qm.WhereIn(`media_type.media_type_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MediaType")
	}

	var resultSlice []*MediaType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MediaType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for media_type")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for media_type")
	}

	if len(mediaTypeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MediaType = foreign
		if foreign.R == nil {
			foreign.R = &mediaTypeR{}
		}
		foreign.R.MediaFiles = append(foreign.R.MediaFiles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MediaTypeID == foreign.MediaTypeID {
				local.R.MediaType = foreign
				if foreign.R == nil {
					foreign.R = &mediaTypeR{}
				}
				foreign.R.MediaFiles = append(foreign.R.MediaFiles, local)
				break
			}
		}
	}

	return nil
}

// LoadRecords allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mediaFileL) LoadRecords(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMediaFile interface{}, mods queries.Applicator) error {
	var slice []*MediaFile
	var object *MediaFile

	if singular {
		var ok bool
		object, ok = maybeMediaFile.(*MediaFile)
		if !ok {
			object = new(MediaFile)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMediaFile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMediaFile))
			}
		}
	} else {
		s, ok := maybeMediaFile.(*[]*MediaFile)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMediaFile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMediaFile))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &mediaFileR{}
		}
		args[object.MediaFileID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mediaFileR{}
			}
			args[obj.MediaFileID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`record`),
		qm.WhereIn(`record.media_file_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load record")
	}

	var resultSlice []*Record
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice record")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on record")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for record")
	}

	if len(recordAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Records = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &recordR{}
			}
			foreign.R.MediaFile = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.MediaFileID, foreign.MediaFileID) {
				local.R.Records = append(local.R.Records, foreign)
				if foreign.R == nil {
					foreign.R = &recordR{}
				}
				foreign.R.MediaFile = local
				break
			}
		}
	}

	return nil
}

// LoadRecordTests allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mediaFileL) LoadRecordTests(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMediaFile interface{}, mods queries.Applicator) error {
	var slice []*MediaFile
	var object *MediaFile

	if singular {
		var ok bool
		object, ok = maybeMediaFile.(*MediaFile)
		if !ok {
			object = new(MediaFile)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMediaFile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMediaFile))
			}
		}
	} else {
		s, ok := maybeMediaFile.(*[]*MediaFile)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMediaFile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMediaFile))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &mediaFileR{}
		}
		args[object.MediaFileID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mediaFileR{}
			}
			args[obj.MediaFileID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`record_test`),
		qm.WhereIn(`record_test.media_file_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load record_test")
	}

	var resultSlice []*RecordTest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice record_test")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on record_test")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for record_test")
	}

	if len(recordTestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RecordTests = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &recordTestR{}
			}
			foreign.R.MediaFile = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.MediaFileID, foreign.MediaFileID) {
				local.R.RecordTests = append(local.R.RecordTests, foreign)
				if foreign.R == nil {
					foreign.R = &recordTestR{}
				}
				foreign.R.MediaFile = local
				break
			}
		}
	}

	return nil
}

// SetMediaTypeG of the mediaFile to the related item.
// Sets o.R.MediaType to related.
// Adds o to related.R.MediaFiles.
// Uses the global database handle.
func (o *MediaFile) SetMediaTypeG(ctx context.Context, insert bool, related *MediaType) error {
	return o.SetMediaType(ctx, boil.GetContextDB(), insert, related)
}

// SetMediaType of the mediaFile to the related item.
// Sets o.R.MediaType to related.
// Adds o to related.R.MediaFiles.
func (o *MediaFile) SetMediaType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MediaType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `media_file` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"media_type_id"}),
		strmangle.WhereClause("`", "`", 0, mediaFilePrimaryKeyColumns),
	)
	values := []interface{}{related.MediaTypeID, o.MediaFileID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MediaTypeID = related.MediaTypeID
	if o.R == nil {
		o.R = &mediaFileR{
			MediaType: related,
		}
	} else {
		o.R.MediaType = related
	}

	if related.R == nil {
		related.R = &mediaTypeR{
			MediaFiles: MediaFileSlice{o},
		}
	} else {
		related.R.MediaFiles = append(related.R.MediaFiles, o)
	}

	return nil
}

// AddRecordsG adds the given related objects to the existing relationships
// of the media_file, optionally inserting them as new records.
// Appends related to o.R.Records.
// Sets related.R.MediaFile appropriately.
// Uses the global database handle.
func (o *MediaFile) AddRecordsG(ctx context.Context, insert bool, related ...*Record) error {
	return o.AddRecords(ctx, boil.GetContextDB(), insert, related...)
}

// AddRecords adds the given related objects to the existing relationships
// of the media_file, optionally inserting them as new records.
// Appends related to o.R.Records.
// Sets related.R.MediaFile appropriately.
func (o *MediaFile) AddRecords(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Record) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.MediaFileID, o.MediaFileID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `record` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"media_file_id"}),
				strmangle.WhereClause("`", "`", 0, recordPrimaryKeyColumns),
			)
			values := []interface{}{o.MediaFileID, rel.RecordID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.MediaFileID, o.MediaFileID)
		}
	}

	if o.R == nil {
		o.R = &mediaFileR{
			Records: related,
		}
	} else {
		o.R.Records = append(o.R.Records, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &recordR{
				MediaFile: o,
			}
		} else {
			rel.R.MediaFile = o
		}
	}
	return nil
}

// SetRecordsG removes all previously related items of the
// media_file replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.MediaFile's Records accordingly.
// Replaces o.R.Records with related.
// Sets related.R.MediaFile's Records accordingly.
// Uses the global database handle.
func (o *MediaFile) SetRecordsG(ctx context.Context, insert bool, related ...*Record) error {
	return o.SetRecords(ctx, boil.GetContextDB(), insert, related...)
}

// SetRecords removes all previously related items of the
// media_file replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.MediaFile's Records accordingly.
// Replaces o.R.Records with related.
// Sets related.R.MediaFile's Records accordingly.
func (o *MediaFile) SetRecords(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Record) error {
	query := "update `record` set `media_file_id` = null where `media_file_id` = ?"
	values := []interface{}{o.MediaFileID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Records {
			queries.SetScanner(&rel.MediaFileID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.MediaFile = nil
		}
		o.R.Records = nil
	}

	return o.AddRecords(ctx, exec, insert, related...)
}

// RemoveRecordsG relationships from objects passed in.
// Removes related items from R.Records (uses pointer comparison, removal does not keep order)
// Sets related.R.MediaFile.
// Uses the global database handle.
func (o *MediaFile) RemoveRecordsG(ctx context.Context, related ...*Record) error {
	return o.RemoveRecords(ctx, boil.GetContextDB(), related...)
}

// RemoveRecords relationships from objects passed in.
// Removes related items from R.Records (uses pointer comparison, removal does not keep order)
// Sets related.R.MediaFile.
func (o *MediaFile) RemoveRecords(ctx context.Context, exec boil.ContextExecutor, related ...*Record) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.MediaFileID, nil)
		if rel.R != nil {
			rel.R.MediaFile = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("media_file_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Records {
			if rel != ri {
				continue
			}

			ln := len(o.R.Records)
			if ln > 1 && i < ln-1 {
				o.R.Records[i] = o.R.Records[ln-1]
			}
			o.R.Records = o.R.Records[:ln-1]
			break
		}
	}

	return nil
}

// AddRecordTestsG adds the given related objects to the existing relationships
// of the media_file, optionally inserting them as new records.
// Appends related to o.R.RecordTests.
// Sets related.R.MediaFile appropriately.
// Uses the global database handle.
func (o *MediaFile) AddRecordTestsG(ctx context.Context, insert bool, related ...*RecordTest) error {
	return o.AddRecordTests(ctx, boil.GetContextDB(), insert, related...)
}

// AddRecordTests adds the given related objects to the existing relationships
// of the media_file, optionally inserting them as new records.
// Appends related to o.R.RecordTests.
// Sets related.R.MediaFile appropriately.
func (o *MediaFile) AddRecordTests(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RecordTest) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.MediaFileID, o.MediaFileID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `record_test` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"media_file_id"}),
				strmangle.WhereClause("`", "`", 0, recordTestPrimaryKeyColumns),
			)
			values := []interface{}{o.MediaFileID, rel.RecordID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.MediaFileID, o.MediaFileID)
		}
	}

	if o.R == nil {
		o.R = &mediaFileR{
			RecordTests: related,
		}
	} else {
		o.R.RecordTests = append(o.R.RecordTests, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &recordTestR{
				MediaFile: o,
			}
		} else {
			rel.R.MediaFile = o
		}
	}
	return nil
}

// SetRecordTestsG removes all previously related items of the
// media_file replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.MediaFile's RecordTests accordingly.
// Replaces o.R.RecordTests with related.
// Sets related.R.MediaFile's RecordTests accordingly.
// Uses the global database handle.
func (o *MediaFile) SetRecordTestsG(ctx context.Context, insert bool, related ...*RecordTest) error {
	return o.SetRecordTests(ctx, boil.GetContextDB(), insert, related...)
}

// SetRecordTests removes all previously related items of the
// media_file replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.MediaFile's RecordTests accordingly.
// Replaces o.R.RecordTests with related.
// Sets related.R.MediaFile's RecordTests accordingly.
func (o *MediaFile) SetRecordTests(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RecordTest) error {
	query := "update `record_test` set `media_file_id` = null where `media_file_id` = ?"
	values := []interface{}{o.MediaFileID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.RecordTests {
			queries.SetScanner(&rel.MediaFileID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.MediaFile = nil
		}
		o.R.RecordTests = nil
	}

	return o.AddRecordTests(ctx, exec, insert, related...)
}

// RemoveRecordTestsG relationships from objects passed in.
// Removes related items from R.RecordTests (uses pointer comparison, removal does not keep order)
// Sets related.R.MediaFile.
// Uses the global database handle.
func (o *MediaFile) RemoveRecordTestsG(ctx context.Context, related ...*RecordTest) error {
	return o.RemoveRecordTests(ctx, boil.GetContextDB(), related...)
}

// RemoveRecordTests relationships from objects passed in.
// Removes related items from R.RecordTests (uses pointer comparison, removal does not keep order)
// Sets related.R.MediaFile.
func (o *MediaFile) RemoveRecordTests(ctx context.Context, exec boil.ContextExecutor, related ...*RecordTest) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.MediaFileID, nil)
		if rel.R != nil {
			rel.R.MediaFile = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("media_file_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.RecordTests {
			if rel != ri {
				continue
			}

			ln := len(o.R.RecordTests)
			if ln > 1 && i < ln-1 {
				o.R.RecordTests[i] = o.R.RecordTests[ln-1]
			}
			o.R.RecordTests = o.R.RecordTests[:ln-1]
			break
		}
	}

	return nil
}

// MediaFiles retrieves all the records using an executor.
func MediaFiles(mods ...qm.QueryMod) mediaFileQuery {
	mods = append(mods, qm.From("`media_file`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`media_file`.*"})
	}

	return mediaFileQuery{q}
}

// FindMediaFileG retrieves a single record by ID.
func FindMediaFileG(ctx context.Context, mediaFileID string, selectCols ...string) (*MediaFile, error) {
	return FindMediaFile(ctx, boil.GetContextDB(), mediaFileID, selectCols...)
}

// FindMediaFile retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMediaFile(ctx context.Context, exec boil.ContextExecutor, mediaFileID string, selectCols ...string) (*MediaFile, error) {
	mediaFileObj := &MediaFile{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `media_file` where `media_file_id`=?", sel,
	)

	q := queries.Raw(query, mediaFileID)

	err := q.Bind(ctx, exec, mediaFileObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from media_file")
	}

	if err = mediaFileObj.doAfterSelectHooks(ctx, exec); err != nil {
		return mediaFileObj, err
	}

	return mediaFileObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *MediaFile) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MediaFile) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no media_file provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mediaFileColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mediaFileInsertCacheMut.RLock()
	cache, cached := mediaFileInsertCache[key]
	mediaFileInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mediaFileAllColumns,
			mediaFileColumnsWithDefault,
			mediaFileColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mediaFileType, mediaFileMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mediaFileType, mediaFileMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `media_file` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `media_file` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `media_file` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, mediaFilePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into media_file")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.MediaFileID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for media_file")
	}

CacheNoHooks:
	if !cached {
		mediaFileInsertCacheMut.Lock()
		mediaFileInsertCache[key] = cache
		mediaFileInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single MediaFile record using the global executor.
// See Update for more documentation.
func (o *MediaFile) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the MediaFile.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MediaFile) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mediaFileUpdateCacheMut.RLock()
	cache, cached := mediaFileUpdateCache[key]
	mediaFileUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mediaFileAllColumns,
			mediaFilePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update media_file, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `media_file` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, mediaFilePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mediaFileType, mediaFileMapping, append(wl, mediaFilePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update media_file row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for media_file")
	}

	if !cached {
		mediaFileUpdateCacheMut.Lock()
		mediaFileUpdateCache[key] = cache
		mediaFileUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q mediaFileQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q mediaFileQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for media_file")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for media_file")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o MediaFileSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MediaFileSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mediaFilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `media_file` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mediaFilePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in mediaFile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all mediaFile")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *MediaFile) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLMediaFileUniqueColumns = []string{
	"media_file_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MediaFile) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no media_file provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mediaFileColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLMediaFileUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mediaFileUpsertCacheMut.RLock()
	cache, cached := mediaFileUpsertCache[key]
	mediaFileUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			mediaFileAllColumns,
			mediaFileColumnsWithDefault,
			mediaFileColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			mediaFileAllColumns,
			mediaFilePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert media_file, could not build update column list")
		}

		ret := strmangle.SetComplement(mediaFileAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`media_file`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `media_file` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(mediaFileType, mediaFileMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mediaFileType, mediaFileMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for media_file")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(mediaFileType, mediaFileMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for media_file")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for media_file")
	}

CacheNoHooks:
	if !cached {
		mediaFileUpsertCacheMut.Lock()
		mediaFileUpsertCache[key] = cache
		mediaFileUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single MediaFile record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *MediaFile) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single MediaFile record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MediaFile) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MediaFile provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mediaFilePrimaryKeyMapping)
	sql := "DELETE FROM `media_file` WHERE `media_file_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from media_file")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for media_file")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q mediaFileQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q mediaFileQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no mediaFileQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from media_file")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for media_file")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o MediaFileSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MediaFileSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(mediaFileBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mediaFilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `media_file` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mediaFilePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from mediaFile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for media_file")
	}

	if len(mediaFileAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *MediaFile) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no MediaFile provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MediaFile) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMediaFile(ctx, exec, o.MediaFileID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MediaFileSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty MediaFileSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MediaFileSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MediaFileSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mediaFilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `media_file`.* FROM `media_file` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mediaFilePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MediaFileSlice")
	}

	*o = slice

	return nil
}

// MediaFileExistsG checks if the MediaFile row exists.
func MediaFileExistsG(ctx context.Context, mediaFileID string) (bool, error) {
	return MediaFileExists(ctx, boil.GetContextDB(), mediaFileID)
}

// MediaFileExists checks if the MediaFile row exists.
func MediaFileExists(ctx context.Context, exec boil.ContextExecutor, mediaFileID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `media_file` where `media_file_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, mediaFileID)
	}
	row := exec.QueryRowContext(ctx, sql, mediaFileID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if media_file exists")
	}

	return exists, nil
}

// Exists checks if the MediaFile row exists.
func (o *MediaFile) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MediaFileExists(ctx, exec, o.MediaFileID)
}
