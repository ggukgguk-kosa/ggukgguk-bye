// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMemberVerifies(t *testing.T) {
	t.Parallel()

	query := MemberVerifies()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMemberVerifiesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemberVerify{}
	if err = randomize.Struct(seed, o, memberVerifyDBTypes, true, memberVerifyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberVerify struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MemberVerifies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMemberVerifiesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemberVerify{}
	if err = randomize.Struct(seed, o, memberVerifyDBTypes, true, memberVerifyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberVerify struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := MemberVerifies().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MemberVerifies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMemberVerifiesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemberVerify{}
	if err = randomize.Struct(seed, o, memberVerifyDBTypes, true, memberVerifyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberVerify struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MemberVerifySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MemberVerifies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMemberVerifiesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemberVerify{}
	if err = randomize.Struct(seed, o, memberVerifyDBTypes, true, memberVerifyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberVerify struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MemberVerifyExists(ctx, tx, o.VerifyID)
	if err != nil {
		t.Errorf("Unable to check if MemberVerify exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MemberVerifyExists to return true, but got false.")
	}
}

func testMemberVerifiesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemberVerify{}
	if err = randomize.Struct(seed, o, memberVerifyDBTypes, true, memberVerifyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberVerify struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	memberVerifyFound, err := FindMemberVerify(ctx, tx, o.VerifyID)
	if err != nil {
		t.Error(err)
	}

	if memberVerifyFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMemberVerifiesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemberVerify{}
	if err = randomize.Struct(seed, o, memberVerifyDBTypes, true, memberVerifyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberVerify struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = MemberVerifies().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testMemberVerifiesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemberVerify{}
	if err = randomize.Struct(seed, o, memberVerifyDBTypes, true, memberVerifyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberVerify struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := MemberVerifies().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMemberVerifiesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	memberVerifyOne := &MemberVerify{}
	memberVerifyTwo := &MemberVerify{}
	if err = randomize.Struct(seed, memberVerifyOne, memberVerifyDBTypes, false, memberVerifyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberVerify struct: %s", err)
	}
	if err = randomize.Struct(seed, memberVerifyTwo, memberVerifyDBTypes, false, memberVerifyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberVerify struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = memberVerifyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = memberVerifyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MemberVerifies().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMemberVerifiesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	memberVerifyOne := &MemberVerify{}
	memberVerifyTwo := &MemberVerify{}
	if err = randomize.Struct(seed, memberVerifyOne, memberVerifyDBTypes, false, memberVerifyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberVerify struct: %s", err)
	}
	if err = randomize.Struct(seed, memberVerifyTwo, memberVerifyDBTypes, false, memberVerifyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberVerify struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = memberVerifyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = memberVerifyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MemberVerifies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func memberVerifyBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *MemberVerify) error {
	*o = MemberVerify{}
	return nil
}

func memberVerifyAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *MemberVerify) error {
	*o = MemberVerify{}
	return nil
}

func memberVerifyAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *MemberVerify) error {
	*o = MemberVerify{}
	return nil
}

func memberVerifyBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MemberVerify) error {
	*o = MemberVerify{}
	return nil
}

func memberVerifyAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MemberVerify) error {
	*o = MemberVerify{}
	return nil
}

func memberVerifyBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MemberVerify) error {
	*o = MemberVerify{}
	return nil
}

func memberVerifyAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MemberVerify) error {
	*o = MemberVerify{}
	return nil
}

func memberVerifyBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MemberVerify) error {
	*o = MemberVerify{}
	return nil
}

func memberVerifyAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MemberVerify) error {
	*o = MemberVerify{}
	return nil
}

func testMemberVerifiesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &MemberVerify{}
	o := &MemberVerify{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, memberVerifyDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MemberVerify object: %s", err)
	}

	AddMemberVerifyHook(boil.BeforeInsertHook, memberVerifyBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	memberVerifyBeforeInsertHooks = []MemberVerifyHook{}

	AddMemberVerifyHook(boil.AfterInsertHook, memberVerifyAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	memberVerifyAfterInsertHooks = []MemberVerifyHook{}

	AddMemberVerifyHook(boil.AfterSelectHook, memberVerifyAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	memberVerifyAfterSelectHooks = []MemberVerifyHook{}

	AddMemberVerifyHook(boil.BeforeUpdateHook, memberVerifyBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	memberVerifyBeforeUpdateHooks = []MemberVerifyHook{}

	AddMemberVerifyHook(boil.AfterUpdateHook, memberVerifyAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	memberVerifyAfterUpdateHooks = []MemberVerifyHook{}

	AddMemberVerifyHook(boil.BeforeDeleteHook, memberVerifyBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	memberVerifyBeforeDeleteHooks = []MemberVerifyHook{}

	AddMemberVerifyHook(boil.AfterDeleteHook, memberVerifyAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	memberVerifyAfterDeleteHooks = []MemberVerifyHook{}

	AddMemberVerifyHook(boil.BeforeUpsertHook, memberVerifyBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	memberVerifyBeforeUpsertHooks = []MemberVerifyHook{}

	AddMemberVerifyHook(boil.AfterUpsertHook, memberVerifyAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	memberVerifyAfterUpsertHooks = []MemberVerifyHook{}
}

func testMemberVerifiesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemberVerify{}
	if err = randomize.Struct(seed, o, memberVerifyDBTypes, true, memberVerifyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberVerify struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MemberVerifies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMemberVerifiesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemberVerify{}
	if err = randomize.Struct(seed, o, memberVerifyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MemberVerify struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(memberVerifyColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := MemberVerifies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMemberVerifiesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemberVerify{}
	if err = randomize.Struct(seed, o, memberVerifyDBTypes, true, memberVerifyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberVerify struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMemberVerifiesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemberVerify{}
	if err = randomize.Struct(seed, o, memberVerifyDBTypes, true, memberVerifyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberVerify struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MemberVerifySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMemberVerifiesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemberVerify{}
	if err = randomize.Struct(seed, o, memberVerifyDBTypes, true, memberVerifyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberVerify struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MemberVerifies().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	memberVerifyDBTypes = map[string]string{`VerifyID`: `int`, `VerifyCreatedAt`: `datetime`, `VerifyEmail`: `varchar`, `VerifyCode`: `char`}
	_                   = bytes.MinRead
)

func testMemberVerifiesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(memberVerifyPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(memberVerifyAllColumns) == len(memberVerifyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MemberVerify{}
	if err = randomize.Struct(seed, o, memberVerifyDBTypes, true, memberVerifyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberVerify struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MemberVerifies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, memberVerifyDBTypes, true, memberVerifyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MemberVerify struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMemberVerifiesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(memberVerifyAllColumns) == len(memberVerifyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MemberVerify{}
	if err = randomize.Struct(seed, o, memberVerifyDBTypes, true, memberVerifyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberVerify struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MemberVerifies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, memberVerifyDBTypes, true, memberVerifyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MemberVerify struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(memberVerifyAllColumns, memberVerifyPrimaryKeyColumns) {
		fields = memberVerifyAllColumns
	} else {
		fields = strmangle.SetComplement(
			memberVerifyAllColumns,
			memberVerifyPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MemberVerifySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMemberVerifiesUpsert(t *testing.T) {
	t.Parallel()

	if len(memberVerifyAllColumns) == len(memberVerifyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLMemberVerifyUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := MemberVerify{}
	if err = randomize.Struct(seed, &o, memberVerifyDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MemberVerify struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MemberVerify: %s", err)
	}

	count, err := MemberVerifies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, memberVerifyDBTypes, false, memberVerifyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MemberVerify struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MemberVerify: %s", err)
	}

	count, err = MemberVerifies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
