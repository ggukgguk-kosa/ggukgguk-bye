// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testFriendRequests(t *testing.T) {
	t.Parallel()

	query := FriendRequests()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testFriendRequestsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FriendRequest{}
	if err = randomize.Struct(seed, o, friendRequestDBTypes, true, friendRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FriendRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FriendRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFriendRequestsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FriendRequest{}
	if err = randomize.Struct(seed, o, friendRequestDBTypes, true, friendRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FriendRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := FriendRequests().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FriendRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFriendRequestsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FriendRequest{}
	if err = randomize.Struct(seed, o, friendRequestDBTypes, true, friendRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FriendRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FriendRequestSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FriendRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFriendRequestsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FriendRequest{}
	if err = randomize.Struct(seed, o, friendRequestDBTypes, true, friendRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FriendRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := FriendRequestExists(ctx, tx, o.FriendRequestID)
	if err != nil {
		t.Errorf("Unable to check if FriendRequest exists: %s", err)
	}
	if !e {
		t.Errorf("Expected FriendRequestExists to return true, but got false.")
	}
}

func testFriendRequestsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FriendRequest{}
	if err = randomize.Struct(seed, o, friendRequestDBTypes, true, friendRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FriendRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	friendRequestFound, err := FindFriendRequest(ctx, tx, o.FriendRequestID)
	if err != nil {
		t.Error(err)
	}

	if friendRequestFound == nil {
		t.Error("want a record, got nil")
	}
}

func testFriendRequestsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FriendRequest{}
	if err = randomize.Struct(seed, o, friendRequestDBTypes, true, friendRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FriendRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = FriendRequests().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testFriendRequestsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FriendRequest{}
	if err = randomize.Struct(seed, o, friendRequestDBTypes, true, friendRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FriendRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := FriendRequests().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testFriendRequestsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	friendRequestOne := &FriendRequest{}
	friendRequestTwo := &FriendRequest{}
	if err = randomize.Struct(seed, friendRequestOne, friendRequestDBTypes, false, friendRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FriendRequest struct: %s", err)
	}
	if err = randomize.Struct(seed, friendRequestTwo, friendRequestDBTypes, false, friendRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FriendRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = friendRequestOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = friendRequestTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := FriendRequests().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testFriendRequestsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	friendRequestOne := &FriendRequest{}
	friendRequestTwo := &FriendRequest{}
	if err = randomize.Struct(seed, friendRequestOne, friendRequestDBTypes, false, friendRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FriendRequest struct: %s", err)
	}
	if err = randomize.Struct(seed, friendRequestTwo, friendRequestDBTypes, false, friendRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FriendRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = friendRequestOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = friendRequestTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FriendRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func friendRequestBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *FriendRequest) error {
	*o = FriendRequest{}
	return nil
}

func friendRequestAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *FriendRequest) error {
	*o = FriendRequest{}
	return nil
}

func friendRequestAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *FriendRequest) error {
	*o = FriendRequest{}
	return nil
}

func friendRequestBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *FriendRequest) error {
	*o = FriendRequest{}
	return nil
}

func friendRequestAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *FriendRequest) error {
	*o = FriendRequest{}
	return nil
}

func friendRequestBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *FriendRequest) error {
	*o = FriendRequest{}
	return nil
}

func friendRequestAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *FriendRequest) error {
	*o = FriendRequest{}
	return nil
}

func friendRequestBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *FriendRequest) error {
	*o = FriendRequest{}
	return nil
}

func friendRequestAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *FriendRequest) error {
	*o = FriendRequest{}
	return nil
}

func testFriendRequestsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &FriendRequest{}
	o := &FriendRequest{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, friendRequestDBTypes, false); err != nil {
		t.Errorf("Unable to randomize FriendRequest object: %s", err)
	}

	AddFriendRequestHook(boil.BeforeInsertHook, friendRequestBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	friendRequestBeforeInsertHooks = []FriendRequestHook{}

	AddFriendRequestHook(boil.AfterInsertHook, friendRequestAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	friendRequestAfterInsertHooks = []FriendRequestHook{}

	AddFriendRequestHook(boil.AfterSelectHook, friendRequestAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	friendRequestAfterSelectHooks = []FriendRequestHook{}

	AddFriendRequestHook(boil.BeforeUpdateHook, friendRequestBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	friendRequestBeforeUpdateHooks = []FriendRequestHook{}

	AddFriendRequestHook(boil.AfterUpdateHook, friendRequestAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	friendRequestAfterUpdateHooks = []FriendRequestHook{}

	AddFriendRequestHook(boil.BeforeDeleteHook, friendRequestBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	friendRequestBeforeDeleteHooks = []FriendRequestHook{}

	AddFriendRequestHook(boil.AfterDeleteHook, friendRequestAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	friendRequestAfterDeleteHooks = []FriendRequestHook{}

	AddFriendRequestHook(boil.BeforeUpsertHook, friendRequestBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	friendRequestBeforeUpsertHooks = []FriendRequestHook{}

	AddFriendRequestHook(boil.AfterUpsertHook, friendRequestAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	friendRequestAfterUpsertHooks = []FriendRequestHook{}
}

func testFriendRequestsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FriendRequest{}
	if err = randomize.Struct(seed, o, friendRequestDBTypes, true, friendRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FriendRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FriendRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFriendRequestsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FriendRequest{}
	if err = randomize.Struct(seed, o, friendRequestDBTypes, true); err != nil {
		t.Errorf("Unable to randomize FriendRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(friendRequestColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := FriendRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFriendRequestToOneMemberUsingFromMember(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local FriendRequest
	var foreign Member

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, friendRequestDBTypes, false, friendRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FriendRequest struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, memberDBTypes, false, memberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Member struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.FromMemberID = foreign.MemberID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.FromMember().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.MemberID != foreign.MemberID {
		t.Errorf("want: %v, got %v", foreign.MemberID, check.MemberID)
	}

	ranAfterSelectHook := false
	AddMemberHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Member) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := FriendRequestSlice{&local}
	if err = local.L.LoadFromMember(ctx, tx, false, (*[]*FriendRequest)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FromMember == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.FromMember = nil
	if err = local.L.LoadFromMember(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FromMember == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testFriendRequestToOneMemberUsingToMember(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local FriendRequest
	var foreign Member

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, friendRequestDBTypes, false, friendRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FriendRequest struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, memberDBTypes, false, memberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Member struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ToMemberID = foreign.MemberID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ToMember().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.MemberID != foreign.MemberID {
		t.Errorf("want: %v, got %v", foreign.MemberID, check.MemberID)
	}

	ranAfterSelectHook := false
	AddMemberHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Member) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := FriendRequestSlice{&local}
	if err = local.L.LoadToMember(ctx, tx, false, (*[]*FriendRequest)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ToMember == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ToMember = nil
	if err = local.L.LoadToMember(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ToMember == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testFriendRequestToOneSetOpMemberUsingFromMember(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a FriendRequest
	var b, c Member

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, friendRequestDBTypes, false, strmangle.SetComplement(friendRequestPrimaryKeyColumns, friendRequestColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, memberDBTypes, false, strmangle.SetComplement(memberPrimaryKeyColumns, memberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, memberDBTypes, false, strmangle.SetComplement(memberPrimaryKeyColumns, memberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Member{&b, &c} {
		err = a.SetFromMember(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.FromMember != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.FromMemberFriendRequests[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.FromMemberID != x.MemberID {
			t.Error("foreign key was wrong value", a.FromMemberID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.FromMemberID))
		reflect.Indirect(reflect.ValueOf(&a.FromMemberID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.FromMemberID != x.MemberID {
			t.Error("foreign key was wrong value", a.FromMemberID, x.MemberID)
		}
	}
}
func testFriendRequestToOneSetOpMemberUsingToMember(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a FriendRequest
	var b, c Member

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, friendRequestDBTypes, false, strmangle.SetComplement(friendRequestPrimaryKeyColumns, friendRequestColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, memberDBTypes, false, strmangle.SetComplement(memberPrimaryKeyColumns, memberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, memberDBTypes, false, strmangle.SetComplement(memberPrimaryKeyColumns, memberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Member{&b, &c} {
		err = a.SetToMember(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ToMember != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ToMemberFriendRequests[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ToMemberID != x.MemberID {
			t.Error("foreign key was wrong value", a.ToMemberID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ToMemberID))
		reflect.Indirect(reflect.ValueOf(&a.ToMemberID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ToMemberID != x.MemberID {
			t.Error("foreign key was wrong value", a.ToMemberID, x.MemberID)
		}
	}
}

func testFriendRequestsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FriendRequest{}
	if err = randomize.Struct(seed, o, friendRequestDBTypes, true, friendRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FriendRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFriendRequestsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FriendRequest{}
	if err = randomize.Struct(seed, o, friendRequestDBTypes, true, friendRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FriendRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FriendRequestSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFriendRequestsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FriendRequest{}
	if err = randomize.Struct(seed, o, friendRequestDBTypes, true, friendRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FriendRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := FriendRequests().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	friendRequestDBTypes = map[string]string{`FriendRequestID`: `int`, `FromMemberID`: `varchar`, `ToMemberID`: `varchar`, `FriendRequestTime`: `datetime`}
	_                    = bytes.MinRead
)

func testFriendRequestsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(friendRequestPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(friendRequestAllColumns) == len(friendRequestPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &FriendRequest{}
	if err = randomize.Struct(seed, o, friendRequestDBTypes, true, friendRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FriendRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FriendRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, friendRequestDBTypes, true, friendRequestPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FriendRequest struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testFriendRequestsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(friendRequestAllColumns) == len(friendRequestPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &FriendRequest{}
	if err = randomize.Struct(seed, o, friendRequestDBTypes, true, friendRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FriendRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FriendRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, friendRequestDBTypes, true, friendRequestPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FriendRequest struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(friendRequestAllColumns, friendRequestPrimaryKeyColumns) {
		fields = friendRequestAllColumns
	} else {
		fields = strmangle.SetComplement(
			friendRequestAllColumns,
			friendRequestPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := FriendRequestSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testFriendRequestsUpsert(t *testing.T) {
	t.Parallel()

	if len(friendRequestAllColumns) == len(friendRequestPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLFriendRequestUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := FriendRequest{}
	if err = randomize.Struct(seed, &o, friendRequestDBTypes, false); err != nil {
		t.Errorf("Unable to randomize FriendRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert FriendRequest: %s", err)
	}

	count, err := FriendRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, friendRequestDBTypes, false, friendRequestPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FriendRequest struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert FriendRequest: %s", err)
	}

	count, err = FriendRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
