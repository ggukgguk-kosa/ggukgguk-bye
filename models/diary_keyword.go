// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DiaryKeyword is an object representing the database table.
type DiaryKeyword struct {
	DiaryKeywordID int    `boil:"diary_keyword_id" json:"diary_keyword_id" toml:"diary_keyword_id" yaml:"diary_keyword_id"`
	DiaryID        int    `boil:"diary_id" json:"diary_id" toml:"diary_id" yaml:"diary_id"`
	DiaryKeyword   string `boil:"diary_keyword" json:"diary_keyword" toml:"diary_keyword" yaml:"diary_keyword"`
	DiaryFreq      int    `boil:"diary_freq" json:"diary_freq" toml:"diary_freq" yaml:"diary_freq"`

	R *diaryKeywordR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L diaryKeywordL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DiaryKeywordColumns = struct {
	DiaryKeywordID string
	DiaryID        string
	DiaryKeyword   string
	DiaryFreq      string
}{
	DiaryKeywordID: "diary_keyword_id",
	DiaryID:        "diary_id",
	DiaryKeyword:   "diary_keyword",
	DiaryFreq:      "diary_freq",
}

var DiaryKeywordTableColumns = struct {
	DiaryKeywordID string
	DiaryID        string
	DiaryKeyword   string
	DiaryFreq      string
}{
	DiaryKeywordID: "diary_keyword.diary_keyword_id",
	DiaryID:        "diary_keyword.diary_id",
	DiaryKeyword:   "diary_keyword.diary_keyword",
	DiaryFreq:      "diary_keyword.diary_freq",
}

// Generated where

var DiaryKeywordWhere = struct {
	DiaryKeywordID whereHelperint
	DiaryID        whereHelperint
	DiaryKeyword   whereHelperstring
	DiaryFreq      whereHelperint
}{
	DiaryKeywordID: whereHelperint{field: "`diary_keyword`.`diary_keyword_id`"},
	DiaryID:        whereHelperint{field: "`diary_keyword`.`diary_id`"},
	DiaryKeyword:   whereHelperstring{field: "`diary_keyword`.`diary_keyword`"},
	DiaryFreq:      whereHelperint{field: "`diary_keyword`.`diary_freq`"},
}

// DiaryKeywordRels is where relationship names are stored.
var DiaryKeywordRels = struct {
	Diary string
}{
	Diary: "Diary",
}

// diaryKeywordR is where relationships are stored.
type diaryKeywordR struct {
	Diary *Diary `boil:"Diary" json:"Diary" toml:"Diary" yaml:"Diary"`
}

// NewStruct creates a new relationship struct
func (*diaryKeywordR) NewStruct() *diaryKeywordR {
	return &diaryKeywordR{}
}

func (r *diaryKeywordR) GetDiary() *Diary {
	if r == nil {
		return nil
	}
	return r.Diary
}

// diaryKeywordL is where Load methods for each relationship are stored.
type diaryKeywordL struct{}

var (
	diaryKeywordAllColumns            = []string{"diary_keyword_id", "diary_id", "diary_keyword", "diary_freq"}
	diaryKeywordColumnsWithoutDefault = []string{"diary_id", "diary_keyword", "diary_freq"}
	diaryKeywordColumnsWithDefault    = []string{"diary_keyword_id"}
	diaryKeywordPrimaryKeyColumns     = []string{"diary_keyword_id"}
	diaryKeywordGeneratedColumns      = []string{}
)

type (
	// DiaryKeywordSlice is an alias for a slice of pointers to DiaryKeyword.
	// This should almost always be used instead of []DiaryKeyword.
	DiaryKeywordSlice []*DiaryKeyword
	// DiaryKeywordHook is the signature for custom DiaryKeyword hook methods
	DiaryKeywordHook func(context.Context, boil.ContextExecutor, *DiaryKeyword) error

	diaryKeywordQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	diaryKeywordType                 = reflect.TypeOf(&DiaryKeyword{})
	diaryKeywordMapping              = queries.MakeStructMapping(diaryKeywordType)
	diaryKeywordPrimaryKeyMapping, _ = queries.BindMapping(diaryKeywordType, diaryKeywordMapping, diaryKeywordPrimaryKeyColumns)
	diaryKeywordInsertCacheMut       sync.RWMutex
	diaryKeywordInsertCache          = make(map[string]insertCache)
	diaryKeywordUpdateCacheMut       sync.RWMutex
	diaryKeywordUpdateCache          = make(map[string]updateCache)
	diaryKeywordUpsertCacheMut       sync.RWMutex
	diaryKeywordUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var diaryKeywordAfterSelectMu sync.Mutex
var diaryKeywordAfterSelectHooks []DiaryKeywordHook

var diaryKeywordBeforeInsertMu sync.Mutex
var diaryKeywordBeforeInsertHooks []DiaryKeywordHook
var diaryKeywordAfterInsertMu sync.Mutex
var diaryKeywordAfterInsertHooks []DiaryKeywordHook

var diaryKeywordBeforeUpdateMu sync.Mutex
var diaryKeywordBeforeUpdateHooks []DiaryKeywordHook
var diaryKeywordAfterUpdateMu sync.Mutex
var diaryKeywordAfterUpdateHooks []DiaryKeywordHook

var diaryKeywordBeforeDeleteMu sync.Mutex
var diaryKeywordBeforeDeleteHooks []DiaryKeywordHook
var diaryKeywordAfterDeleteMu sync.Mutex
var diaryKeywordAfterDeleteHooks []DiaryKeywordHook

var diaryKeywordBeforeUpsertMu sync.Mutex
var diaryKeywordBeforeUpsertHooks []DiaryKeywordHook
var diaryKeywordAfterUpsertMu sync.Mutex
var diaryKeywordAfterUpsertHooks []DiaryKeywordHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DiaryKeyword) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range diaryKeywordAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DiaryKeyword) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range diaryKeywordBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DiaryKeyword) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range diaryKeywordAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DiaryKeyword) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range diaryKeywordBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DiaryKeyword) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range diaryKeywordAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DiaryKeyword) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range diaryKeywordBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DiaryKeyword) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range diaryKeywordAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DiaryKeyword) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range diaryKeywordBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DiaryKeyword) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range diaryKeywordAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDiaryKeywordHook registers your hook function for all future operations.
func AddDiaryKeywordHook(hookPoint boil.HookPoint, diaryKeywordHook DiaryKeywordHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		diaryKeywordAfterSelectMu.Lock()
		diaryKeywordAfterSelectHooks = append(diaryKeywordAfterSelectHooks, diaryKeywordHook)
		diaryKeywordAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		diaryKeywordBeforeInsertMu.Lock()
		diaryKeywordBeforeInsertHooks = append(diaryKeywordBeforeInsertHooks, diaryKeywordHook)
		diaryKeywordBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		diaryKeywordAfterInsertMu.Lock()
		diaryKeywordAfterInsertHooks = append(diaryKeywordAfterInsertHooks, diaryKeywordHook)
		diaryKeywordAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		diaryKeywordBeforeUpdateMu.Lock()
		diaryKeywordBeforeUpdateHooks = append(diaryKeywordBeforeUpdateHooks, diaryKeywordHook)
		diaryKeywordBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		diaryKeywordAfterUpdateMu.Lock()
		diaryKeywordAfterUpdateHooks = append(diaryKeywordAfterUpdateHooks, diaryKeywordHook)
		diaryKeywordAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		diaryKeywordBeforeDeleteMu.Lock()
		diaryKeywordBeforeDeleteHooks = append(diaryKeywordBeforeDeleteHooks, diaryKeywordHook)
		diaryKeywordBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		diaryKeywordAfterDeleteMu.Lock()
		diaryKeywordAfterDeleteHooks = append(diaryKeywordAfterDeleteHooks, diaryKeywordHook)
		diaryKeywordAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		diaryKeywordBeforeUpsertMu.Lock()
		diaryKeywordBeforeUpsertHooks = append(diaryKeywordBeforeUpsertHooks, diaryKeywordHook)
		diaryKeywordBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		diaryKeywordAfterUpsertMu.Lock()
		diaryKeywordAfterUpsertHooks = append(diaryKeywordAfterUpsertHooks, diaryKeywordHook)
		diaryKeywordAfterUpsertMu.Unlock()
	}
}

// OneG returns a single diaryKeyword record from the query using the global executor.
func (q diaryKeywordQuery) OneG(ctx context.Context) (*DiaryKeyword, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single diaryKeyword record from the query.
func (q diaryKeywordQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DiaryKeyword, error) {
	o := &DiaryKeyword{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for diary_keyword")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all DiaryKeyword records from the query using the global executor.
func (q diaryKeywordQuery) AllG(ctx context.Context) (DiaryKeywordSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all DiaryKeyword records from the query.
func (q diaryKeywordQuery) All(ctx context.Context, exec boil.ContextExecutor) (DiaryKeywordSlice, error) {
	var o []*DiaryKeyword

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DiaryKeyword slice")
	}

	if len(diaryKeywordAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all DiaryKeyword records in the query using the global executor
func (q diaryKeywordQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all DiaryKeyword records in the query.
func (q diaryKeywordQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count diary_keyword rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q diaryKeywordQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q diaryKeywordQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if diary_keyword exists")
	}

	return count > 0, nil
}

// Diary pointed to by the foreign key.
func (o *DiaryKeyword) Diary(mods ...qm.QueryMod) diaryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`diary_id` = ?", o.DiaryID),
	}

	queryMods = append(queryMods, mods...)

	return Diaries(queryMods...)
}

// LoadDiary allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (diaryKeywordL) LoadDiary(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDiaryKeyword interface{}, mods queries.Applicator) error {
	var slice []*DiaryKeyword
	var object *DiaryKeyword

	if singular {
		var ok bool
		object, ok = maybeDiaryKeyword.(*DiaryKeyword)
		if !ok {
			object = new(DiaryKeyword)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDiaryKeyword)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDiaryKeyword))
			}
		}
	} else {
		s, ok := maybeDiaryKeyword.(*[]*DiaryKeyword)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDiaryKeyword)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDiaryKeyword))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &diaryKeywordR{}
		}
		args[object.DiaryID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &diaryKeywordR{}
			}

			args[obj.DiaryID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`diary`),
		qm.WhereIn(`diary.diary_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Diary")
	}

	var resultSlice []*Diary
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Diary")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for diary")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for diary")
	}

	if len(diaryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Diary = foreign
		if foreign.R == nil {
			foreign.R = &diaryR{}
		}
		foreign.R.DiaryKeywords = append(foreign.R.DiaryKeywords, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DiaryID == foreign.DiaryID {
				local.R.Diary = foreign
				if foreign.R == nil {
					foreign.R = &diaryR{}
				}
				foreign.R.DiaryKeywords = append(foreign.R.DiaryKeywords, local)
				break
			}
		}
	}

	return nil
}

// SetDiaryG of the diaryKeyword to the related item.
// Sets o.R.Diary to related.
// Adds o to related.R.DiaryKeywords.
// Uses the global database handle.
func (o *DiaryKeyword) SetDiaryG(ctx context.Context, insert bool, related *Diary) error {
	return o.SetDiary(ctx, boil.GetContextDB(), insert, related)
}

// SetDiary of the diaryKeyword to the related item.
// Sets o.R.Diary to related.
// Adds o to related.R.DiaryKeywords.
func (o *DiaryKeyword) SetDiary(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Diary) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `diary_keyword` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"diary_id"}),
		strmangle.WhereClause("`", "`", 0, diaryKeywordPrimaryKeyColumns),
	)
	values := []interface{}{related.DiaryID, o.DiaryKeywordID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DiaryID = related.DiaryID
	if o.R == nil {
		o.R = &diaryKeywordR{
			Diary: related,
		}
	} else {
		o.R.Diary = related
	}

	if related.R == nil {
		related.R = &diaryR{
			DiaryKeywords: DiaryKeywordSlice{o},
		}
	} else {
		related.R.DiaryKeywords = append(related.R.DiaryKeywords, o)
	}

	return nil
}

// DiaryKeywords retrieves all the records using an executor.
func DiaryKeywords(mods ...qm.QueryMod) diaryKeywordQuery {
	mods = append(mods, qm.From("`diary_keyword`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`diary_keyword`.*"})
	}

	return diaryKeywordQuery{q}
}

// FindDiaryKeywordG retrieves a single record by ID.
func FindDiaryKeywordG(ctx context.Context, diaryKeywordID int, selectCols ...string) (*DiaryKeyword, error) {
	return FindDiaryKeyword(ctx, boil.GetContextDB(), diaryKeywordID, selectCols...)
}

// FindDiaryKeyword retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDiaryKeyword(ctx context.Context, exec boil.ContextExecutor, diaryKeywordID int, selectCols ...string) (*DiaryKeyword, error) {
	diaryKeywordObj := &DiaryKeyword{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `diary_keyword` where `diary_keyword_id`=?", sel,
	)

	q := queries.Raw(query, diaryKeywordID)

	err := q.Bind(ctx, exec, diaryKeywordObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from diary_keyword")
	}

	if err = diaryKeywordObj.doAfterSelectHooks(ctx, exec); err != nil {
		return diaryKeywordObj, err
	}

	return diaryKeywordObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *DiaryKeyword) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DiaryKeyword) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no diary_keyword provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(diaryKeywordColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	diaryKeywordInsertCacheMut.RLock()
	cache, cached := diaryKeywordInsertCache[key]
	diaryKeywordInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			diaryKeywordAllColumns,
			diaryKeywordColumnsWithDefault,
			diaryKeywordColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(diaryKeywordType, diaryKeywordMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(diaryKeywordType, diaryKeywordMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `diary_keyword` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `diary_keyword` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `diary_keyword` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, diaryKeywordPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into diary_keyword")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.DiaryKeywordID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == diaryKeywordMapping["diary_keyword_id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.DiaryKeywordID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for diary_keyword")
	}

CacheNoHooks:
	if !cached {
		diaryKeywordInsertCacheMut.Lock()
		diaryKeywordInsertCache[key] = cache
		diaryKeywordInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single DiaryKeyword record using the global executor.
// See Update for more documentation.
func (o *DiaryKeyword) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the DiaryKeyword.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DiaryKeyword) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	diaryKeywordUpdateCacheMut.RLock()
	cache, cached := diaryKeywordUpdateCache[key]
	diaryKeywordUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			diaryKeywordAllColumns,
			diaryKeywordPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update diary_keyword, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `diary_keyword` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, diaryKeywordPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(diaryKeywordType, diaryKeywordMapping, append(wl, diaryKeywordPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update diary_keyword row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for diary_keyword")
	}

	if !cached {
		diaryKeywordUpdateCacheMut.Lock()
		diaryKeywordUpdateCache[key] = cache
		diaryKeywordUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q diaryKeywordQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q diaryKeywordQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for diary_keyword")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for diary_keyword")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o DiaryKeywordSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DiaryKeywordSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), diaryKeywordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `diary_keyword` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, diaryKeywordPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in diaryKeyword slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all diaryKeyword")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *DiaryKeyword) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLDiaryKeywordUniqueColumns = []string{
	"diary_keyword_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DiaryKeyword) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no diary_keyword provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(diaryKeywordColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDiaryKeywordUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	diaryKeywordUpsertCacheMut.RLock()
	cache, cached := diaryKeywordUpsertCache[key]
	diaryKeywordUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			diaryKeywordAllColumns,
			diaryKeywordColumnsWithDefault,
			diaryKeywordColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			diaryKeywordAllColumns,
			diaryKeywordPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert diary_keyword, could not build update column list")
		}

		ret := strmangle.SetComplement(diaryKeywordAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`diary_keyword`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `diary_keyword` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(diaryKeywordType, diaryKeywordMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(diaryKeywordType, diaryKeywordMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for diary_keyword")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.DiaryKeywordID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == diaryKeywordMapping["diary_keyword_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(diaryKeywordType, diaryKeywordMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for diary_keyword")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for diary_keyword")
	}

CacheNoHooks:
	if !cached {
		diaryKeywordUpsertCacheMut.Lock()
		diaryKeywordUpsertCache[key] = cache
		diaryKeywordUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single DiaryKeyword record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *DiaryKeyword) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single DiaryKeyword record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DiaryKeyword) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DiaryKeyword provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), diaryKeywordPrimaryKeyMapping)
	sql := "DELETE FROM `diary_keyword` WHERE `diary_keyword_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from diary_keyword")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for diary_keyword")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q diaryKeywordQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q diaryKeywordQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no diaryKeywordQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from diary_keyword")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for diary_keyword")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o DiaryKeywordSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DiaryKeywordSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(diaryKeywordBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), diaryKeywordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `diary_keyword` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, diaryKeywordPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from diaryKeyword slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for diary_keyword")
	}

	if len(diaryKeywordAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *DiaryKeyword) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no DiaryKeyword provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DiaryKeyword) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDiaryKeyword(ctx, exec, o.DiaryKeywordID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DiaryKeywordSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty DiaryKeywordSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DiaryKeywordSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DiaryKeywordSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), diaryKeywordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `diary_keyword`.* FROM `diary_keyword` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, diaryKeywordPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DiaryKeywordSlice")
	}

	*o = slice

	return nil
}

// DiaryKeywordExistsG checks if the DiaryKeyword row exists.
func DiaryKeywordExistsG(ctx context.Context, diaryKeywordID int) (bool, error) {
	return DiaryKeywordExists(ctx, boil.GetContextDB(), diaryKeywordID)
}

// DiaryKeywordExists checks if the DiaryKeyword row exists.
func DiaryKeywordExists(ctx context.Context, exec boil.ContextExecutor, diaryKeywordID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `diary_keyword` where `diary_keyword_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, diaryKeywordID)
	}
	row := exec.QueryRowContext(ctx, sql, diaryKeywordID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if diary_keyword exists")
	}

	return exists, nil
}

// Exists checks if the DiaryKeyword row exists.
func (o *DiaryKeyword) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DiaryKeywordExists(ctx, exec, o.DiaryKeywordID)
}
