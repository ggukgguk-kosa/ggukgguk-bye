// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMediaFileBlockedHistories(t *testing.T) {
	t.Parallel()

	query := MediaFileBlockedHistories()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMediaFileBlockedHistoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MediaFileBlockedHistory{}
	if err = randomize.Struct(seed, o, mediaFileBlockedHistoryDBTypes, true, mediaFileBlockedHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MediaFileBlockedHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MediaFileBlockedHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMediaFileBlockedHistoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MediaFileBlockedHistory{}
	if err = randomize.Struct(seed, o, mediaFileBlockedHistoryDBTypes, true, mediaFileBlockedHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MediaFileBlockedHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := MediaFileBlockedHistories().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MediaFileBlockedHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMediaFileBlockedHistoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MediaFileBlockedHistory{}
	if err = randomize.Struct(seed, o, mediaFileBlockedHistoryDBTypes, true, mediaFileBlockedHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MediaFileBlockedHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MediaFileBlockedHistorySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MediaFileBlockedHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMediaFileBlockedHistoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MediaFileBlockedHistory{}
	if err = randomize.Struct(seed, o, mediaFileBlockedHistoryDBTypes, true, mediaFileBlockedHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MediaFileBlockedHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MediaFileBlockedHistoryExists(ctx, tx, o.MediaFileBlockedHistoryID)
	if err != nil {
		t.Errorf("Unable to check if MediaFileBlockedHistory exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MediaFileBlockedHistoryExists to return true, but got false.")
	}
}

func testMediaFileBlockedHistoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MediaFileBlockedHistory{}
	if err = randomize.Struct(seed, o, mediaFileBlockedHistoryDBTypes, true, mediaFileBlockedHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MediaFileBlockedHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	mediaFileBlockedHistoryFound, err := FindMediaFileBlockedHistory(ctx, tx, o.MediaFileBlockedHistoryID)
	if err != nil {
		t.Error(err)
	}

	if mediaFileBlockedHistoryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMediaFileBlockedHistoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MediaFileBlockedHistory{}
	if err = randomize.Struct(seed, o, mediaFileBlockedHistoryDBTypes, true, mediaFileBlockedHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MediaFileBlockedHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = MediaFileBlockedHistories().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testMediaFileBlockedHistoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MediaFileBlockedHistory{}
	if err = randomize.Struct(seed, o, mediaFileBlockedHistoryDBTypes, true, mediaFileBlockedHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MediaFileBlockedHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := MediaFileBlockedHistories().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMediaFileBlockedHistoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	mediaFileBlockedHistoryOne := &MediaFileBlockedHistory{}
	mediaFileBlockedHistoryTwo := &MediaFileBlockedHistory{}
	if err = randomize.Struct(seed, mediaFileBlockedHistoryOne, mediaFileBlockedHistoryDBTypes, false, mediaFileBlockedHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MediaFileBlockedHistory struct: %s", err)
	}
	if err = randomize.Struct(seed, mediaFileBlockedHistoryTwo, mediaFileBlockedHistoryDBTypes, false, mediaFileBlockedHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MediaFileBlockedHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = mediaFileBlockedHistoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = mediaFileBlockedHistoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MediaFileBlockedHistories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMediaFileBlockedHistoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	mediaFileBlockedHistoryOne := &MediaFileBlockedHistory{}
	mediaFileBlockedHistoryTwo := &MediaFileBlockedHistory{}
	if err = randomize.Struct(seed, mediaFileBlockedHistoryOne, mediaFileBlockedHistoryDBTypes, false, mediaFileBlockedHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MediaFileBlockedHistory struct: %s", err)
	}
	if err = randomize.Struct(seed, mediaFileBlockedHistoryTwo, mediaFileBlockedHistoryDBTypes, false, mediaFileBlockedHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MediaFileBlockedHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = mediaFileBlockedHistoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = mediaFileBlockedHistoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MediaFileBlockedHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func mediaFileBlockedHistoryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *MediaFileBlockedHistory) error {
	*o = MediaFileBlockedHistory{}
	return nil
}

func mediaFileBlockedHistoryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *MediaFileBlockedHistory) error {
	*o = MediaFileBlockedHistory{}
	return nil
}

func mediaFileBlockedHistoryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *MediaFileBlockedHistory) error {
	*o = MediaFileBlockedHistory{}
	return nil
}

func mediaFileBlockedHistoryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MediaFileBlockedHistory) error {
	*o = MediaFileBlockedHistory{}
	return nil
}

func mediaFileBlockedHistoryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MediaFileBlockedHistory) error {
	*o = MediaFileBlockedHistory{}
	return nil
}

func mediaFileBlockedHistoryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MediaFileBlockedHistory) error {
	*o = MediaFileBlockedHistory{}
	return nil
}

func mediaFileBlockedHistoryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MediaFileBlockedHistory) error {
	*o = MediaFileBlockedHistory{}
	return nil
}

func mediaFileBlockedHistoryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MediaFileBlockedHistory) error {
	*o = MediaFileBlockedHistory{}
	return nil
}

func mediaFileBlockedHistoryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MediaFileBlockedHistory) error {
	*o = MediaFileBlockedHistory{}
	return nil
}

func testMediaFileBlockedHistoriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &MediaFileBlockedHistory{}
	o := &MediaFileBlockedHistory{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, mediaFileBlockedHistoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MediaFileBlockedHistory object: %s", err)
	}

	AddMediaFileBlockedHistoryHook(boil.BeforeInsertHook, mediaFileBlockedHistoryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	mediaFileBlockedHistoryBeforeInsertHooks = []MediaFileBlockedHistoryHook{}

	AddMediaFileBlockedHistoryHook(boil.AfterInsertHook, mediaFileBlockedHistoryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	mediaFileBlockedHistoryAfterInsertHooks = []MediaFileBlockedHistoryHook{}

	AddMediaFileBlockedHistoryHook(boil.AfterSelectHook, mediaFileBlockedHistoryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	mediaFileBlockedHistoryAfterSelectHooks = []MediaFileBlockedHistoryHook{}

	AddMediaFileBlockedHistoryHook(boil.BeforeUpdateHook, mediaFileBlockedHistoryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	mediaFileBlockedHistoryBeforeUpdateHooks = []MediaFileBlockedHistoryHook{}

	AddMediaFileBlockedHistoryHook(boil.AfterUpdateHook, mediaFileBlockedHistoryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	mediaFileBlockedHistoryAfterUpdateHooks = []MediaFileBlockedHistoryHook{}

	AddMediaFileBlockedHistoryHook(boil.BeforeDeleteHook, mediaFileBlockedHistoryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	mediaFileBlockedHistoryBeforeDeleteHooks = []MediaFileBlockedHistoryHook{}

	AddMediaFileBlockedHistoryHook(boil.AfterDeleteHook, mediaFileBlockedHistoryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	mediaFileBlockedHistoryAfterDeleteHooks = []MediaFileBlockedHistoryHook{}

	AddMediaFileBlockedHistoryHook(boil.BeforeUpsertHook, mediaFileBlockedHistoryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	mediaFileBlockedHistoryBeforeUpsertHooks = []MediaFileBlockedHistoryHook{}

	AddMediaFileBlockedHistoryHook(boil.AfterUpsertHook, mediaFileBlockedHistoryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	mediaFileBlockedHistoryAfterUpsertHooks = []MediaFileBlockedHistoryHook{}
}

func testMediaFileBlockedHistoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MediaFileBlockedHistory{}
	if err = randomize.Struct(seed, o, mediaFileBlockedHistoryDBTypes, true, mediaFileBlockedHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MediaFileBlockedHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MediaFileBlockedHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMediaFileBlockedHistoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MediaFileBlockedHistory{}
	if err = randomize.Struct(seed, o, mediaFileBlockedHistoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MediaFileBlockedHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(mediaFileBlockedHistoryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := MediaFileBlockedHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMediaFileBlockedHistoryToOneRecordUsingMediaFile(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local MediaFileBlockedHistory
	var foreign Record

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, mediaFileBlockedHistoryDBTypes, false, mediaFileBlockedHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MediaFileBlockedHistory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, recordDBTypes, true, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.MediaFileID, foreign.MediaFileID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.MediaFile().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.MediaFileID, foreign.MediaFileID) {
		t.Errorf("want: %v, got %v", foreign.MediaFileID, check.MediaFileID)
	}

	ranAfterSelectHook := false
	AddRecordHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Record) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := MediaFileBlockedHistorySlice{&local}
	if err = local.L.LoadMediaFile(ctx, tx, false, (*[]*MediaFileBlockedHistory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.MediaFile == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.MediaFile = nil
	if err = local.L.LoadMediaFile(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.MediaFile == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testMediaFileBlockedHistoryToOneSetOpRecordUsingMediaFile(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MediaFileBlockedHistory
	var b, c Record

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mediaFileBlockedHistoryDBTypes, false, strmangle.SetComplement(mediaFileBlockedHistoryPrimaryKeyColumns, mediaFileBlockedHistoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, recordDBTypes, false, strmangle.SetComplement(recordPrimaryKeyColumns, recordColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, recordDBTypes, false, strmangle.SetComplement(recordPrimaryKeyColumns, recordColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Record{&b, &c} {
		err = a.SetMediaFile(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.MediaFile != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MediaFileMediaFileBlockedHistories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.MediaFileID, x.MediaFileID) {
			t.Error("foreign key was wrong value", a.MediaFileID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.MediaFileID))
		reflect.Indirect(reflect.ValueOf(&a.MediaFileID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.MediaFileID, x.MediaFileID) {
			t.Error("foreign key was wrong value", a.MediaFileID, x.MediaFileID)
		}
	}
}

func testMediaFileBlockedHistoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MediaFileBlockedHistory{}
	if err = randomize.Struct(seed, o, mediaFileBlockedHistoryDBTypes, true, mediaFileBlockedHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MediaFileBlockedHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMediaFileBlockedHistoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MediaFileBlockedHistory{}
	if err = randomize.Struct(seed, o, mediaFileBlockedHistoryDBTypes, true, mediaFileBlockedHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MediaFileBlockedHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MediaFileBlockedHistorySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMediaFileBlockedHistoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MediaFileBlockedHistory{}
	if err = randomize.Struct(seed, o, mediaFileBlockedHistoryDBTypes, true, mediaFileBlockedHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MediaFileBlockedHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MediaFileBlockedHistories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	mediaFileBlockedHistoryDBTypes = map[string]string{`MediaFileBlockedHistoryID`: `int`, `MediaFileID`: `char`, `MediaFileDetectedLabel`: `varchar`, `MediaFileDetectedWeights`: `float`, `MediaFileCheckedAt`: `datetime`}
	_                              = bytes.MinRead
)

func testMediaFileBlockedHistoriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(mediaFileBlockedHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(mediaFileBlockedHistoryAllColumns) == len(mediaFileBlockedHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MediaFileBlockedHistory{}
	if err = randomize.Struct(seed, o, mediaFileBlockedHistoryDBTypes, true, mediaFileBlockedHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MediaFileBlockedHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MediaFileBlockedHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, mediaFileBlockedHistoryDBTypes, true, mediaFileBlockedHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MediaFileBlockedHistory struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMediaFileBlockedHistoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(mediaFileBlockedHistoryAllColumns) == len(mediaFileBlockedHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MediaFileBlockedHistory{}
	if err = randomize.Struct(seed, o, mediaFileBlockedHistoryDBTypes, true, mediaFileBlockedHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MediaFileBlockedHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MediaFileBlockedHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, mediaFileBlockedHistoryDBTypes, true, mediaFileBlockedHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MediaFileBlockedHistory struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(mediaFileBlockedHistoryAllColumns, mediaFileBlockedHistoryPrimaryKeyColumns) {
		fields = mediaFileBlockedHistoryAllColumns
	} else {
		fields = strmangle.SetComplement(
			mediaFileBlockedHistoryAllColumns,
			mediaFileBlockedHistoryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MediaFileBlockedHistorySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMediaFileBlockedHistoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(mediaFileBlockedHistoryAllColumns) == len(mediaFileBlockedHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLMediaFileBlockedHistoryUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := MediaFileBlockedHistory{}
	if err = randomize.Struct(seed, &o, mediaFileBlockedHistoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MediaFileBlockedHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MediaFileBlockedHistory: %s", err)
	}

	count, err := MediaFileBlockedHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, mediaFileBlockedHistoryDBTypes, false, mediaFileBlockedHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MediaFileBlockedHistory struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MediaFileBlockedHistory: %s", err)
	}

	count, err = MediaFileBlockedHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
