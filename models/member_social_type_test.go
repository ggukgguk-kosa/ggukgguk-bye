// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMemberSocialTypes(t *testing.T) {
	t.Parallel()

	query := MemberSocialTypes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMemberSocialTypesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemberSocialType{}
	if err = randomize.Struct(seed, o, memberSocialTypeDBTypes, true, memberSocialTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberSocialType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MemberSocialTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMemberSocialTypesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemberSocialType{}
	if err = randomize.Struct(seed, o, memberSocialTypeDBTypes, true, memberSocialTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberSocialType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := MemberSocialTypes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MemberSocialTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMemberSocialTypesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemberSocialType{}
	if err = randomize.Struct(seed, o, memberSocialTypeDBTypes, true, memberSocialTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberSocialType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MemberSocialTypeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MemberSocialTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMemberSocialTypesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemberSocialType{}
	if err = randomize.Struct(seed, o, memberSocialTypeDBTypes, true, memberSocialTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberSocialType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MemberSocialTypeExists(ctx, tx, o.MemberSocialID)
	if err != nil {
		t.Errorf("Unable to check if MemberSocialType exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MemberSocialTypeExists to return true, but got false.")
	}
}

func testMemberSocialTypesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemberSocialType{}
	if err = randomize.Struct(seed, o, memberSocialTypeDBTypes, true, memberSocialTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberSocialType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	memberSocialTypeFound, err := FindMemberSocialType(ctx, tx, o.MemberSocialID)
	if err != nil {
		t.Error(err)
	}

	if memberSocialTypeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMemberSocialTypesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemberSocialType{}
	if err = randomize.Struct(seed, o, memberSocialTypeDBTypes, true, memberSocialTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberSocialType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = MemberSocialTypes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testMemberSocialTypesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemberSocialType{}
	if err = randomize.Struct(seed, o, memberSocialTypeDBTypes, true, memberSocialTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberSocialType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := MemberSocialTypes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMemberSocialTypesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	memberSocialTypeOne := &MemberSocialType{}
	memberSocialTypeTwo := &MemberSocialType{}
	if err = randomize.Struct(seed, memberSocialTypeOne, memberSocialTypeDBTypes, false, memberSocialTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberSocialType struct: %s", err)
	}
	if err = randomize.Struct(seed, memberSocialTypeTwo, memberSocialTypeDBTypes, false, memberSocialTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberSocialType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = memberSocialTypeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = memberSocialTypeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MemberSocialTypes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMemberSocialTypesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	memberSocialTypeOne := &MemberSocialType{}
	memberSocialTypeTwo := &MemberSocialType{}
	if err = randomize.Struct(seed, memberSocialTypeOne, memberSocialTypeDBTypes, false, memberSocialTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberSocialType struct: %s", err)
	}
	if err = randomize.Struct(seed, memberSocialTypeTwo, memberSocialTypeDBTypes, false, memberSocialTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberSocialType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = memberSocialTypeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = memberSocialTypeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MemberSocialTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func memberSocialTypeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *MemberSocialType) error {
	*o = MemberSocialType{}
	return nil
}

func memberSocialTypeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *MemberSocialType) error {
	*o = MemberSocialType{}
	return nil
}

func memberSocialTypeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *MemberSocialType) error {
	*o = MemberSocialType{}
	return nil
}

func memberSocialTypeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MemberSocialType) error {
	*o = MemberSocialType{}
	return nil
}

func memberSocialTypeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MemberSocialType) error {
	*o = MemberSocialType{}
	return nil
}

func memberSocialTypeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MemberSocialType) error {
	*o = MemberSocialType{}
	return nil
}

func memberSocialTypeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MemberSocialType) error {
	*o = MemberSocialType{}
	return nil
}

func memberSocialTypeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MemberSocialType) error {
	*o = MemberSocialType{}
	return nil
}

func memberSocialTypeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MemberSocialType) error {
	*o = MemberSocialType{}
	return nil
}

func testMemberSocialTypesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &MemberSocialType{}
	o := &MemberSocialType{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, memberSocialTypeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MemberSocialType object: %s", err)
	}

	AddMemberSocialTypeHook(boil.BeforeInsertHook, memberSocialTypeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	memberSocialTypeBeforeInsertHooks = []MemberSocialTypeHook{}

	AddMemberSocialTypeHook(boil.AfterInsertHook, memberSocialTypeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	memberSocialTypeAfterInsertHooks = []MemberSocialTypeHook{}

	AddMemberSocialTypeHook(boil.AfterSelectHook, memberSocialTypeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	memberSocialTypeAfterSelectHooks = []MemberSocialTypeHook{}

	AddMemberSocialTypeHook(boil.BeforeUpdateHook, memberSocialTypeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	memberSocialTypeBeforeUpdateHooks = []MemberSocialTypeHook{}

	AddMemberSocialTypeHook(boil.AfterUpdateHook, memberSocialTypeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	memberSocialTypeAfterUpdateHooks = []MemberSocialTypeHook{}

	AddMemberSocialTypeHook(boil.BeforeDeleteHook, memberSocialTypeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	memberSocialTypeBeforeDeleteHooks = []MemberSocialTypeHook{}

	AddMemberSocialTypeHook(boil.AfterDeleteHook, memberSocialTypeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	memberSocialTypeAfterDeleteHooks = []MemberSocialTypeHook{}

	AddMemberSocialTypeHook(boil.BeforeUpsertHook, memberSocialTypeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	memberSocialTypeBeforeUpsertHooks = []MemberSocialTypeHook{}

	AddMemberSocialTypeHook(boil.AfterUpsertHook, memberSocialTypeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	memberSocialTypeAfterUpsertHooks = []MemberSocialTypeHook{}
}

func testMemberSocialTypesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemberSocialType{}
	if err = randomize.Struct(seed, o, memberSocialTypeDBTypes, true, memberSocialTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberSocialType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MemberSocialTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMemberSocialTypesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemberSocialType{}
	if err = randomize.Struct(seed, o, memberSocialTypeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MemberSocialType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(memberSocialTypeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := MemberSocialTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMemberSocialTypeToManyMemberSocialMembers(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MemberSocialType
	var b, c Member

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, memberSocialTypeDBTypes, true, memberSocialTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberSocialType struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, memberDBTypes, false, memberColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, memberDBTypes, false, memberColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.MemberSocial, a.MemberSocialID)
	queries.Assign(&c.MemberSocial, a.MemberSocialID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.MemberSocialMembers().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.MemberSocial, b.MemberSocial) {
			bFound = true
		}
		if queries.Equal(v.MemberSocial, c.MemberSocial) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MemberSocialTypeSlice{&a}
	if err = a.L.LoadMemberSocialMembers(ctx, tx, false, (*[]*MemberSocialType)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MemberSocialMembers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.MemberSocialMembers = nil
	if err = a.L.LoadMemberSocialMembers(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MemberSocialMembers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMemberSocialTypeToManyAddOpMemberSocialMembers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MemberSocialType
	var b, c, d, e Member

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, memberSocialTypeDBTypes, false, strmangle.SetComplement(memberSocialTypePrimaryKeyColumns, memberSocialTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Member{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, memberDBTypes, false, strmangle.SetComplement(memberPrimaryKeyColumns, memberColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Member{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMemberSocialMembers(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.MemberSocialID, first.MemberSocial) {
			t.Error("foreign key was wrong value", a.MemberSocialID, first.MemberSocial)
		}
		if !queries.Equal(a.MemberSocialID, second.MemberSocial) {
			t.Error("foreign key was wrong value", a.MemberSocialID, second.MemberSocial)
		}

		if first.R.MemberSocialMemberSocialType != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.MemberSocialMemberSocialType != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.MemberSocialMembers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.MemberSocialMembers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.MemberSocialMembers().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testMemberSocialTypeToManySetOpMemberSocialMembers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MemberSocialType
	var b, c, d, e Member

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, memberSocialTypeDBTypes, false, strmangle.SetComplement(memberSocialTypePrimaryKeyColumns, memberSocialTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Member{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, memberDBTypes, false, strmangle.SetComplement(memberPrimaryKeyColumns, memberColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetMemberSocialMembers(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.MemberSocialMembers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetMemberSocialMembers(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.MemberSocialMembers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.MemberSocial) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.MemberSocial) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.MemberSocialID, d.MemberSocial) {
		t.Error("foreign key was wrong value", a.MemberSocialID, d.MemberSocial)
	}
	if !queries.Equal(a.MemberSocialID, e.MemberSocial) {
		t.Error("foreign key was wrong value", a.MemberSocialID, e.MemberSocial)
	}

	if b.R.MemberSocialMemberSocialType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.MemberSocialMemberSocialType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.MemberSocialMemberSocialType != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.MemberSocialMemberSocialType != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.MemberSocialMembers[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.MemberSocialMembers[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testMemberSocialTypeToManyRemoveOpMemberSocialMembers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MemberSocialType
	var b, c, d, e Member

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, memberSocialTypeDBTypes, false, strmangle.SetComplement(memberSocialTypePrimaryKeyColumns, memberSocialTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Member{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, memberDBTypes, false, strmangle.SetComplement(memberPrimaryKeyColumns, memberColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddMemberSocialMembers(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.MemberSocialMembers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveMemberSocialMembers(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.MemberSocialMembers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.MemberSocial) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.MemberSocial) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.MemberSocialMemberSocialType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.MemberSocialMemberSocialType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.MemberSocialMemberSocialType != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.MemberSocialMemberSocialType != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.MemberSocialMembers) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.MemberSocialMembers[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.MemberSocialMembers[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testMemberSocialTypesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemberSocialType{}
	if err = randomize.Struct(seed, o, memberSocialTypeDBTypes, true, memberSocialTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberSocialType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMemberSocialTypesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemberSocialType{}
	if err = randomize.Struct(seed, o, memberSocialTypeDBTypes, true, memberSocialTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberSocialType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MemberSocialTypeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMemberSocialTypesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemberSocialType{}
	if err = randomize.Struct(seed, o, memberSocialTypeDBTypes, true, memberSocialTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberSocialType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MemberSocialTypes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	memberSocialTypeDBTypes = map[string]string{`MemberSocialID`: `varchar`, `MemberSocialComment`: `varchar`}
	_                       = bytes.MinRead
)

func testMemberSocialTypesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(memberSocialTypePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(memberSocialTypeAllColumns) == len(memberSocialTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MemberSocialType{}
	if err = randomize.Struct(seed, o, memberSocialTypeDBTypes, true, memberSocialTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberSocialType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MemberSocialTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, memberSocialTypeDBTypes, true, memberSocialTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MemberSocialType struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMemberSocialTypesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(memberSocialTypeAllColumns) == len(memberSocialTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MemberSocialType{}
	if err = randomize.Struct(seed, o, memberSocialTypeDBTypes, true, memberSocialTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemberSocialType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MemberSocialTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, memberSocialTypeDBTypes, true, memberSocialTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MemberSocialType struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(memberSocialTypeAllColumns, memberSocialTypePrimaryKeyColumns) {
		fields = memberSocialTypeAllColumns
	} else {
		fields = strmangle.SetComplement(
			memberSocialTypeAllColumns,
			memberSocialTypePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MemberSocialTypeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMemberSocialTypesUpsert(t *testing.T) {
	t.Parallel()

	if len(memberSocialTypeAllColumns) == len(memberSocialTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLMemberSocialTypeUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := MemberSocialType{}
	if err = randomize.Struct(seed, &o, memberSocialTypeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MemberSocialType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MemberSocialType: %s", err)
	}

	count, err := MemberSocialTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, memberSocialTypeDBTypes, false, memberSocialTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MemberSocialType struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MemberSocialType: %s", err)
	}

	count, err = MemberSocialTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
