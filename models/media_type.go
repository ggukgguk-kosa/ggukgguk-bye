// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MediaType is an object representing the database table.
type MediaType struct {
	MediaTypeID        string `boil:"media_type_id" json:"media_type_id" toml:"media_type_id" yaml:"media_type_id"`
	MediaTypeExtention string `boil:"media_type_extention" json:"media_type_extention" toml:"media_type_extention" yaml:"media_type_extention"`

	R *mediaTypeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L mediaTypeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MediaTypeColumns = struct {
	MediaTypeID        string
	MediaTypeExtention string
}{
	MediaTypeID:        "media_type_id",
	MediaTypeExtention: "media_type_extention",
}

var MediaTypeTableColumns = struct {
	MediaTypeID        string
	MediaTypeExtention string
}{
	MediaTypeID:        "media_type.media_type_id",
	MediaTypeExtention: "media_type.media_type_extention",
}

// Generated where

var MediaTypeWhere = struct {
	MediaTypeID        whereHelperstring
	MediaTypeExtention whereHelperstring
}{
	MediaTypeID:        whereHelperstring{field: "`media_type`.`media_type_id`"},
	MediaTypeExtention: whereHelperstring{field: "`media_type`.`media_type_extention`"},
}

// MediaTypeRels is where relationship names are stored.
var MediaTypeRels = struct {
	MediaFiles string
}{
	MediaFiles: "MediaFiles",
}

// mediaTypeR is where relationships are stored.
type mediaTypeR struct {
	MediaFiles MediaFileSlice `boil:"MediaFiles" json:"MediaFiles" toml:"MediaFiles" yaml:"MediaFiles"`
}

// NewStruct creates a new relationship struct
func (*mediaTypeR) NewStruct() *mediaTypeR {
	return &mediaTypeR{}
}

func (r *mediaTypeR) GetMediaFiles() MediaFileSlice {
	if r == nil {
		return nil
	}
	return r.MediaFiles
}

// mediaTypeL is where Load methods for each relationship are stored.
type mediaTypeL struct{}

var (
	mediaTypeAllColumns            = []string{"media_type_id", "media_type_extention"}
	mediaTypeColumnsWithoutDefault = []string{"media_type_id", "media_type_extention"}
	mediaTypeColumnsWithDefault    = []string{}
	mediaTypePrimaryKeyColumns     = []string{"media_type_id"}
	mediaTypeGeneratedColumns      = []string{}
)

type (
	// MediaTypeSlice is an alias for a slice of pointers to MediaType.
	// This should almost always be used instead of []MediaType.
	MediaTypeSlice []*MediaType
	// MediaTypeHook is the signature for custom MediaType hook methods
	MediaTypeHook func(context.Context, boil.ContextExecutor, *MediaType) error

	mediaTypeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mediaTypeType                 = reflect.TypeOf(&MediaType{})
	mediaTypeMapping              = queries.MakeStructMapping(mediaTypeType)
	mediaTypePrimaryKeyMapping, _ = queries.BindMapping(mediaTypeType, mediaTypeMapping, mediaTypePrimaryKeyColumns)
	mediaTypeInsertCacheMut       sync.RWMutex
	mediaTypeInsertCache          = make(map[string]insertCache)
	mediaTypeUpdateCacheMut       sync.RWMutex
	mediaTypeUpdateCache          = make(map[string]updateCache)
	mediaTypeUpsertCacheMut       sync.RWMutex
	mediaTypeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mediaTypeAfterSelectMu sync.Mutex
var mediaTypeAfterSelectHooks []MediaTypeHook

var mediaTypeBeforeInsertMu sync.Mutex
var mediaTypeBeforeInsertHooks []MediaTypeHook
var mediaTypeAfterInsertMu sync.Mutex
var mediaTypeAfterInsertHooks []MediaTypeHook

var mediaTypeBeforeUpdateMu sync.Mutex
var mediaTypeBeforeUpdateHooks []MediaTypeHook
var mediaTypeAfterUpdateMu sync.Mutex
var mediaTypeAfterUpdateHooks []MediaTypeHook

var mediaTypeBeforeDeleteMu sync.Mutex
var mediaTypeBeforeDeleteHooks []MediaTypeHook
var mediaTypeAfterDeleteMu sync.Mutex
var mediaTypeAfterDeleteHooks []MediaTypeHook

var mediaTypeBeforeUpsertMu sync.Mutex
var mediaTypeBeforeUpsertHooks []MediaTypeHook
var mediaTypeAfterUpsertMu sync.Mutex
var mediaTypeAfterUpsertHooks []MediaTypeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MediaType) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaTypeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MediaType) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaTypeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MediaType) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaTypeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MediaType) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaTypeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MediaType) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaTypeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MediaType) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaTypeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MediaType) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaTypeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MediaType) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaTypeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MediaType) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaTypeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMediaTypeHook registers your hook function for all future operations.
func AddMediaTypeHook(hookPoint boil.HookPoint, mediaTypeHook MediaTypeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		mediaTypeAfterSelectMu.Lock()
		mediaTypeAfterSelectHooks = append(mediaTypeAfterSelectHooks, mediaTypeHook)
		mediaTypeAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		mediaTypeBeforeInsertMu.Lock()
		mediaTypeBeforeInsertHooks = append(mediaTypeBeforeInsertHooks, mediaTypeHook)
		mediaTypeBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		mediaTypeAfterInsertMu.Lock()
		mediaTypeAfterInsertHooks = append(mediaTypeAfterInsertHooks, mediaTypeHook)
		mediaTypeAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		mediaTypeBeforeUpdateMu.Lock()
		mediaTypeBeforeUpdateHooks = append(mediaTypeBeforeUpdateHooks, mediaTypeHook)
		mediaTypeBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		mediaTypeAfterUpdateMu.Lock()
		mediaTypeAfterUpdateHooks = append(mediaTypeAfterUpdateHooks, mediaTypeHook)
		mediaTypeAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		mediaTypeBeforeDeleteMu.Lock()
		mediaTypeBeforeDeleteHooks = append(mediaTypeBeforeDeleteHooks, mediaTypeHook)
		mediaTypeBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		mediaTypeAfterDeleteMu.Lock()
		mediaTypeAfterDeleteHooks = append(mediaTypeAfterDeleteHooks, mediaTypeHook)
		mediaTypeAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		mediaTypeBeforeUpsertMu.Lock()
		mediaTypeBeforeUpsertHooks = append(mediaTypeBeforeUpsertHooks, mediaTypeHook)
		mediaTypeBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		mediaTypeAfterUpsertMu.Lock()
		mediaTypeAfterUpsertHooks = append(mediaTypeAfterUpsertHooks, mediaTypeHook)
		mediaTypeAfterUpsertMu.Unlock()
	}
}

// OneG returns a single mediaType record from the query using the global executor.
func (q mediaTypeQuery) OneG(ctx context.Context) (*MediaType, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single mediaType record from the query.
func (q mediaTypeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MediaType, error) {
	o := &MediaType{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for media_type")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all MediaType records from the query using the global executor.
func (q mediaTypeQuery) AllG(ctx context.Context) (MediaTypeSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all MediaType records from the query.
func (q mediaTypeQuery) All(ctx context.Context, exec boil.ContextExecutor) (MediaTypeSlice, error) {
	var o []*MediaType

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MediaType slice")
	}

	if len(mediaTypeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all MediaType records in the query using the global executor
func (q mediaTypeQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all MediaType records in the query.
func (q mediaTypeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count media_type rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q mediaTypeQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q mediaTypeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if media_type exists")
	}

	return count > 0, nil
}

// MediaFiles retrieves all the media_file's MediaFiles with an executor.
func (o *MediaType) MediaFiles(mods ...qm.QueryMod) mediaFileQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`media_file`.`media_type_id`=?", o.MediaTypeID),
	)

	return MediaFiles(queryMods...)
}

// LoadMediaFiles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mediaTypeL) LoadMediaFiles(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMediaType interface{}, mods queries.Applicator) error {
	var slice []*MediaType
	var object *MediaType

	if singular {
		var ok bool
		object, ok = maybeMediaType.(*MediaType)
		if !ok {
			object = new(MediaType)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMediaType)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMediaType))
			}
		}
	} else {
		s, ok := maybeMediaType.(*[]*MediaType)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMediaType)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMediaType))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &mediaTypeR{}
		}
		args[object.MediaTypeID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mediaTypeR{}
			}
			args[obj.MediaTypeID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`media_file`),
		qm.WhereIn(`media_file.media_type_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load media_file")
	}

	var resultSlice []*MediaFile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice media_file")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on media_file")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for media_file")
	}

	if len(mediaFileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MediaFiles = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &mediaFileR{}
			}
			foreign.R.MediaType = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.MediaTypeID == foreign.MediaTypeID {
				local.R.MediaFiles = append(local.R.MediaFiles, foreign)
				if foreign.R == nil {
					foreign.R = &mediaFileR{}
				}
				foreign.R.MediaType = local
				break
			}
		}
	}

	return nil
}

// AddMediaFilesG adds the given related objects to the existing relationships
// of the media_type, optionally inserting them as new records.
// Appends related to o.R.MediaFiles.
// Sets related.R.MediaType appropriately.
// Uses the global database handle.
func (o *MediaType) AddMediaFilesG(ctx context.Context, insert bool, related ...*MediaFile) error {
	return o.AddMediaFiles(ctx, boil.GetContextDB(), insert, related...)
}

// AddMediaFiles adds the given related objects to the existing relationships
// of the media_type, optionally inserting them as new records.
// Appends related to o.R.MediaFiles.
// Sets related.R.MediaType appropriately.
func (o *MediaType) AddMediaFiles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MediaFile) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MediaTypeID = o.MediaTypeID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `media_file` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"media_type_id"}),
				strmangle.WhereClause("`", "`", 0, mediaFilePrimaryKeyColumns),
			)
			values := []interface{}{o.MediaTypeID, rel.MediaFileID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MediaTypeID = o.MediaTypeID
		}
	}

	if o.R == nil {
		o.R = &mediaTypeR{
			MediaFiles: related,
		}
	} else {
		o.R.MediaFiles = append(o.R.MediaFiles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mediaFileR{
				MediaType: o,
			}
		} else {
			rel.R.MediaType = o
		}
	}
	return nil
}

// MediaTypes retrieves all the records using an executor.
func MediaTypes(mods ...qm.QueryMod) mediaTypeQuery {
	mods = append(mods, qm.From("`media_type`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`media_type`.*"})
	}

	return mediaTypeQuery{q}
}

// FindMediaTypeG retrieves a single record by ID.
func FindMediaTypeG(ctx context.Context, mediaTypeID string, selectCols ...string) (*MediaType, error) {
	return FindMediaType(ctx, boil.GetContextDB(), mediaTypeID, selectCols...)
}

// FindMediaType retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMediaType(ctx context.Context, exec boil.ContextExecutor, mediaTypeID string, selectCols ...string) (*MediaType, error) {
	mediaTypeObj := &MediaType{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `media_type` where `media_type_id`=?", sel,
	)

	q := queries.Raw(query, mediaTypeID)

	err := q.Bind(ctx, exec, mediaTypeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from media_type")
	}

	if err = mediaTypeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return mediaTypeObj, err
	}

	return mediaTypeObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *MediaType) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MediaType) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no media_type provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mediaTypeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mediaTypeInsertCacheMut.RLock()
	cache, cached := mediaTypeInsertCache[key]
	mediaTypeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mediaTypeAllColumns,
			mediaTypeColumnsWithDefault,
			mediaTypeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mediaTypeType, mediaTypeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mediaTypeType, mediaTypeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `media_type` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `media_type` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `media_type` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, mediaTypePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into media_type")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.MediaTypeID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for media_type")
	}

CacheNoHooks:
	if !cached {
		mediaTypeInsertCacheMut.Lock()
		mediaTypeInsertCache[key] = cache
		mediaTypeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single MediaType record using the global executor.
// See Update for more documentation.
func (o *MediaType) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the MediaType.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MediaType) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mediaTypeUpdateCacheMut.RLock()
	cache, cached := mediaTypeUpdateCache[key]
	mediaTypeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mediaTypeAllColumns,
			mediaTypePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update media_type, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `media_type` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, mediaTypePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mediaTypeType, mediaTypeMapping, append(wl, mediaTypePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update media_type row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for media_type")
	}

	if !cached {
		mediaTypeUpdateCacheMut.Lock()
		mediaTypeUpdateCache[key] = cache
		mediaTypeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q mediaTypeQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q mediaTypeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for media_type")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for media_type")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o MediaTypeSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MediaTypeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mediaTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `media_type` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mediaTypePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in mediaType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all mediaType")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *MediaType) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLMediaTypeUniqueColumns = []string{
	"media_type_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MediaType) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no media_type provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mediaTypeColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLMediaTypeUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mediaTypeUpsertCacheMut.RLock()
	cache, cached := mediaTypeUpsertCache[key]
	mediaTypeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			mediaTypeAllColumns,
			mediaTypeColumnsWithDefault,
			mediaTypeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			mediaTypeAllColumns,
			mediaTypePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert media_type, could not build update column list")
		}

		ret := strmangle.SetComplement(mediaTypeAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`media_type`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `media_type` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(mediaTypeType, mediaTypeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mediaTypeType, mediaTypeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for media_type")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(mediaTypeType, mediaTypeMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for media_type")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for media_type")
	}

CacheNoHooks:
	if !cached {
		mediaTypeUpsertCacheMut.Lock()
		mediaTypeUpsertCache[key] = cache
		mediaTypeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single MediaType record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *MediaType) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single MediaType record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MediaType) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MediaType provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mediaTypePrimaryKeyMapping)
	sql := "DELETE FROM `media_type` WHERE `media_type_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from media_type")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for media_type")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q mediaTypeQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q mediaTypeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no mediaTypeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from media_type")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for media_type")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o MediaTypeSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MediaTypeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(mediaTypeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mediaTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `media_type` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mediaTypePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from mediaType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for media_type")
	}

	if len(mediaTypeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *MediaType) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no MediaType provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MediaType) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMediaType(ctx, exec, o.MediaTypeID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MediaTypeSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty MediaTypeSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MediaTypeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MediaTypeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mediaTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `media_type`.* FROM `media_type` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mediaTypePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MediaTypeSlice")
	}

	*o = slice

	return nil
}

// MediaTypeExistsG checks if the MediaType row exists.
func MediaTypeExistsG(ctx context.Context, mediaTypeID string) (bool, error) {
	return MediaTypeExists(ctx, boil.GetContextDB(), mediaTypeID)
}

// MediaTypeExists checks if the MediaType row exists.
func MediaTypeExists(ctx context.Context, exec boil.ContextExecutor, mediaTypeID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `media_type` where `media_type_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, mediaTypeID)
	}
	row := exec.QueryRowContext(ctx, sql, mediaTypeID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if media_type exists")
	}

	return exists, nil
}

// Exists checks if the MediaType row exists.
func (o *MediaType) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MediaTypeExists(ctx, exec, o.MediaTypeID)
}
