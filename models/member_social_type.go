// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MemberSocialType is an object representing the database table.
type MemberSocialType struct {
	MemberSocialID      string      `boil:"member_social_id" json:"member_social_id" toml:"member_social_id" yaml:"member_social_id"`
	MemberSocialComment null.String `boil:"member_social_comment" json:"member_social_comment,omitempty" toml:"member_social_comment" yaml:"member_social_comment,omitempty"`

	R *memberSocialTypeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L memberSocialTypeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MemberSocialTypeColumns = struct {
	MemberSocialID      string
	MemberSocialComment string
}{
	MemberSocialID:      "member_social_id",
	MemberSocialComment: "member_social_comment",
}

var MemberSocialTypeTableColumns = struct {
	MemberSocialID      string
	MemberSocialComment string
}{
	MemberSocialID:      "member_social_type.member_social_id",
	MemberSocialComment: "member_social_type.member_social_comment",
}

// Generated where

var MemberSocialTypeWhere = struct {
	MemberSocialID      whereHelperstring
	MemberSocialComment whereHelpernull_String
}{
	MemberSocialID:      whereHelperstring{field: "`member_social_type`.`member_social_id`"},
	MemberSocialComment: whereHelpernull_String{field: "`member_social_type`.`member_social_comment`"},
}

// MemberSocialTypeRels is where relationship names are stored.
var MemberSocialTypeRels = struct {
	MemberSocialMembers string
}{
	MemberSocialMembers: "MemberSocialMembers",
}

// memberSocialTypeR is where relationships are stored.
type memberSocialTypeR struct {
	MemberSocialMembers MemberSlice `boil:"MemberSocialMembers" json:"MemberSocialMembers" toml:"MemberSocialMembers" yaml:"MemberSocialMembers"`
}

// NewStruct creates a new relationship struct
func (*memberSocialTypeR) NewStruct() *memberSocialTypeR {
	return &memberSocialTypeR{}
}

func (r *memberSocialTypeR) GetMemberSocialMembers() MemberSlice {
	if r == nil {
		return nil
	}
	return r.MemberSocialMembers
}

// memberSocialTypeL is where Load methods for each relationship are stored.
type memberSocialTypeL struct{}

var (
	memberSocialTypeAllColumns            = []string{"member_social_id", "member_social_comment"}
	memberSocialTypeColumnsWithoutDefault = []string{"member_social_id", "member_social_comment"}
	memberSocialTypeColumnsWithDefault    = []string{}
	memberSocialTypePrimaryKeyColumns     = []string{"member_social_id"}
	memberSocialTypeGeneratedColumns      = []string{}
)

type (
	// MemberSocialTypeSlice is an alias for a slice of pointers to MemberSocialType.
	// This should almost always be used instead of []MemberSocialType.
	MemberSocialTypeSlice []*MemberSocialType
	// MemberSocialTypeHook is the signature for custom MemberSocialType hook methods
	MemberSocialTypeHook func(context.Context, boil.ContextExecutor, *MemberSocialType) error

	memberSocialTypeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	memberSocialTypeType                 = reflect.TypeOf(&MemberSocialType{})
	memberSocialTypeMapping              = queries.MakeStructMapping(memberSocialTypeType)
	memberSocialTypePrimaryKeyMapping, _ = queries.BindMapping(memberSocialTypeType, memberSocialTypeMapping, memberSocialTypePrimaryKeyColumns)
	memberSocialTypeInsertCacheMut       sync.RWMutex
	memberSocialTypeInsertCache          = make(map[string]insertCache)
	memberSocialTypeUpdateCacheMut       sync.RWMutex
	memberSocialTypeUpdateCache          = make(map[string]updateCache)
	memberSocialTypeUpsertCacheMut       sync.RWMutex
	memberSocialTypeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var memberSocialTypeAfterSelectMu sync.Mutex
var memberSocialTypeAfterSelectHooks []MemberSocialTypeHook

var memberSocialTypeBeforeInsertMu sync.Mutex
var memberSocialTypeBeforeInsertHooks []MemberSocialTypeHook
var memberSocialTypeAfterInsertMu sync.Mutex
var memberSocialTypeAfterInsertHooks []MemberSocialTypeHook

var memberSocialTypeBeforeUpdateMu sync.Mutex
var memberSocialTypeBeforeUpdateHooks []MemberSocialTypeHook
var memberSocialTypeAfterUpdateMu sync.Mutex
var memberSocialTypeAfterUpdateHooks []MemberSocialTypeHook

var memberSocialTypeBeforeDeleteMu sync.Mutex
var memberSocialTypeBeforeDeleteHooks []MemberSocialTypeHook
var memberSocialTypeAfterDeleteMu sync.Mutex
var memberSocialTypeAfterDeleteHooks []MemberSocialTypeHook

var memberSocialTypeBeforeUpsertMu sync.Mutex
var memberSocialTypeBeforeUpsertHooks []MemberSocialTypeHook
var memberSocialTypeAfterUpsertMu sync.Mutex
var memberSocialTypeAfterUpsertHooks []MemberSocialTypeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MemberSocialType) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberSocialTypeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MemberSocialType) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberSocialTypeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MemberSocialType) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberSocialTypeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MemberSocialType) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberSocialTypeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MemberSocialType) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberSocialTypeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MemberSocialType) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberSocialTypeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MemberSocialType) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberSocialTypeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MemberSocialType) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberSocialTypeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MemberSocialType) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memberSocialTypeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMemberSocialTypeHook registers your hook function for all future operations.
func AddMemberSocialTypeHook(hookPoint boil.HookPoint, memberSocialTypeHook MemberSocialTypeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		memberSocialTypeAfterSelectMu.Lock()
		memberSocialTypeAfterSelectHooks = append(memberSocialTypeAfterSelectHooks, memberSocialTypeHook)
		memberSocialTypeAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		memberSocialTypeBeforeInsertMu.Lock()
		memberSocialTypeBeforeInsertHooks = append(memberSocialTypeBeforeInsertHooks, memberSocialTypeHook)
		memberSocialTypeBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		memberSocialTypeAfterInsertMu.Lock()
		memberSocialTypeAfterInsertHooks = append(memberSocialTypeAfterInsertHooks, memberSocialTypeHook)
		memberSocialTypeAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		memberSocialTypeBeforeUpdateMu.Lock()
		memberSocialTypeBeforeUpdateHooks = append(memberSocialTypeBeforeUpdateHooks, memberSocialTypeHook)
		memberSocialTypeBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		memberSocialTypeAfterUpdateMu.Lock()
		memberSocialTypeAfterUpdateHooks = append(memberSocialTypeAfterUpdateHooks, memberSocialTypeHook)
		memberSocialTypeAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		memberSocialTypeBeforeDeleteMu.Lock()
		memberSocialTypeBeforeDeleteHooks = append(memberSocialTypeBeforeDeleteHooks, memberSocialTypeHook)
		memberSocialTypeBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		memberSocialTypeAfterDeleteMu.Lock()
		memberSocialTypeAfterDeleteHooks = append(memberSocialTypeAfterDeleteHooks, memberSocialTypeHook)
		memberSocialTypeAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		memberSocialTypeBeforeUpsertMu.Lock()
		memberSocialTypeBeforeUpsertHooks = append(memberSocialTypeBeforeUpsertHooks, memberSocialTypeHook)
		memberSocialTypeBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		memberSocialTypeAfterUpsertMu.Lock()
		memberSocialTypeAfterUpsertHooks = append(memberSocialTypeAfterUpsertHooks, memberSocialTypeHook)
		memberSocialTypeAfterUpsertMu.Unlock()
	}
}

// OneG returns a single memberSocialType record from the query using the global executor.
func (q memberSocialTypeQuery) OneG(ctx context.Context) (*MemberSocialType, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single memberSocialType record from the query.
func (q memberSocialTypeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MemberSocialType, error) {
	o := &MemberSocialType{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for member_social_type")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all MemberSocialType records from the query using the global executor.
func (q memberSocialTypeQuery) AllG(ctx context.Context) (MemberSocialTypeSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all MemberSocialType records from the query.
func (q memberSocialTypeQuery) All(ctx context.Context, exec boil.ContextExecutor) (MemberSocialTypeSlice, error) {
	var o []*MemberSocialType

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MemberSocialType slice")
	}

	if len(memberSocialTypeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all MemberSocialType records in the query using the global executor
func (q memberSocialTypeQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all MemberSocialType records in the query.
func (q memberSocialTypeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count member_social_type rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q memberSocialTypeQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q memberSocialTypeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if member_social_type exists")
	}

	return count > 0, nil
}

// MemberSocialMembers retrieves all the member's Members with an executor via member_social column.
func (o *MemberSocialType) MemberSocialMembers(mods ...qm.QueryMod) memberQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`member`.`member_social`=?", o.MemberSocialID),
	)

	return Members(queryMods...)
}

// LoadMemberSocialMembers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (memberSocialTypeL) LoadMemberSocialMembers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMemberSocialType interface{}, mods queries.Applicator) error {
	var slice []*MemberSocialType
	var object *MemberSocialType

	if singular {
		var ok bool
		object, ok = maybeMemberSocialType.(*MemberSocialType)
		if !ok {
			object = new(MemberSocialType)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMemberSocialType)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMemberSocialType))
			}
		}
	} else {
		s, ok := maybeMemberSocialType.(*[]*MemberSocialType)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMemberSocialType)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMemberSocialType))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &memberSocialTypeR{}
		}
		args[object.MemberSocialID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &memberSocialTypeR{}
			}
			args[obj.MemberSocialID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`member`),
		qm.WhereIn(`member.member_social in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load member")
	}

	var resultSlice []*Member
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice member")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on member")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for member")
	}

	if len(memberAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MemberSocialMembers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &memberR{}
			}
			foreign.R.MemberSocialMemberSocialType = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.MemberSocialID, foreign.MemberSocial) {
				local.R.MemberSocialMembers = append(local.R.MemberSocialMembers, foreign)
				if foreign.R == nil {
					foreign.R = &memberR{}
				}
				foreign.R.MemberSocialMemberSocialType = local
				break
			}
		}
	}

	return nil
}

// AddMemberSocialMembersG adds the given related objects to the existing relationships
// of the member_social_type, optionally inserting them as new records.
// Appends related to o.R.MemberSocialMembers.
// Sets related.R.MemberSocialMemberSocialType appropriately.
// Uses the global database handle.
func (o *MemberSocialType) AddMemberSocialMembersG(ctx context.Context, insert bool, related ...*Member) error {
	return o.AddMemberSocialMembers(ctx, boil.GetContextDB(), insert, related...)
}

// AddMemberSocialMembers adds the given related objects to the existing relationships
// of the member_social_type, optionally inserting them as new records.
// Appends related to o.R.MemberSocialMembers.
// Sets related.R.MemberSocialMemberSocialType appropriately.
func (o *MemberSocialType) AddMemberSocialMembers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Member) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.MemberSocial, o.MemberSocialID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `member` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"member_social"}),
				strmangle.WhereClause("`", "`", 0, memberPrimaryKeyColumns),
			)
			values := []interface{}{o.MemberSocialID, rel.MemberID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.MemberSocial, o.MemberSocialID)
		}
	}

	if o.R == nil {
		o.R = &memberSocialTypeR{
			MemberSocialMembers: related,
		}
	} else {
		o.R.MemberSocialMembers = append(o.R.MemberSocialMembers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &memberR{
				MemberSocialMemberSocialType: o,
			}
		} else {
			rel.R.MemberSocialMemberSocialType = o
		}
	}
	return nil
}

// SetMemberSocialMembersG removes all previously related items of the
// member_social_type replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.MemberSocialMemberSocialType's MemberSocialMembers accordingly.
// Replaces o.R.MemberSocialMembers with related.
// Sets related.R.MemberSocialMemberSocialType's MemberSocialMembers accordingly.
// Uses the global database handle.
func (o *MemberSocialType) SetMemberSocialMembersG(ctx context.Context, insert bool, related ...*Member) error {
	return o.SetMemberSocialMembers(ctx, boil.GetContextDB(), insert, related...)
}

// SetMemberSocialMembers removes all previously related items of the
// member_social_type replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.MemberSocialMemberSocialType's MemberSocialMembers accordingly.
// Replaces o.R.MemberSocialMembers with related.
// Sets related.R.MemberSocialMemberSocialType's MemberSocialMembers accordingly.
func (o *MemberSocialType) SetMemberSocialMembers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Member) error {
	query := "update `member` set `member_social` = null where `member_social` = ?"
	values := []interface{}{o.MemberSocialID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.MemberSocialMembers {
			queries.SetScanner(&rel.MemberSocial, nil)
			if rel.R == nil {
				continue
			}

			rel.R.MemberSocialMemberSocialType = nil
		}
		o.R.MemberSocialMembers = nil
	}

	return o.AddMemberSocialMembers(ctx, exec, insert, related...)
}

// RemoveMemberSocialMembersG relationships from objects passed in.
// Removes related items from R.MemberSocialMembers (uses pointer comparison, removal does not keep order)
// Sets related.R.MemberSocialMemberSocialType.
// Uses the global database handle.
func (o *MemberSocialType) RemoveMemberSocialMembersG(ctx context.Context, related ...*Member) error {
	return o.RemoveMemberSocialMembers(ctx, boil.GetContextDB(), related...)
}

// RemoveMemberSocialMembers relationships from objects passed in.
// Removes related items from R.MemberSocialMembers (uses pointer comparison, removal does not keep order)
// Sets related.R.MemberSocialMemberSocialType.
func (o *MemberSocialType) RemoveMemberSocialMembers(ctx context.Context, exec boil.ContextExecutor, related ...*Member) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.MemberSocial, nil)
		if rel.R != nil {
			rel.R.MemberSocialMemberSocialType = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("member_social")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.MemberSocialMembers {
			if rel != ri {
				continue
			}

			ln := len(o.R.MemberSocialMembers)
			if ln > 1 && i < ln-1 {
				o.R.MemberSocialMembers[i] = o.R.MemberSocialMembers[ln-1]
			}
			o.R.MemberSocialMembers = o.R.MemberSocialMembers[:ln-1]
			break
		}
	}

	return nil
}

// MemberSocialTypes retrieves all the records using an executor.
func MemberSocialTypes(mods ...qm.QueryMod) memberSocialTypeQuery {
	mods = append(mods, qm.From("`member_social_type`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`member_social_type`.*"})
	}

	return memberSocialTypeQuery{q}
}

// FindMemberSocialTypeG retrieves a single record by ID.
func FindMemberSocialTypeG(ctx context.Context, memberSocialID string, selectCols ...string) (*MemberSocialType, error) {
	return FindMemberSocialType(ctx, boil.GetContextDB(), memberSocialID, selectCols...)
}

// FindMemberSocialType retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMemberSocialType(ctx context.Context, exec boil.ContextExecutor, memberSocialID string, selectCols ...string) (*MemberSocialType, error) {
	memberSocialTypeObj := &MemberSocialType{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `member_social_type` where `member_social_id`=?", sel,
	)

	q := queries.Raw(query, memberSocialID)

	err := q.Bind(ctx, exec, memberSocialTypeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from member_social_type")
	}

	if err = memberSocialTypeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return memberSocialTypeObj, err
	}

	return memberSocialTypeObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *MemberSocialType) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MemberSocialType) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no member_social_type provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(memberSocialTypeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	memberSocialTypeInsertCacheMut.RLock()
	cache, cached := memberSocialTypeInsertCache[key]
	memberSocialTypeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			memberSocialTypeAllColumns,
			memberSocialTypeColumnsWithDefault,
			memberSocialTypeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(memberSocialTypeType, memberSocialTypeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(memberSocialTypeType, memberSocialTypeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `member_social_type` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `member_social_type` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `member_social_type` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, memberSocialTypePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into member_social_type")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.MemberSocialID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for member_social_type")
	}

CacheNoHooks:
	if !cached {
		memberSocialTypeInsertCacheMut.Lock()
		memberSocialTypeInsertCache[key] = cache
		memberSocialTypeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single MemberSocialType record using the global executor.
// See Update for more documentation.
func (o *MemberSocialType) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the MemberSocialType.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MemberSocialType) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	memberSocialTypeUpdateCacheMut.RLock()
	cache, cached := memberSocialTypeUpdateCache[key]
	memberSocialTypeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			memberSocialTypeAllColumns,
			memberSocialTypePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update member_social_type, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `member_social_type` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, memberSocialTypePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(memberSocialTypeType, memberSocialTypeMapping, append(wl, memberSocialTypePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update member_social_type row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for member_social_type")
	}

	if !cached {
		memberSocialTypeUpdateCacheMut.Lock()
		memberSocialTypeUpdateCache[key] = cache
		memberSocialTypeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q memberSocialTypeQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q memberSocialTypeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for member_social_type")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for member_social_type")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o MemberSocialTypeSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MemberSocialTypeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), memberSocialTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `member_social_type` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, memberSocialTypePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in memberSocialType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all memberSocialType")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *MemberSocialType) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLMemberSocialTypeUniqueColumns = []string{
	"member_social_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MemberSocialType) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no member_social_type provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(memberSocialTypeColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLMemberSocialTypeUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	memberSocialTypeUpsertCacheMut.RLock()
	cache, cached := memberSocialTypeUpsertCache[key]
	memberSocialTypeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			memberSocialTypeAllColumns,
			memberSocialTypeColumnsWithDefault,
			memberSocialTypeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			memberSocialTypeAllColumns,
			memberSocialTypePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert member_social_type, could not build update column list")
		}

		ret := strmangle.SetComplement(memberSocialTypeAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`member_social_type`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `member_social_type` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(memberSocialTypeType, memberSocialTypeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(memberSocialTypeType, memberSocialTypeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for member_social_type")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(memberSocialTypeType, memberSocialTypeMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for member_social_type")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for member_social_type")
	}

CacheNoHooks:
	if !cached {
		memberSocialTypeUpsertCacheMut.Lock()
		memberSocialTypeUpsertCache[key] = cache
		memberSocialTypeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single MemberSocialType record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *MemberSocialType) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single MemberSocialType record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MemberSocialType) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MemberSocialType provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), memberSocialTypePrimaryKeyMapping)
	sql := "DELETE FROM `member_social_type` WHERE `member_social_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from member_social_type")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for member_social_type")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q memberSocialTypeQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q memberSocialTypeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no memberSocialTypeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from member_social_type")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for member_social_type")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o MemberSocialTypeSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MemberSocialTypeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(memberSocialTypeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), memberSocialTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `member_social_type` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, memberSocialTypePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from memberSocialType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for member_social_type")
	}

	if len(memberSocialTypeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *MemberSocialType) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no MemberSocialType provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MemberSocialType) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMemberSocialType(ctx, exec, o.MemberSocialID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MemberSocialTypeSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty MemberSocialTypeSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MemberSocialTypeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MemberSocialTypeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), memberSocialTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `member_social_type`.* FROM `member_social_type` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, memberSocialTypePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MemberSocialTypeSlice")
	}

	*o = slice

	return nil
}

// MemberSocialTypeExistsG checks if the MemberSocialType row exists.
func MemberSocialTypeExistsG(ctx context.Context, memberSocialID string) (bool, error) {
	return MemberSocialTypeExists(ctx, boil.GetContextDB(), memberSocialID)
}

// MemberSocialTypeExists checks if the MemberSocialType row exists.
func MemberSocialTypeExists(ctx context.Context, exec boil.ContextExecutor, memberSocialID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `member_social_type` where `member_social_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, memberSocialID)
	}
	row := exec.QueryRowContext(ctx, sql, memberSocialID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if member_social_type exists")
	}

	return exists, nil
}

// Exists checks if the MemberSocialType row exists.
func (o *MemberSocialType) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MemberSocialTypeExists(ctx, exec, o.MemberSocialID)
}
