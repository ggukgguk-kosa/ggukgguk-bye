// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DiaryColor is an object representing the database table.
type DiaryColor struct {
	DiaryColorID int    `boil:"diary_color_id" json:"diary_color_id" toml:"diary_color_id" yaml:"diary_color_id"`
	DiaryID      int    `boil:"diary_id" json:"diary_id" toml:"diary_id" yaml:"diary_id"`
	DiaryColor   string `boil:"diary_color" json:"diary_color" toml:"diary_color" yaml:"diary_color"`

	R *diaryColorR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L diaryColorL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DiaryColorColumns = struct {
	DiaryColorID string
	DiaryID      string
	DiaryColor   string
}{
	DiaryColorID: "diary_color_id",
	DiaryID:      "diary_id",
	DiaryColor:   "diary_color",
}

var DiaryColorTableColumns = struct {
	DiaryColorID string
	DiaryID      string
	DiaryColor   string
}{
	DiaryColorID: "diary_color.diary_color_id",
	DiaryID:      "diary_color.diary_id",
	DiaryColor:   "diary_color.diary_color",
}

// Generated where

var DiaryColorWhere = struct {
	DiaryColorID whereHelperint
	DiaryID      whereHelperint
	DiaryColor   whereHelperstring
}{
	DiaryColorID: whereHelperint{field: "`diary_color`.`diary_color_id`"},
	DiaryID:      whereHelperint{field: "`diary_color`.`diary_id`"},
	DiaryColor:   whereHelperstring{field: "`diary_color`.`diary_color`"},
}

// DiaryColorRels is where relationship names are stored.
var DiaryColorRels = struct {
	Diary string
}{
	Diary: "Diary",
}

// diaryColorR is where relationships are stored.
type diaryColorR struct {
	Diary *Diary `boil:"Diary" json:"Diary" toml:"Diary" yaml:"Diary"`
}

// NewStruct creates a new relationship struct
func (*diaryColorR) NewStruct() *diaryColorR {
	return &diaryColorR{}
}

func (r *diaryColorR) GetDiary() *Diary {
	if r == nil {
		return nil
	}
	return r.Diary
}

// diaryColorL is where Load methods for each relationship are stored.
type diaryColorL struct{}

var (
	diaryColorAllColumns            = []string{"diary_color_id", "diary_id", "diary_color"}
	diaryColorColumnsWithoutDefault = []string{"diary_id", "diary_color"}
	diaryColorColumnsWithDefault    = []string{"diary_color_id"}
	diaryColorPrimaryKeyColumns     = []string{"diary_color_id"}
	diaryColorGeneratedColumns      = []string{}
)

type (
	// DiaryColorSlice is an alias for a slice of pointers to DiaryColor.
	// This should almost always be used instead of []DiaryColor.
	DiaryColorSlice []*DiaryColor
	// DiaryColorHook is the signature for custom DiaryColor hook methods
	DiaryColorHook func(context.Context, boil.ContextExecutor, *DiaryColor) error

	diaryColorQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	diaryColorType                 = reflect.TypeOf(&DiaryColor{})
	diaryColorMapping              = queries.MakeStructMapping(diaryColorType)
	diaryColorPrimaryKeyMapping, _ = queries.BindMapping(diaryColorType, diaryColorMapping, diaryColorPrimaryKeyColumns)
	diaryColorInsertCacheMut       sync.RWMutex
	diaryColorInsertCache          = make(map[string]insertCache)
	diaryColorUpdateCacheMut       sync.RWMutex
	diaryColorUpdateCache          = make(map[string]updateCache)
	diaryColorUpsertCacheMut       sync.RWMutex
	diaryColorUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var diaryColorAfterSelectMu sync.Mutex
var diaryColorAfterSelectHooks []DiaryColorHook

var diaryColorBeforeInsertMu sync.Mutex
var diaryColorBeforeInsertHooks []DiaryColorHook
var diaryColorAfterInsertMu sync.Mutex
var diaryColorAfterInsertHooks []DiaryColorHook

var diaryColorBeforeUpdateMu sync.Mutex
var diaryColorBeforeUpdateHooks []DiaryColorHook
var diaryColorAfterUpdateMu sync.Mutex
var diaryColorAfterUpdateHooks []DiaryColorHook

var diaryColorBeforeDeleteMu sync.Mutex
var diaryColorBeforeDeleteHooks []DiaryColorHook
var diaryColorAfterDeleteMu sync.Mutex
var diaryColorAfterDeleteHooks []DiaryColorHook

var diaryColorBeforeUpsertMu sync.Mutex
var diaryColorBeforeUpsertHooks []DiaryColorHook
var diaryColorAfterUpsertMu sync.Mutex
var diaryColorAfterUpsertHooks []DiaryColorHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DiaryColor) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range diaryColorAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DiaryColor) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range diaryColorBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DiaryColor) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range diaryColorAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DiaryColor) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range diaryColorBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DiaryColor) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range diaryColorAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DiaryColor) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range diaryColorBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DiaryColor) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range diaryColorAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DiaryColor) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range diaryColorBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DiaryColor) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range diaryColorAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDiaryColorHook registers your hook function for all future operations.
func AddDiaryColorHook(hookPoint boil.HookPoint, diaryColorHook DiaryColorHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		diaryColorAfterSelectMu.Lock()
		diaryColorAfterSelectHooks = append(diaryColorAfterSelectHooks, diaryColorHook)
		diaryColorAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		diaryColorBeforeInsertMu.Lock()
		diaryColorBeforeInsertHooks = append(diaryColorBeforeInsertHooks, diaryColorHook)
		diaryColorBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		diaryColorAfterInsertMu.Lock()
		diaryColorAfterInsertHooks = append(diaryColorAfterInsertHooks, diaryColorHook)
		diaryColorAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		diaryColorBeforeUpdateMu.Lock()
		diaryColorBeforeUpdateHooks = append(diaryColorBeforeUpdateHooks, diaryColorHook)
		diaryColorBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		diaryColorAfterUpdateMu.Lock()
		diaryColorAfterUpdateHooks = append(diaryColorAfterUpdateHooks, diaryColorHook)
		diaryColorAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		diaryColorBeforeDeleteMu.Lock()
		diaryColorBeforeDeleteHooks = append(diaryColorBeforeDeleteHooks, diaryColorHook)
		diaryColorBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		diaryColorAfterDeleteMu.Lock()
		diaryColorAfterDeleteHooks = append(diaryColorAfterDeleteHooks, diaryColorHook)
		diaryColorAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		diaryColorBeforeUpsertMu.Lock()
		diaryColorBeforeUpsertHooks = append(diaryColorBeforeUpsertHooks, diaryColorHook)
		diaryColorBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		diaryColorAfterUpsertMu.Lock()
		diaryColorAfterUpsertHooks = append(diaryColorAfterUpsertHooks, diaryColorHook)
		diaryColorAfterUpsertMu.Unlock()
	}
}

// OneG returns a single diaryColor record from the query using the global executor.
func (q diaryColorQuery) OneG(ctx context.Context) (*DiaryColor, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single diaryColor record from the query.
func (q diaryColorQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DiaryColor, error) {
	o := &DiaryColor{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for diary_color")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all DiaryColor records from the query using the global executor.
func (q diaryColorQuery) AllG(ctx context.Context) (DiaryColorSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all DiaryColor records from the query.
func (q diaryColorQuery) All(ctx context.Context, exec boil.ContextExecutor) (DiaryColorSlice, error) {
	var o []*DiaryColor

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DiaryColor slice")
	}

	if len(diaryColorAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all DiaryColor records in the query using the global executor
func (q diaryColorQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all DiaryColor records in the query.
func (q diaryColorQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count diary_color rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q diaryColorQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q diaryColorQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if diary_color exists")
	}

	return count > 0, nil
}

// Diary pointed to by the foreign key.
func (o *DiaryColor) Diary(mods ...qm.QueryMod) diaryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`diary_id` = ?", o.DiaryID),
	}

	queryMods = append(queryMods, mods...)

	return Diaries(queryMods...)
}

// LoadDiary allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (diaryColorL) LoadDiary(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDiaryColor interface{}, mods queries.Applicator) error {
	var slice []*DiaryColor
	var object *DiaryColor

	if singular {
		var ok bool
		object, ok = maybeDiaryColor.(*DiaryColor)
		if !ok {
			object = new(DiaryColor)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDiaryColor)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDiaryColor))
			}
		}
	} else {
		s, ok := maybeDiaryColor.(*[]*DiaryColor)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDiaryColor)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDiaryColor))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &diaryColorR{}
		}
		args[object.DiaryID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &diaryColorR{}
			}

			args[obj.DiaryID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`diary`),
		qm.WhereIn(`diary.diary_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Diary")
	}

	var resultSlice []*Diary
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Diary")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for diary")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for diary")
	}

	if len(diaryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Diary = foreign
		if foreign.R == nil {
			foreign.R = &diaryR{}
		}
		foreign.R.DiaryColors = append(foreign.R.DiaryColors, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DiaryID == foreign.DiaryID {
				local.R.Diary = foreign
				if foreign.R == nil {
					foreign.R = &diaryR{}
				}
				foreign.R.DiaryColors = append(foreign.R.DiaryColors, local)
				break
			}
		}
	}

	return nil
}

// SetDiaryG of the diaryColor to the related item.
// Sets o.R.Diary to related.
// Adds o to related.R.DiaryColors.
// Uses the global database handle.
func (o *DiaryColor) SetDiaryG(ctx context.Context, insert bool, related *Diary) error {
	return o.SetDiary(ctx, boil.GetContextDB(), insert, related)
}

// SetDiary of the diaryColor to the related item.
// Sets o.R.Diary to related.
// Adds o to related.R.DiaryColors.
func (o *DiaryColor) SetDiary(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Diary) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `diary_color` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"diary_id"}),
		strmangle.WhereClause("`", "`", 0, diaryColorPrimaryKeyColumns),
	)
	values := []interface{}{related.DiaryID, o.DiaryColorID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DiaryID = related.DiaryID
	if o.R == nil {
		o.R = &diaryColorR{
			Diary: related,
		}
	} else {
		o.R.Diary = related
	}

	if related.R == nil {
		related.R = &diaryR{
			DiaryColors: DiaryColorSlice{o},
		}
	} else {
		related.R.DiaryColors = append(related.R.DiaryColors, o)
	}

	return nil
}

// DiaryColors retrieves all the records using an executor.
func DiaryColors(mods ...qm.QueryMod) diaryColorQuery {
	mods = append(mods, qm.From("`diary_color`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`diary_color`.*"})
	}

	return diaryColorQuery{q}
}

// FindDiaryColorG retrieves a single record by ID.
func FindDiaryColorG(ctx context.Context, diaryColorID int, selectCols ...string) (*DiaryColor, error) {
	return FindDiaryColor(ctx, boil.GetContextDB(), diaryColorID, selectCols...)
}

// FindDiaryColor retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDiaryColor(ctx context.Context, exec boil.ContextExecutor, diaryColorID int, selectCols ...string) (*DiaryColor, error) {
	diaryColorObj := &DiaryColor{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `diary_color` where `diary_color_id`=?", sel,
	)

	q := queries.Raw(query, diaryColorID)

	err := q.Bind(ctx, exec, diaryColorObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from diary_color")
	}

	if err = diaryColorObj.doAfterSelectHooks(ctx, exec); err != nil {
		return diaryColorObj, err
	}

	return diaryColorObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *DiaryColor) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DiaryColor) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no diary_color provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(diaryColorColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	diaryColorInsertCacheMut.RLock()
	cache, cached := diaryColorInsertCache[key]
	diaryColorInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			diaryColorAllColumns,
			diaryColorColumnsWithDefault,
			diaryColorColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(diaryColorType, diaryColorMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(diaryColorType, diaryColorMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `diary_color` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `diary_color` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `diary_color` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, diaryColorPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into diary_color")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.DiaryColorID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == diaryColorMapping["diary_color_id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.DiaryColorID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for diary_color")
	}

CacheNoHooks:
	if !cached {
		diaryColorInsertCacheMut.Lock()
		diaryColorInsertCache[key] = cache
		diaryColorInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single DiaryColor record using the global executor.
// See Update for more documentation.
func (o *DiaryColor) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the DiaryColor.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DiaryColor) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	diaryColorUpdateCacheMut.RLock()
	cache, cached := diaryColorUpdateCache[key]
	diaryColorUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			diaryColorAllColumns,
			diaryColorPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update diary_color, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `diary_color` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, diaryColorPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(diaryColorType, diaryColorMapping, append(wl, diaryColorPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update diary_color row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for diary_color")
	}

	if !cached {
		diaryColorUpdateCacheMut.Lock()
		diaryColorUpdateCache[key] = cache
		diaryColorUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q diaryColorQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q diaryColorQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for diary_color")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for diary_color")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o DiaryColorSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DiaryColorSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), diaryColorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `diary_color` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, diaryColorPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in diaryColor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all diaryColor")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *DiaryColor) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLDiaryColorUniqueColumns = []string{
	"diary_color_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DiaryColor) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no diary_color provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(diaryColorColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDiaryColorUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	diaryColorUpsertCacheMut.RLock()
	cache, cached := diaryColorUpsertCache[key]
	diaryColorUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			diaryColorAllColumns,
			diaryColorColumnsWithDefault,
			diaryColorColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			diaryColorAllColumns,
			diaryColorPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert diary_color, could not build update column list")
		}

		ret := strmangle.SetComplement(diaryColorAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`diary_color`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `diary_color` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(diaryColorType, diaryColorMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(diaryColorType, diaryColorMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for diary_color")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.DiaryColorID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == diaryColorMapping["diary_color_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(diaryColorType, diaryColorMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for diary_color")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for diary_color")
	}

CacheNoHooks:
	if !cached {
		diaryColorUpsertCacheMut.Lock()
		diaryColorUpsertCache[key] = cache
		diaryColorUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single DiaryColor record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *DiaryColor) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single DiaryColor record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DiaryColor) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DiaryColor provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), diaryColorPrimaryKeyMapping)
	sql := "DELETE FROM `diary_color` WHERE `diary_color_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from diary_color")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for diary_color")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q diaryColorQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q diaryColorQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no diaryColorQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from diary_color")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for diary_color")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o DiaryColorSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DiaryColorSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(diaryColorBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), diaryColorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `diary_color` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, diaryColorPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from diaryColor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for diary_color")
	}

	if len(diaryColorAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *DiaryColor) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no DiaryColor provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DiaryColor) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDiaryColor(ctx, exec, o.DiaryColorID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DiaryColorSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty DiaryColorSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DiaryColorSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DiaryColorSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), diaryColorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `diary_color`.* FROM `diary_color` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, diaryColorPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DiaryColorSlice")
	}

	*o = slice

	return nil
}

// DiaryColorExistsG checks if the DiaryColor row exists.
func DiaryColorExistsG(ctx context.Context, diaryColorID int) (bool, error) {
	return DiaryColorExists(ctx, boil.GetContextDB(), diaryColorID)
}

// DiaryColorExists checks if the DiaryColor row exists.
func DiaryColorExists(ctx context.Context, exec boil.ContextExecutor, diaryColorID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `diary_color` where `diary_color_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, diaryColorID)
	}
	row := exec.QueryRowContext(ctx, sql, diaryColorID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if diary_color exists")
	}

	return exists, nil
}

// Exists checks if the DiaryColor row exists.
func (o *DiaryColor) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DiaryColorExists(ctx, exec, o.DiaryColorID)
}
